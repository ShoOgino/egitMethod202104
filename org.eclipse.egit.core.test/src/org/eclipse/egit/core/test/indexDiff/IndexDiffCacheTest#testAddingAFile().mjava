	@Test
	public void testAddingAFile() throws Exception {
		new ConnectProviderOperation(project.project, repository.getDirectory())
				.execute(null);
		// create first commit containing a dummy file
		testRepository
				.createInitialCommit("testBranchOperation\n\nfirst commit\n");
		IndexDiffCache indexDiffCache = Activator.getDefault()
				.getIndexDiffCache();
		// This call should trigger an indexDiffChanged event
		IndexDiffCacheEntry cacheEntry = indexDiffCache
				.getIndexDiffCacheEntry(repository);
		final AtomicBoolean listenerCalled = new AtomicBoolean(false);
		final AtomicReference<IndexDiffData> resultDiff = new AtomicReference<IndexDiffData>(
				null);
		cacheEntry.addIndexDiffChangedListener(new IndexDiffChangedListener() {
			public void indexDiffChanged(Repository repo,
					IndexDiffData indexDiffData) {
				listenerCalled.set(true);
				resultDiff.set(indexDiffData);
				System.out.println(indexDiffData.toString());
			}
		});
		waitForListenerCalled(listenerCalled);
		final String fileName = "aFile";
		// This call should trigger an indexDiffChanged event (triggered via
		// resource changed event)
		project.createFile(fileName, "content".getBytes("UTF-8"));
		waitForListenerCalled(listenerCalled);
		IndexDiffData indexDiffData = resultDiff.get();
		String path = project.project.getFile(fileName).getFullPath()
				.toString().substring(1);
		if (!indexDiffData.getUntracked().contains(path))
			fail("IndexDiffData did not contain aFile as untracked");
		new Git(repository).add().addFilepattern(path).call();
		// This call should trigger an indexDiffChanged event
		repository.fireEvent(new IndexChangedEvent());
		waitForListenerCalled(listenerCalled);
		indexDiffData = resultDiff.get();
		if (indexDiffData.getUntracked().contains(path))
			fail("IndexDiffData contains aFile as untracked");
		if (!indexDiffData.getAdded().contains(path))
			fail("IndexDiffData does not contain aFile as added");
	}

