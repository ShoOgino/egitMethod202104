	protected IMergeContext prepareModelContext(Repository repository,
			IFile workspaceFile, String srcRev, String dstRev) throws Exception {
		Set<IResource> includedResources = new HashSet<>(
				Arrays.asList(workspaceFile));
		Set<IResource> newResources = new HashSet<>(includedResources);
		Set<ResourceMapping> allMappings = new HashSet<>();
		ResourceMappingContext mappingContext = ResourceMappingContext.LOCAL_CONTEXT;
		ModelProvider provider = ModelProvider.getModelProviderDescriptor(
				SampleModelProvider.SAMPLE_PROVIDER_ID).getModelProvider();
		do {
			Set<IResource> copy = newResources;
			newResources = new HashSet<>();
			for (IResource resource : copy) {
				ResourceMapping[] mappings = provider.getMappings(resource,
						mappingContext, new NullProgressMonitor());
				allMappings.addAll(Arrays.asList(mappings));

				newResources.addAll(collectResources(mappings, mappingContext));
			}
		} while (includedResources.addAll(newResources));
		ResourceMapping[] mappings = allMappings
				.toArray(new ResourceMapping[0]);

		GitSynchronizeData gsd = new GitSynchronizeData(repository, srcRev,
				dstRev, true, includedResources);
		GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd);
		GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(
				gsds);
		subscriber.init(new NullProgressMonitor());

		GitSubscriberResourceMappingContext resourceMappingContext = new GitSubscriberResourceMappingContext(
				subscriber, gsds);
		SubscriberScopeManager manager = new SubscriberScopeManager(
				subscriber.getName(), mappings, subscriber,
				resourceMappingContext, true);
		manager.initialize(new NullProgressMonitor());

		GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(
				subscriber, manager, gsds);
		// Wait for asynchronous update of the diff tree to end
		Job.getJobManager().join(mergeContext, new NullProgressMonitor());
		return mergeContext;
	}

