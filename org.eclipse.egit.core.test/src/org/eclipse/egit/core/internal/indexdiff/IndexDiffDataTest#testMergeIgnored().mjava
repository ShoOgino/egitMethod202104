	@Test
	public void testMergeIgnored() {
		Set<String> result;
		Set<String> expected = new HashSet<>();
		Set<String> oldIgnoredPaths = new HashSet<>();
		Collection<String> changedPaths = new HashSet<>();
		Set<String> newIgnoredPaths = new HashSet<>();

		result = mergeIgnored(oldIgnoredPaths, changedPaths, newIgnoredPaths);
		assertEquals(expected, result);

		newIgnoredPaths.add("a");
		changedPaths.add("a");
		expected.add("a");
		result = mergeIgnored(oldIgnoredPaths, changedPaths, newIgnoredPaths);
		assertEquals(expected, result);

		newIgnoredPaths.add("b");
		expected.add("b");
		result = mergeIgnored(oldIgnoredPaths, changedPaths, newIgnoredPaths);
		assertEquals(expected, result);

		changedPaths.add("b");
		result = mergeIgnored(oldIgnoredPaths, changedPaths, newIgnoredPaths);
		assertEquals(expected, result);

		oldIgnoredPaths.add("b");
		result = mergeIgnored(oldIgnoredPaths, changedPaths, newIgnoredPaths);
		assertEquals(expected, result);

		oldIgnoredPaths.add("c");
		expected.add("c");
		result = mergeIgnored(oldIgnoredPaths, changedPaths, newIgnoredPaths);
		assertEquals(expected, result);

		newIgnoredPaths.add("b");
		expected.add("b");
		result = mergeIgnored(oldIgnoredPaths, changedPaths, newIgnoredPaths);
		assertEquals(expected, result);
	}

