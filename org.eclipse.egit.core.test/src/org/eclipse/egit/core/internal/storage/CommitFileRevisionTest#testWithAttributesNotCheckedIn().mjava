	@Test
	public void testWithAttributesNotCheckedIn() throws Exception {
		java.nio.file.Path filePath = createFile(project.getProject(),
				"attr.txt", "a");
		try (Git git = new Git(repository)) {
			git.add().addFilepattern(".").call();
			RevCommit head = git.commit().setMessage("Initial commit").call();
			// Verify that we do have "a" in the repo: modify the file, do a
			// hard reset, verify the contents to be "a" again
			createFile(project.getProject(), "attr.txt", "aa");
			git.reset().setMode(ResetType.HARD).call();
			List<String> content = Files.readAllLines(filePath,
					StandardCharsets.UTF_8);
			assertEquals(1, content.size());
			assertEquals("a", content.get(0));
			// Now create a smudge filter that will replace all a's by x's.
			setupFilter(repository, project.getProject(), false);
			// Modify the file again and do a hard reset. Interestingly we end
			// up with a file containing 'x': the checkout does apply the
			// not-yet-committed .gitattributes. I do not know whether that is
			// correct.
			createFile(project.getProject(), "attr.txt", "aa");
			git.reset().setMode(ResetType.HARD).call();
			content = Files.readAllLines(filePath, StandardCharsets.UTF_8);
			assertEquals(1, content.size());
			assertEquals("x", content.get(0));
			// All right. Now get a CommitFileRevision and check its contents.
			String relativePath = getRevisionPath(filePath);
			CommitFileRevision fileRevision = new CommitFileRevision(repository,
					head, relativePath);
			ByteBuffer rawContent = null;
			try (InputStream blobStream = fileRevision
					.getStorage(new NullProgressMonitor()).getContents()) {
				rawContent = IO.readWholeStream(blobStream, 1);
			}
			assertNotNull(rawContent);
			String blobContent = new String(rawContent.array(), 0,
					rawContent.limit(), StandardCharsets.UTF_8);
			// Prize question: what do we expect here? We explicitly say we
			// want to look at an older version. (OK, in this test it happens
			// to be HEAD, but that's immaterial.) I believe the correct
			// behavior is to apply only the attributes as they existed in that
			// commit, i.e., to disregard the .gitattributes in the file system.
			// Note, however, that this means that we get a different behavior
			// than if we checked out the commit. Also note that global/info
			// attributes get applied in any case -- that behavior is
			// unavoidable and appears to be wanted by the .gitattributes spec.
			assertEquals("a", blobContent);
		} finally {
			FilterCommandRegistry.unregister("egit://builtin/test/smudge");
		}
	}

