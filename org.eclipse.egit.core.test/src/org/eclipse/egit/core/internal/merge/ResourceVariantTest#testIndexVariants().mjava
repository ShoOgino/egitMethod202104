	@Test
	public void testIndexVariants() throws Exception {
		File file1 = testRepo.createFile(iProject, "file1");
		File file2 = testRepo.createFile(iProject, "file2");
		IFile iFile1 = testRepo.getIFile(iProject, file1);
		IFile iFile2 = testRepo.getIFile(iProject, file2);

		setupUnconflictingBranches();

		List<String> possibleNames = Arrays.asList(iFile1.getName(),
				iFile2.getName());
		DirCache cache = repo.readDirCache();
		for (int i = 0; i < cache.getEntryCount(); i++) {
			final DirCacheEntry entry = cache.getEntry(i);

			AbstractGitResourceVariant variant = IndexResourceVariant.create(
					repo, entry);

			assertEquals(entry.getObjectId().getName(),
					variant.getContentIdentifier());
			assertTrue(possibleNames.contains(variant.getName()));
			assertEquals(entry.getObjectId(), variant.getObjectId());
			assertEquals(entry.getRawMode(), variant.getRawMode());
			if (iFile1.getName().equals(variant.getName())) {
				assertContentEquals(variant, INITIAL_CONTENT_1 + MASTER_CHANGE);
			} else {
				assertContentEquals(variant, INITIAL_CONTENT_2 + MASTER_CHANGE);
			}
		}

		testRepo.checkoutBranch(BRANCH);

		cache = repo.readDirCache();
		for (int i = 0; i < cache.getEntryCount(); i++) {
			final DirCacheEntry entry = cache.getEntry(i);

			AbstractGitResourceVariant variant = IndexResourceVariant.create(
					repo, entry);
			assertEquals(entry.getObjectId().getName(),
					variant.getContentIdentifier());
			assertTrue(possibleNames.contains(variant.getName()));
			assertEquals(entry.getObjectId(), variant.getObjectId());
			assertEquals(entry.getRawMode(), variant.getRawMode());
			if (iFile1.getName().equals(variant.getName())) {
				assertContentEquals(variant, BRANCH_CHANGE + INITIAL_CONTENT_1);
			} else {
				assertContentEquals(variant, BRANCH_CHANGE + INITIAL_CONTENT_2);
			}
		}
	}

