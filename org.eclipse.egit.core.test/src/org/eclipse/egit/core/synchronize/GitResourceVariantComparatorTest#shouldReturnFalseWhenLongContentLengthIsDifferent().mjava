	/**
	 * Comparing two 'large' files that have different length but same content
	 * should return false.
	 * <p>
	 * This and previous three test cases cover almost the same functionality
	 * but they are covering all return points in compare methods that can be
	 * used when comparing files content
	 *
	 * @throws Exception
	 */
	@Test
	@SuppressWarnings("boxing")
	public void shouldReturnFalseWhenLongContentLengthIsDifferent()
			throws Exception {
		// when
		byte[] localContent = new byte[8192];
		Arrays.fill(localContent, (byte) 'a');
		byte[] remoteContent = new byte[8200];
		Arrays.fill(remoteContent, (byte) 'a');
		GitSynchronizeData data = new GitSynchronizeData(repo, HEAD, HEAD, true);
		GitSynchronizeDataSet dataSet = new GitSynchronizeDataSet(data);
		GitResourceVariantComparator grvc = new GitResourceVariantComparator(
				dataSet);

		// given
		IFile local = mock(IFile.class);
		when(local.exists()).thenReturn(true);
		when(local.getProject()).thenReturn(project.getProject());
		when(local.getContents()).thenReturn(
				new ByteArrayInputStream(localContent));

		IStorage storage = mock(IStorage.class);
		when(storage.getContents()).thenReturn(
				new ByteArrayInputStream(remoteContent));

		IResourceVariant remote = mock(IResourceVariant.class);
		when(remote.isContainer()).thenReturn(false);
		when(remote.getStorage(any(IProgressMonitor.class))).thenReturn(
				storage);

		// then
		assertFalse(grvc.compare(local, remote));
	}

