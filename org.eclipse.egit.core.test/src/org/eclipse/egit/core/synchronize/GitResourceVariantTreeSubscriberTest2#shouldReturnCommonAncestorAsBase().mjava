	/**
	 * Both source and destination branches has some different commits but they
	 * has also common ancestor. This situation is described more detailed in
	 * bug #317934
	 *
	 * This test passes when it is run as a stand alone test case, but it fails
	 * when it is run as part of test suite. It throws NPE when it try's to
	 * checkout master branch.
	 *
	 * @throws Exception
	 */
	@Test
	public void shouldReturnCommonAncestorAsBase() throws Exception {
		// when
		String fileName = "Main.java";
		File file = testRepo.createFile(iProject, fileName);
		RevCommit commit = testRepo.appendContentAndCommit(iProject, file,
				"class Main {}", "initial commit");
		IFile mainJava = testRepo.getIFile(iProject, file);
		// this should be our common ancestor
		ObjectId fileId = findFileId(commit, mainJava);

		testRepo.createAndCheckoutBranch(Constants.HEAD, Constants.R_HEADS
				+ "test");
		testRepo.appendContentAndCommit(iProject, file, "// test 1",
				"second commit");

		testRepo.checkoutBranch(Constants.R_HEADS + Constants.MASTER);
		testRepo.appendContentAndCommit(iProject, file, "// test 2",
				"third commit");

		// given
		GitResourceVariantTreeSubscriber grvts = createGitResourceVariantTreeSubscriber(
				Constants.HEAD, Constants.R_HEADS + "test");
		grvts.getBaseTree();
		IResourceVariantTree baseTree = grvts.getBaseTree();

		// then
		IResourceVariant actual = commonAssertionsForBaseTree(baseTree,
				mainJava);
		assertEquals(fileId.getName(), actual.getContentIdentifier());
	}

