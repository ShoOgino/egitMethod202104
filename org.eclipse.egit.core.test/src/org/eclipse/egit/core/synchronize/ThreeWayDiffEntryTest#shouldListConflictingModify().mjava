	@Test
	public void shouldListConflictingModify() throws Exception {
		// given
		writeTrashFile("a.txt", "content");
		RevCommit c;
		RevCommit c1;
		try (Git git = new Git(db)) {
			git.add().addFilepattern("a.txt").call();
			c = git.commit().setMessage("initial commit").call();
			writeTrashFile("a.txt", "new line");
			c1 = git.commit().setAll(true).setMessage("second commit").call();
		}

		// when
		try (TreeWalk walk = new TreeWalk(db)) {
			walk.addTree(c1.getTree());
			walk.addTree(c.getTree());
			walk.addTree(c1.getTree());
			List<ThreeWayDiffEntry> result = ThreeWayDiffEntry.scan(walk);

			// then
			assertThat(result, notNullValue());
			assertThat(Integer.valueOf(result.size()), is(Integer.valueOf(1)));

			ThreeWayDiffEntry entry = result.get(0);
			assertThat(entry.getDirection(), is(Direction.CONFLICTING));
			assertThat(entry.getChangeType(), is(ChangeType.MODIFY));
			assertThat(entry.getPath(), is("a.txt"));
		}
	}

