	/**
	 * Get a repository builder that can be used to build our cached
	 * repositories. It automatically caches the result, and ensures its git
	 * directory is normalized. If a cached repository already exists, it
	 * returns the cached instance instead of creating a new one.
	 *
	 * @param preventClose
	 *            whether to ensure that the next {@link Repository#close()}
	 *            call on the repository is a no-op
	 * @param cache
	 *            whether the repository config should be cached for all
	 *            operations until the next call to {@link Repository#close()}.
	 *
	 * @return A repository builder that caches the repository or returns a
	 *         possibly already cached instance.
	 */
	public BaseRepositoryBuilder<? extends BaseRepositoryBuilder, ? extends Repository> getBuilder(
			boolean preventClose, boolean cache) {
		return new Builder() {

			@Override
			public RepositoryHandle build() throws IOException {
				RepositoryHandle result = super.build();
				if (preventClose) {
					result.incrementOpen();
				}
				if (cache) {
					Repository inner = result.getDelegate();
					if (inner instanceof CachingRepository) {
						((CachingRepository) inner).cacheConfig(true);
					}
				}
				return result;
			}
		};
	}

