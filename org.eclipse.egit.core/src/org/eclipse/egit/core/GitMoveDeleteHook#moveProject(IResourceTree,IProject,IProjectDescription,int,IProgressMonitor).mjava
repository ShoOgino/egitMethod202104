	public boolean moveProject(final IResourceTree tree, final IProject source,
			final IProjectDescription description, final int updateFlags,
			final IProgressMonitor monitor) {
		final RepositoryMapping srcm = RepositoryMapping.getMapping(source);
		if (srcm == null)
			return false;
		File newLocation = new File(description.getLocationURI().getPath());
		// check if new location is below the same repository
		if(newLocation.getAbsolutePath().contains(srcm.getRepository().getWorkTree().getAbsolutePath())) {
			final String sPath = srcm.getRepoRelativePath(source);
			final String dPath = new Path(newLocation.getAbsolutePath().substring(
					srcm.getRepository().getWorkTree().getAbsolutePath().length() + 1) + "/").toPortableString(); //$NON-NLS-1$
			try {
				MoveResult result = moveIndexContent(dPath, srcm, sPath);
				switch (result) {
				case SUCCESS:
					break;
				case FAILED:
					tree.failed(new Status(IStatus.ERROR, Activator
							.getPluginId(), 0,
							CoreText.MoveDeleteHook_operationError, null));
					break;
				case UNTRACKED:
					// we are not responsible for moving untracked files
					return FINISH_FOR_ME;
				}

				tree.standardMoveProject(source, description, updateFlags,
						monitor);
			} catch (IOException e) {
				tree.failed(new Status(IStatus.ERROR, Activator.getPluginId(), 0,
						CoreText.MoveDeleteHook_operationError, e));
			}
			return true;
		}

		return FINISH_FOR_ME;
	}

