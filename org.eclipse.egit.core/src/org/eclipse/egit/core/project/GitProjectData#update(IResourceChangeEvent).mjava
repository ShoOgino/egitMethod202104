	/**
	 * Update mappings of EGit-managed projects in response to new DOT_GIT
	 * repositories appearing.
	 *
	 * @param event
	 *            A {@link IResourceChangeEvent#POST_CHANGE} event
	 */
	public static void update(IResourceChangeEvent event) {
		// If the project is EGit-managed, let's see if this added any DOT_GIT
		// files or folders. If so, update the project's RepositoryMappings
		// and then mark as team private, if anything added. We won't get
		// deletions of DOT_GIT directories or files here, those are
		// "protected" and the GitMoveDeleteHook will prevent their deletion --
		// the project has to be disconnected first.
		final Set<GitProjectData> modified = new HashSet<>();
		try {
			event.getDelta().accept(new IResourceDeltaVisitor() {
				@Override
				public boolean visit(IResourceDelta delta)
						throws CoreException {
					IResource resource = delta.getResource();
					int type = resource.getType();
					if (type == IResource.ROOT) {
						return true;
					} else if (type == IResource.PROJECT) {
						return (delta.getKind() & (IResourceDelta.ADDED
								| IResourceDelta.CHANGED)) != 0
								&& ResourceUtil.isSharedWithGit(resource);
					}
					// Files & folders
					if ((delta.getKind() & (IResourceDelta.ADDED
							| IResourceDelta.CHANGED)) == 0
							|| resource.isLinked()) {
						return false;
					}
					if (!Constants.DOT_GIT.equals(resource.getName())) {
						return type == IResource.FOLDER;
					}
					createMappingIfNeeded(resource, modified);
					return false;
				}
			});
		} catch (CoreException e) {
			Activator.logError(e.getMessage(), e);
		} finally {
			for (GitProjectData data : modified) {
				try {
					data.store();
				} catch (CoreException e) {
					Activator.logError(e.getMessage(), e);
				}
			}
		}
	}

