	private void map(final RepositoryMapping m) {
		final IResource r;
		final File git;
		final IResource dotGit;
		IContainer c = null;

		m.clear();
		r = getProject().findMember(m.getContainerPath());
		if (r instanceof IContainer) {
			c = (IContainer) r;
		} else if (r != null) {
			c = Utils.getAdapter(r, IContainer.class);
		}

		if (c == null) {
			logAndUnmapGoneMappedResource(m);
			return;
		}
		m.setContainer(c);

		IPath absolutePath = m.getGitDirAbsolutePath();
		if (absolutePath == null) {
			logAndUnmapGoneMappedResource(m);
			return;
		}
		git = absolutePath.toFile();

		if (!RepositoryCache.FileKey.isGitRepository(git, FS.DETECTED)) {
			logAndUnmapGoneMappedResource(m);
			return;
		}

		try {
			m.setRepository(Activator.getDefault().getRepositoryCache()
					.lookupRepository(git));
		} catch (IOException ioe) {
			logAndUnmapGoneMappedResource(m);
			return;
		}

		trace("map "  //$NON-NLS-1$
				+ c
				+ " -> "  //$NON-NLS-1$
				+ m.getRepository());
		try {
			c.setSessionProperty(MAPPING_KEY, m);
		} catch (CoreException err) {
			Activator.logError(
					CoreText.GitProjectData_failedToCacheRepoMapping, err);
		}

		fireRepositoryChanged(m);

		dotGit = c.findMember(Constants.DOT_GIT);
		if (dotGit != null) {
			protect(dotGit);
		}
	}

