	/**
	 * Scan all descendants for files or folders named ".git" and pass them to
	 * GitProjectData to pick up possible submodules or nested repositories.
	 *
	 * @param project
	 *            to process
	 * @param monitor
	 *            for progress reporting and cancellation, may be {@code null}
	 *            if neither is desired
	 */
	private void checkForSubmodules(IProject project,
			IProgressMonitor monitor) {
		SubMonitor progress = SubMonitor.convert(monitor, 2);
		SubMonitor seekProgress = progress.newChild(1);
		List<IResource> gitDirs = new ArrayList<>();
		try {
			project.accept(new IResourceProxyVisitor() {
				@Override
				public boolean visit(IResourceProxy resource)
						throws CoreException {
					int type = resource.getType();
					if ((type == IResource.FILE || type == IResource.FOLDER)
							&& Constants.DOT_GIT.equals(resource.getName())) {
						seekProgress.setWorkRemaining(2);
						gitDirs.add(resource.requestResource());
						seekProgress.worked(1);
						return false;
					}
					return true;
				}
			}, IResource.NONE);
		} catch (CoreException e) {
			Activator.logError(e.getMessage(), e);
		}
		GitProjectData.update(gitDirs, progress.newChild(1));
	}

