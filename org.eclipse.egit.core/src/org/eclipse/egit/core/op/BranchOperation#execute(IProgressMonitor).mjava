	@Override
	public void execute(IProgressMonitor m) throws CoreException {
		IWorkspaceRunnable action = new IWorkspaceRunnable() {

			@Override
			public void run(IProgressMonitor pm) throws CoreException {
				try {
					pm.setTaskName(MessageFormat.format(
							CoreText.BranchOperation_performingBranch, target));
					int numberOfRepositories = repositories.length;
					SubMonitor progress = SubMonitor.convert(pm,
							numberOfRepositories * 2);
					for (Repository repository : repositories) {
						CheckoutResult result = checkoutRepository(repository,
								progress.newChild(1), numberOfRepositories > 1);
						if (result.getStatus() == Status.NONDELETED) {
							retryDelete(repository, result.getUndeletedList());
						}
						results.put(repository, result);
					}
					refreshAffectedProjects(
							progress.newChild(numberOfRepositories));
				} finally {
					pm.done();
				}
			}

			public CheckoutResult checkoutRepository(Repository repo,
					IProgressMonitor monitor, boolean logErrors)
					throws CoreException {
				SubMonitor progress = SubMonitor.convert(monitor, 2);
				closeProjectsMissingAfterCheckout(repo, progress.newChild(1));
				try (Git git = new Git(repo)) {
					CheckoutCommand co = git.checkout().setProgressMonitor(
							new EclipseGitProgressTransformer(
									progress.newChild(1)));
					co.setName(target);
					try {
						co.call();
					} catch (CheckoutConflictException e) {
						// Covered by the status return below.
					} catch (JGitInternalException | GitAPIException e) {
						String msg = MessageFormat.format(
								CoreText.BranchOperation_checkoutError,
								target, repo.getDirectory());
						if (logErrors) {
							Activator.logError(msg, e);
						} else {
							throw new CoreException(Activator.error(msg, e));
						}
					}
					return co.getResult();
				}
			}

			private void closeProjectsMissingAfterCheckout(Repository repo,
					IProgressMonitor monitor) throws CoreException {
				IProject[] missing = getMissingProjects(repo, target);

				if (missing.length > 0) {
					SubMonitor closeMonitor = SubMonitor.convert(monitor,
							missing.length);
					closeMonitor.setWorkRemaining(missing.length);
					for (IProject project : missing) {
						closeMonitor.subTask(MessageFormat.format(
								CoreText.BranchOperation_closingMissingProject,
								project.getName()));
						project.close(closeMonitor.newChild(1));
					}
				}
			}

			private void refreshAffectedProjects(IProgressMonitor monitor)
					throws CoreException {
				IProject[] refreshProjects = results.entrySet().stream()
						.map(this::getAffectedProjects)
						.flatMap(arr -> Stream.of(arr)).distinct()
						.toArray(IProject[]::new);
				ProjectUtil.refreshValidProjects(refreshProjects, delete,
						monitor);
			}

			private IProject[] getAffectedProjects(
					Entry<Repository, CheckoutResult> entry) {
				CheckoutResult result = entry.getValue();

				if (result.getStatus() != Status.OK
						&& result.getStatus() != Status.NONDELETED) {
					// the checkout did not succeed
					return new IProject[0];
				}

				Repository repo = entry.getKey();
				List<String> pathsToHandle = new ArrayList<>();
				pathsToHandle.addAll(result.getModifiedList());
				pathsToHandle.addAll(result.getRemovedList());
				pathsToHandle.addAll(result.getConflictList());
				IProject[] refreshProjects = ProjectUtil
						.getProjectsContaining(repo, pathsToHandle);
				return refreshProjects;
			}
		};
		// lock workspace to protect working tree changes
		ResourcesPlugin.getWorkspace().run(action, getSchedulingRule(),
				IWorkspace.AVOID_UPDATE, m);
	}

