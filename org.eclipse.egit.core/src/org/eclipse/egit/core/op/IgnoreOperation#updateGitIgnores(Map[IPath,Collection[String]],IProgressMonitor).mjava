	private void updateGitIgnores(Map<IPath, Collection<String>> perFolder,
			IProgressMonitor monitor) throws CoreException, IOException {
		SubMonitor progress = SubMonitor.convert(monitor, perFolder.size() * 2);
		for (Map.Entry<IPath, Collection<String>> entry : perFolder
				.entrySet()) {
			if (progress.isCanceled()) {
				return;
			}
			IContainer container = ResourceUtil
					.getContainerForLocation(entry.getKey(), false);
			if (container instanceof IWorkspaceRoot) {
				container = null;
			}
			Collection<String> files = entry.getValue();
			if (files.isEmpty()) {
				progress.worked(1);
				continue;
			}
			StringBuilder builder = new StringBuilder();
			for (String fileName : files) {
				builder.append('/').append(fileName);
				boolean isDirectory = false;
				IResource resource = container != null
						? container.findMember(fileName)
						: null;
				if (resource != null) {
					int rscType = resource.getType();
					isDirectory = rscType != IResource.FILE;
					if (isDirectory) {
						IPath location = resource.getLocation();
						if (location != null) {
							isDirectory = !Files.isSymbolicLink(
									FileUtils.toPath(location.toFile()));
						}
					}
				} else {
					File file = entry.getKey().append(fileName).toFile();
					isDirectory = file.isDirectory();
					if (isDirectory) {
						isDirectory = !Files
								.isSymbolicLink(FileUtils.toPath(file));
					}
				}
				if (isDirectory) {
					builder.append('/');
				}
				builder.append('\n');
			}
			progress.worked(1);
			if (progress.isCanceled()) {
				return;
			}
			addToGitIgnore(container, entry.getKey(), builder.toString(),
					progress.newChild(1));
		}
	}

