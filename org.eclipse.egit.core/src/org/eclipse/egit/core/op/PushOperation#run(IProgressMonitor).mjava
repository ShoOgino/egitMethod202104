	/**
	 * @param actMonitor
	 *            may be <code>null</code> if progress monitoring is not desired
	 * @throws InvocationTargetException
	 *             not really used: failure is communicated via the result (see
	 *             {@link #getOperationResult()})
	 */
	public void run(IProgressMonitor actMonitor)
			throws InvocationTargetException {

		if (operationResult != null)
			throw new IllegalStateException(CoreText.OperationAlreadyExecuted);

		if (this.specification != null)
			for (URIish uri : this.specification.getURIs()) {
				for (RemoteRefUpdate update : this.specification
						.getRefUpdates(uri))
					if (update.getStatus() != Status.NOT_ATTEMPTED)
						throw new IllegalStateException(
								CoreText.RemoteRefUpdateCantBeReused);
			}

		final int totalWork;
		if (specification != null)
			totalWork = specification.getURIsNumber()
					* WORK_UNITS_PER_TRANSPORT;
		else
			totalWork = 1;

		String taskName = dryRun ? CoreText.PushOperation_taskNameDryRun
				: CoreText.PushOperation_taskNameNormalRun;
		SubMonitor progress = SubMonitor.convert(actMonitor, taskName,
				totalWork);

		operationResult = new PushOperationResult();
		try (Git git = new Git(localDb)) {
			if (specification != null)
				for (final URIish uri : specification.getURIs()) {
					if (progress.isCanceled()) {
						operationResult.addOperationResult(uri,
								CoreText.PushOperation_resultCancelled);
						continue;
					}

					Collection<RemoteRefUpdate> refUpdates = specification
							.getRefUpdates(uri);
					final EclipseGitProgressTransformer gitSubMonitor = new EclipseGitProgressTransformer(
							progress.newChild(WORK_UNITS_PER_TRANSPORT / 2));

					try (Transport transport = Transport.open(localDb, uri)) {
						transport.setDryRun(dryRun);
						transport.setTimeout(timeout);
						if (credentialsProvider != null) {
							transport.setCredentialsProvider(
									credentialsProvider);
						}
						PushResult result = transport.push(gitSubMonitor,
								refUpdates, out);

						operationResult.addOperationResult(result.getURI(),
								result);
						specification.addURIRefUpdates(result.getURI(),
								result.getRemoteUpdates());
					} catch (JGitInternalException e) {
						String errorMessage = e.getCause() != null
								? e.getCause().getMessage() : e.getMessage();
						String userMessage = NLS.bind(
								CoreText.PushOperation_InternalExceptionOccurredMessage,
								errorMessage);
						handleException(uri, e, userMessage);
					} catch (Exception e) {
						handleException(uri, e, e.getMessage());
					}

					progress.worked(WORK_UNITS_PER_TRANSPORT / 2);
				}
			else {
				final EclipseGitProgressTransformer gitMonitor = new EclipseGitProgressTransformer(
						progress.newChild(totalWork));
				try {
					Iterable<PushResult> results = git.push()
							.setRemote(remoteName).setDryRun(dryRun)
							.setTimeout(timeout).setProgressMonitor(gitMonitor)
							.setCredentialsProvider(credentialsProvider)
							.setOutputStream(out).call();
					for (PushResult result : results) {
						operationResult.addOperationResult(result.getURI(),
								result);
					}
				} catch (JGitInternalException e) {
					String errorMessage = e.getCause() != null
							? e.getCause().getMessage() : e.getMessage();
					String userMessage = NLS.bind(
							CoreText.PushOperation_InternalExceptionOccurredMessage,
							errorMessage);
					URIish uri = getPushURIForErrorHandling();
					handleException(uri, e, userMessage);
				} catch (Exception e) {
					URIish uri = getPushURIForErrorHandling();
					handleException(uri, e, e.getMessage());
				}
			}
		}
	}

