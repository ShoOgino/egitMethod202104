	/**
	 * @param monitor
	 *            the monitor to be used for reporting progress and responding
	 *            to cancellation. The monitor is never <code>null</code>
	 * @throws InvocationTargetException
	 * @throws InterruptedException
	 */
	public void run(final IProgressMonitor monitor)
			throws InvocationTargetException, InterruptedException {
		SubMonitor progress = SubMonitor.convert(monitor,
				NLS.bind(CoreText.CloneOperation_title, uri),
				postCloneTasks.isEmpty() ? 10 : 11);

		EclipseGitProgressTransformer gitMonitor = new EclipseGitProgressTransformer(
				progress.newChild(10));
		Repository repository = null;
		try {
			CloneCommand cloneRepository = Git.cloneRepository();
			cloneRepository.setCredentialsProvider(credentialsProvider);
			if (refName != null) {
				cloneRepository.setBranch(refName);
			} else {
				cloneRepository.setNoCheckout(true);
			}
			cloneRepository.setDirectory(workdir);
			cloneRepository.setProgressMonitor(gitMonitor);
			cloneRepository.setRemote(remoteName);
			cloneRepository.setURI(uri.toString());
			cloneRepository.setTimeout(timeout);
			cloneRepository.setCloneAllBranches(allSelected);
			cloneRepository.setCloneSubmodules(cloneSubmodules);
			if (selectedBranches != null) {
				List<String> branches = new ArrayList<String>();
				for (Ref branch : selectedBranches) {
					branches.add(branch.getName());
				}
				cloneRepository.setBranchesToClone(branches);
			}
			Git git = cloneRepository.call();
			repository = git.getRepository();
			if (!postCloneTasks.isEmpty()) {
				progress.setWorkRemaining(postCloneTasks.size());
				progress.subTask(CoreText.CloneOperation_configuring);
				for (PostCloneTask task : postCloneTasks) {
					task.execute(repository, progress.newChild(1));
				}
			}
		} catch (final Exception e) {
			try {
				if (repository != null) {
					repository.close();
				}
				FileUtils.delete(workdir, FileUtils.RECURSIVE);
			} catch (IOException ioe) {
				throw new InvocationTargetException(e, NLS.bind(
						CoreText.CloneOperation_failed_cleanup,
						ioe.getLocalizedMessage()));
			}
			if (monitor.isCanceled()) {
				throw new InterruptedException();
			} else {
				throw new InvocationTargetException(e);
			}
		} finally {
			if (repository != null) {
				repository.close();
			}
		}
	}

