	private void reset(IProgressMonitor monitor) throws CoreException {
		monitor.beginTask(NLS.bind(CoreText.ResetOperation_performingReset,
				type.toString().toLowerCase(), refName), 2);

		IProject[] validProjects = null;
		if (type == ResetType.HARD)
			validProjects = ProjectUtil.getValidOpenProjects(repository);

		ResetCommand reset = Git.wrap(repository).reset();
		reset.setMode(type);
		reset.setRef(refName);
		try {
			reset.call();
		} catch (IOException e) {
			throw new TeamException(e.getLocalizedMessage(), e.getCause());
		}
		monitor.worked(1);

		// only refresh if working tree changes
		if (type == ResetType.HARD)
			ProjectUtil.refreshValidProjects(validProjects,
					new SubProgressMonitor(monitor, 1));

		monitor.done();
	}

