	private void reset(IProgressMonitor monitor) throws CoreException {
		SubMonitor progress = SubMonitor.convert(monitor,
				NLS.bind(CoreText.ResetOperation_performingReset,
						type.toString().toLowerCase(), refName),
				type == ResetType.HARD ? 2 : 1);

		IProject[] validProjects = null;
		if (type == ResetType.HARD) {
			validProjects = ProjectUtil.getValidOpenProjects(repository);
			ResourceUtil.saveLocalHistory(repository);
		}

		ResetCommand reset = Git.wrap(repository).reset();
		reset.setMode(type);
		reset.setRef(refName);
		try {
			reset.call();
		} catch (GitAPIException e) {
			throw new TeamException(e.getLocalizedMessage(), e.getCause());
		}
		progress.worked(1);

		// only refresh if working tree changes
		if (type == ResetType.HARD) {
			ProjectUtil.refreshValidProjects(validProjects,
					progress.newChild(1));
		}
	}

