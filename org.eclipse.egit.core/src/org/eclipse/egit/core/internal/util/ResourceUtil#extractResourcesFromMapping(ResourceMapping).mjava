	/**
	 * Returns the {@link IResource}s contained in the {@link ResourceMapping}.
	 *
	 * @param mapping
	 *            the resource mapping from which we extract the resources
	 *
	 * @return the possibly empty list of all contained {@link IResource}s.
	 */
	public static List<IResource> extractResourcesFromMapping(
			@Nullable ResourceMapping mapping) {
		if (mapping == null) {
			return Collections.emptyList();
		}

		ResourceTraversal[] traversals;
		try {
			traversals = mapping.getTraversals(null, null);
		} catch (CoreException e) {
			Activator.logError(e.getMessage(), e);
			return Collections.emptyList();
		}
		if (traversals.length == 0) {
			return Collections.emptyList();
		}

		List<IResource> result = new ArrayList<>();
		for (ResourceTraversal traversal : traversals) {
			IResource[] resources = traversal.getResources();
			result.addAll(Arrays.asList(resources));
		}
		return result;
	}

