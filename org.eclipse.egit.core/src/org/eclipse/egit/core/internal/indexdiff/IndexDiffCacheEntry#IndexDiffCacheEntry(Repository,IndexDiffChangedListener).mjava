	/**
	 * @param repository
	 * @param listener
	 *            can be null
	 */
	public IndexDiffCacheEntry(Repository repository,
			@Nullable IndexDiffChangedListener listener) {
		this.repositoryGitDir = repository.getDirectory();
		this.repositoryName = Activator.getDefault().getRepositoryUtil()
				.getRepositoryName(repository);
		if (listener != null) {
			addIndexDiffChangedListener(listener);
		}

		listenerHandles.add(repository.getListenerList()
				.addIndexChangedListener(indexChangedListener));
		listenerHandles.add(repository.getListenerList()
				.addRefsChangedListener(refsChangedListener));
		// Add a listener also to all submodules in order to be notified when
		// a branch switch or so occurs in a submodule.
		try {
			UnitOfWork.run(repository, () -> {
				try (SubmoduleWalk walk = SubmoduleWalk.forIndex(repository)) {
					while (walk.next()) {
						Repository submodule = walk.getRepository();
						if (submodule != null && !submodule.isBare()) {
							Repository cached = org.eclipse.egit.core.Activator
									.getDefault().getRepositoryCache()
									.lookupRepository(submodule.getDirectory()
											.getAbsoluteFile());
							submodules.put(cached, walk.getPath());
							IndexDiffCacheEntry submoduleCache = org.eclipse.egit.core.Activator
									.getDefault().getIndexDiffCache()
									.getIndexDiffCacheEntry(cached);
							if (submoduleCache != null) {
								submoduleCache.addIndexDiffChangedListener(
										submoduleListener);
							}
							submodule.close();
						}
					}
				}
			});
		} catch (IOException ex) {
			Activator.logError(MessageFormat.format(
					CoreText.IndexDiffCacheEntry_errorCalculatingIndexDelta,
					repository), ex);
		}
		scheduleReloadJob("IndexDiffCacheEntry construction"); //$NON-NLS-1$
		createResourceChangeListener();
		if (!repository.isBare()) {
			try {
				lastIndex = DirCache.read(repository.getIndexFile(),
						repository.getFS());
			} catch (IOException ex) {
				Activator.logError(MessageFormat.format(
						CoreText.IndexDiffCacheEntry_errorCalculatingIndexDelta,
						repository), ex);
			}
		}
	}

