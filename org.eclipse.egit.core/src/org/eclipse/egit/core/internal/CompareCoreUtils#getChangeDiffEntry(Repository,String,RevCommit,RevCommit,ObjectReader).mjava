	/**
	 * Get the {@link DiffEntry} corresponding to a change in file path. If the
	 * file was renamed, the resulting {@link DiffEntry} will contain the old
	 * path and blob ID. If the file was only added, null will be returned.
	 *
	 * @param repository
	 * @param newPath
	 *            path of the file in new commit
	 * @param newCommit
	 *            new commit
	 * @param oldCommit
	 *            old commit, e.g. parent commit of newCommit
	 * @param objectReader
	 *            reader for the repository
	 * @return the diff entry corresponding to the change for path, or null if
	 *         none could be found
	 * @throws IOException
	 */
	public static DiffEntry getChangeDiffEntry(Repository repository, String newPath,
			RevCommit newCommit, RevCommit oldCommit, ObjectReader objectReader)
			throws IOException {
		try (TreeWalk walk = new TreeWalk(objectReader)) {
			walk.setRecursive(true);
			walk.addTree(oldCommit.getTree());
			walk.addTree(newCommit.getTree());

			List<DiffEntry> entries = DiffEntry.scan(walk);

			for (DiffEntry diff : entries) {
				if (diff.getChangeType() == ChangeType.MODIFY
						&& newPath.equals(diff.getNewPath()))
					return diff;
			}

			if (entries.size() < 2)
				return null;

			RenameDetector detector = new RenameDetector(repository);
			detector.addAll(entries);
			List<DiffEntry> renames = detector.compute(walk.getObjectReader(),
					NullProgressMonitor.INSTANCE);
			for (DiffEntry diff : renames) {
				if (diff.getChangeType() == ChangeType.RENAME
						&& newPath.equals(diff.getNewPath()))
					return diff;
			}

			return null;
		}
	}

