	/**
	 * Lookup the closest git repository with a working tree containing the
	 * given file location. If there are repositories nested above in the file
	 * system hierarchy we select the closest one above the given location.
	 *
	 * @param location
	 *            the file location to find the repository for
	 * @return the git repository which has the given location in its working
	 *         tree, or null if none found
	 * @since 3.2
	 */
	public Repository getRepository(final IPath location) {
		Repository[] repositories = org.eclipse.egit.core.Activator
				.getDefault().getRepositoryCache().getAllRepositories();
		Repository repository = null;
		int largestSegmentCount = 0;
		for (Repository r : repositories) {
			if (!r.isBare()) {
				try {
					IPath repoPath = new Path(r.getWorkTree()
							.getCanonicalPath());
					if (location != null && repoPath.isPrefixOf(location)) {
						if (repository == null
								|| repoPath.segmentCount() > largestSegmentCount) {
							repository = r;
							largestSegmentCount = repoPath.segmentCount();
						}
					}
				} catch (IOException e) {
					Activator
							.error("looking up working tree path of git repository failed", e); //$NON-NLS-1$
				}
			}
		}
		return repository;
	}

