	/**
	 * @param progress
	 * @return members
	 * @throws IOException
	 */
	public IResourceVariant[] getMembers(IProgressMonitor progress)
			throws IOException {
		if (members != null)
			try {
				return members;
			} finally {
				progress.done();
			}

		Repository repo = getRepository();
		TreeWalk tw = new TreeWalk(repo);
		tw.reset();

		int nth = tw.addTree(getObjectId());
		int iteratorNth = tw.addTree(new FileTreeIterator(repo));

		tw.setFilter(new NotIgnoredFilter(iteratorNth));

		IProgressMonitor monitor = SubMonitor.convert(progress);
		monitor.beginTask(
				NLS.bind(CoreText.GitFolderResourceVariant_fetchingMembers, this),
				tw.getTreeCount());

		int i = 0;
		List<IResourceVariant> result = new ArrayList<IResourceVariant>();
		try {
			while (tw.next()) {
				if (monitor.isCanceled())
					throw new OperationCanceledException();

				ObjectId newObjectId = tw.getObjectId(nth);
				String path = getPath() + "/" + new String(tw.getRawPath()); //$NON-NLS-1$
				if (!newObjectId.equals(zeroId()))
					if (tw.isSubtree())
						result.add(new GitFolderResourceVariant(repo,
								getRevCommit(), newObjectId, path));
					else
						result.add(new GitBlobResourceVariant(repo,
								getRevCommit(), newObjectId, path));
				if (i % 10 == 0)
					monitor.worked(10);

				i++;
			}

			members = result.toArray(new IResourceVariant[result.size()]);
			return members;
		} finally {
			monitor.done();
		}
	}

