	/**
	 * @param repo
	 *            with should be scanned
	 * @return list of changes in working tree
	 */
	public static Map<String, Change> build(Repository repo) {
		TreeWalk tw = new TreeWalk(repo);
		try {
			tw.addTree(new FileTreeIterator(repo));
			tw.addTree(new DirCacheIterator(repo.readDirCache()));
			tw.setFilter(AndTreeFilter.create(new NotIgnoredFilter(0), ANY_DIFF));
			tw.setRecursive(true);

			Map<String, Change> result = new HashMap<String, Change>();
			MutableObjectId idBuf = new MutableObjectId();
			while (tw.next()) {
				Change change = new Change();
				change.name = tw.getNameString();
				tw.getObjectId(idBuf, 0);
				change.objectId = AbbreviatedObjectId.fromObjectId(idBuf);
				tw.getObjectId(idBuf, 1);
				change.remoteObjectId = AbbreviatedObjectId.fromObjectId(idBuf);
				calculateAndSetChangeKind(RIGHT, change);

				result.put(tw.getPathString(), change);
			}
			tw.release();

			return result;
		} catch (IOException e) {
			Activator.error(e.getMessage(), e);
			return new HashMap<String, GitCommitsModelCache.Change>(0);
		}
	}

