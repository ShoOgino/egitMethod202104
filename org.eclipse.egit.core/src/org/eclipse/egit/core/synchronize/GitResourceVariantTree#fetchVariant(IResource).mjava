	private IResourceVariant fetchVariant(IResource resource) {
		if (gitCache == null)
			return null;

		IResourceVariant cachedVariant = cache.get(resource);
		if (cachedVariant != null)
			return cachedVariant;

		GitSynchronizeData gsd = gsds.getData(resource.getProject());
		if (gsd == null)
			return null;

		Repository repo = gsd.getRepository();
		String path = getPath(resource, repo);

		GitSyncObjectCache syncCache = gitCache.get(repo);
		GitSyncObjectCache cachedData = syncCache.get(path);
		if (cachedData == null)
			return null;

		IResourceVariant variant = null;
		ObjectId objectId = getObjectId(cachedData.getDiffEntry());
		if (!objectId.equals(zeroId())) {
			if (resource.getType() == IResource.FILE) {
				variant = new GitRemoteFile(repo, getCommitId(gsd), objectId,
						path, cachedData.getDiffEntry().getMetadata());
			} else {
				variant = new GitRemoteFolder(repo, cachedData,
						getCommitId(gsd), objectId, path);
			}
			cache.put(resource, variant);
		}

		return variant;
	}

