	/**
	 * @param subscriber
	 * @param manager
	 * @param gsds
	 */
	public GitSubscriberMergeContext(final GitResourceVariantTreeSubscriber subscriber,
			ISynchronizationScopeManager manager, GitSynchronizeDataSet gsds) {
		super(subscriber, manager);
		this.gsds = gsds;


		repoChangeListener = new RepositoryChangeListener() {
			public void repositoryChanged(RepositoryMapping which) {
				update(subscriber, which);
			}
		};
		resourceChangeListener = new IResourceChangeListener() {

			public void resourceChanged(IResourceChangeEvent event) {
				if (event.getDelta() == null)
					return;

				for (IResourceDelta delta : event.getDelta().getAffectedChildren()) {
					RepositoryMapping repo = RepositoryMapping.getMapping(delta.getResource());
					if (repo != null)
						update(subscriber, repo);
				}
			}
		};
		GitProjectData.addRepositoryChangeListener(repoChangeListener);
		ResourcesPlugin.getWorkspace().addResourceChangeListener(resourceChangeListener);

		initialize();
	}

