	/**
	 * @param subscriber
	 * @param manager
	 * @param gsds
	 */
	public GitSubscriberMergeContext(final GitResourceVariantTreeSubscriber subscriber,
			ISynchronizationScopeManager manager, GitSynchronizeDataSet gsds) {
		super(subscriber, manager);
		this.gsds = gsds;


		repoChangeListener = new RepositoryChangeListener() {
			public void repositoryChanged(RepositoryMapping which) {
				handleRepositoryChange(subscriber, which);
			}
		};
		resourceChangeListener = new IResourceChangeListener() {

			public void resourceChanged(IResourceChangeEvent event) {
				if (event.getDelta() == null)
					return;

				IResourceDelta[] affectedChildren = event.getDelta()
						.getAffectedChildren();
				for (IResourceDelta delta : affectedChildren) {
					if (delta.getFlags() == 0)
						continue;
					IResource resource = delta.getResource();
					RepositoryMapping repo = getMapping(resource);
					if (repo != null)
						handleResourceChange(subscriber, repo);
				}
			}
		};
		GitProjectData.addRepositoryChangeListener(repoChangeListener);
		ResourcesPlugin.getWorkspace().addResourceChangeListener(resourceChangeListener);

		initialize();
	}

