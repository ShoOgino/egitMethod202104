	void merge(GitSyncObjectCache other, Set<String> filterPaths) {
		if (other.members != null) {
			if (members == null)
				members = new HashMap<String, GitSyncObjectCache>();

			for (Entry<String, GitSyncObjectCache> entry : members.entrySet()) {
				String key = entry.getKey();
				if (!other.members.containsKey(key)) {
					GitSyncObjectCache obj = entry.getValue();
					String entryPath = obj.getDiffEntry().getPath();
					if (containsPathOrParent(filterPaths, entryPath))
						obj.getDiffEntry().changeType = ChangeType.IN_SYNC;
				}
			}

			for (Entry<String, GitSyncObjectCache> entry : other.members
					.entrySet()) {
				String key = entry.getKey();
				GitSyncObjectCache obj = entry.getValue();
				if (members.containsKey(key)) {
					members.get(key).merge(obj, filterPaths);
				} else {
					members.put(key, obj);
				}
			}
		} else if (members != null) {
			for (GitSyncObjectCache obj : members.values()) {
				String entryPath = obj.getDiffEntry().getPath();
				if (containsPathOrParent(filterPaths, entryPath))
					obj.getDiffEntry().changeType = ChangeType.IN_SYNC;
			}
		} else {
			// we are on a leaf entry, use the newer diff entry (need to update
			// changeType, direction and other fields)
			diffEntry = other.diffEntry;
		}
	}

