	/**
	 * Configures a {@link HttpURLConnection} according to the value of the
	 * repositories configuration parameter "http.sslVerify". When this value is
	 * false and when the URL is for the "https" protocol then all hostnames are
	 * accepted and certificates are also accepted when they can't be validated
	 *
	 * @param repo
	 *            the repository to be asked for the configuration parameter
	 *            http.sslVerify
	 * @param conn
	 *            the connection to be configured
	 * @throws IOException
	 */
	public static void setSslVerification(Repository repo,
			HttpURLConnection conn) throws IOException {
		if ("https".equals(conn.getURL().getProtocol())) { //$NON-NLS-1$
			HttpsURLConnection httpsConn = (HttpsURLConnection) conn;
			try {
				HttpConfig http = new HttpConfig(repo.getConfig(),
						new URIish(conn.getURL().toString()));
				if (!http.isSslVerify()) {
					SSLContext ctx = SSLContext.getInstance("TLS"); //$NON-NLS-1$
					ctx.init(null, trustAllCerts, null);
					httpsConn.setSSLSocketFactory(ctx.getSocketFactory());
					httpsConn.setHostnameVerifier(trustAllHostNames);
				}
			} catch (KeyManagementException | NoSuchAlgorithmException
					| URISyntaxException e) {
				throw new IOException(e.getMessage(), e);
			}
		}
	}

