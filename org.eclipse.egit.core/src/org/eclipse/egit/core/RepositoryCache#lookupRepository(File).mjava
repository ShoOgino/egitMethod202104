	/**
	 * Looks in the cache for a {@link Repository} matching the given git
	 * directory. If there is no such Repository instance in the cache, one is
	 * created.
	 *
	 * @param gitDir
	 * @return an existing instance of Repository for <code>gitDir</code> or a
	 *         new one if no Repository instance for <code>gitDir</code> exists
	 *         in the cache.
	 * @throws IOException
	 */
	public Repository lookupRepository(final File gitDir) throws IOException {
		// Make sure we have a normalized path without .. segments here.
		File normalizedGitDir = new Path(gitDir.getAbsolutePath()).toFile();
		synchronized (repositoryCache) {
			RepositoryReference r = repositoryCache.get(normalizedGitDir);
			if (r == null) {
				Repository inner = new Builder().setGitDir(normalizedGitDir)
						.readEnvironment().setup().createRepository();
				RepositoryHandle result = new RepositoryHandle(inner);
				repositoryCache.put(normalizedGitDir,
						new RepositoryReference(result, inner, queue));
				return result;
			} else {
				Repository result = r.get();
				if (result != null && result.getDirectory().exists()) {
					return result;
				} else {
					Closer.closeReference(
							repositoryCache.remove(normalizedGitDir));
				}
			}
		}
		// If we get here, we found a stale repository. We must remove
		// a possibly still existing IndexDiffCache outside the synchronized
		// block, otherwise we may run into a deadlock due to lock inversion
		// between our repositoryCache and IndexDiffCache.entries.
		IndexDiffCache cache = IndexDiffCache.getInstance();
		if (cache != null) {
			cache.remove(normalizedGitDir);
		}
		return lookupRepository(gitDir);
	}

