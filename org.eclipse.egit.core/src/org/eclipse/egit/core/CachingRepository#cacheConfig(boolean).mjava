	/**
	 * Sets the git config caching mode. Calls with {@code doCache == true} and
	 * {@code false} must be balanced, but can be nested. The git config is
	 * cached <em>for the calling {@link Thread}</em> and not re-checked for
	 * having been modified on disk after the first call with
	 * {@code doCache == true} until an equal number of calls with
	 * {@code doCache == false} have occurred. A call to
	 * {@link #clearConfigCache()} will clear the caching for the calling
	 * thread.
	 *
	 * @param doCache
	 *            whether to start caching the git config in the calling
	 *            {@link Thread}
	 */
	void cacheConfig(boolean doCache) {
		Map<File, CachedConfig> cache = CACHED_CONFIG.get();
		CachedConfig cfg = cache.get(getDirectory());
		if (cfg == null) {
			if (!doCache) {
				return;
			}
			cfg = new CachedConfig();
			cache.put(getDirectory(), cfg);
		}
		if (!doCache) {
			if (cfg.level > 0) {
				if (--cfg.level == 0) {
					cache.remove(getDirectory());
				}
			} else {
				Activator.logWarning(MessageFormat.format(
						CoreText.CachingRepository_cacheLevelZero,
						getDirectory()), null);
			}
		} else if (doCache) {
			cfg.level++;
		}
	}

