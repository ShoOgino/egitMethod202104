	@Test
	public void testFeatureTrack() throws Exception {
		GitFlowRepository gfRepo1 = new GitFlowRepository(
				repository1.getRepository());
		GitFlowRepository gfRepo2 = new GitFlowRepository(
				repository2.getRepository());
		new FeatureStartOperation(gfRepo1, MY_FEATURE).execute(null);
		RevCommit branchCommit = repository1
				.createInitialCommit("testFeatureTrack");

		FeatureTrackOperation featureTrackOperation = new FeatureTrackOperation(
				gfRepo2, getFirstRemoteFeatureRef(gfRepo2), NO_TIMEOUT);
		featureTrackOperation.execute(null);
		FetchResult operationResult = featureTrackOperation
				.getOperationResult();
		assertNotNull(operationResult.getAdvertisedRef(gfRepo2
				.getConfig().getFullFeatureBranchName(MY_FEATURE)));
		assertEquals(gfRepo2.getConfig().getFeatureBranchName(MY_FEATURE),
				repository2.getRepository().getBranch());
		assertEquals(branchCommit, findHead(repository2.getRepository()));

		RevCommit localCommit = repository2
				.createInitialCommit("testFeatureTrack2");
		new CurrentBranchPublishOperation(gfRepo2, 0).execute(null);
		assertEquals(localCommit, findHead(repository2.getRepository()));

		// config updated?
		assertEquals(DEFAULT_REMOTE_NAME, getRemoteName(gfRepo2, MY_FEATURE));
		assertEquals(R_HEADS + gfRepo2.getConfig().getFeatureBranchName(MY_FEATURE),
				gfRepo2.getUpstreamBranchName(MY_FEATURE));
	}

