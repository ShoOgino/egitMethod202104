	@Test
	public void test() throws Exception {
		Set<IProject> initialProjects = new HashSet<>(Arrays.asList(ResourcesPlugin.getWorkspace().getRoot().getProjects()));
		Set<IProject> newProjects = null;
		Set<String> expectedProjectNames = new HashSet<>();
		expectedProjectNames.add("Project1");
		expectedProjectNames.add("Project2");
		bot.menu("File").menu("Import...").click();
		expandAndWait(bot.tree().getTreeItem("Git"))
				.select("Projects from Git (with smart import)");
		bot.button("Next >").click();
		bot.tree().select("Clone URI");
		bot.button("Next >").click();
		String path = Path
				.fromOSString(repository.getDirectory().getCanonicalPath())
				.toString();
		if (!path.startsWith("/")) {
			// Might be Windows: C:/foo...
			path = '/' + path;
		}
		bot.text().setText("file://" + path);
		bot.button("Next >").click();
		waitForButtonEnabled("Next >", 5);
		bot.button("Next >").click();
		File tmpDir = tmp.newFolder(getClass().getName());
		try {
			bot.text().setText(tmpDir.toString());
			bot.button("Next >").click();
			waitForButtonEnabled("Finish", 5);
			bot.button("Finish").click();

			Job.getJobManager().join(SmartImportJob.class,
					new NullProgressMonitor());

			newProjects = new HashSet<>(Arrays.asList(ResourcesPlugin.getWorkspace().getRoot().getProjects()));
			newProjects.removeAll(initialProjects);
			assertTrue("There should be more than one project imported",
					newProjects.size() > 1);

			for (IProject project : newProjects) {
				assertTrue("Project " + project.getName() + " not found",
						project.exists());
				expectedProjectNames.remove(project.getName());
			}
			assertEquals("Some projects not imported", "[]",
					expectedProjectNames.toString());
		} finally {
			// clean up
			if (newProjects != null) {
				for (IProject p : newProjects) {
					p.delete(true, new NullProgressMonitor());
				}
			}
		}
	}

