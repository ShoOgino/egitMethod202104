	@Test
	public void testDecorationConflictingOverDirty() throws Exception {
		// Create new file and commit
		IFile file = createFile(project1, TEST_FILE, "Something");
		IFile file2 = createFile(project1, TEST_FILE2, "Another Something");
		gitAdd(git, file);
		gitAdd(git, file2);
		RevCommit masterCommit = gitCommit(git);

		// Create and checkout new branch, change file content, add and commit
		// file
		git.checkout().setCreateBranch(true).setName("first_topic").call();
		file = findFile(project1, TEST_FILE);
		write(file.getLocation().toFile(), "First Topic Content");
		project1.refreshLocal(IResource.DEPTH_INFINITE, null);
		gitAdd(git, file);
		RevCommit firstTopicCommit = gitCommit(git);

		// Create and checkout new branch (from master), change file content,
		// add and commit file
		git.checkout().setCreateBranch(true).setStartPoint(masterCommit)
				.setName("second_topic").call();
		file = findFile(project1, TEST_FILE);
		write(file.getLocation().toFile(), "Second Topic Content");
		project1.refreshLocal(IResource.DEPTH_INFINITE, null);
		gitAdd(git, file);
		gitCommit(git);

		// modify file2 to make it dirty
		write(file2.getLocation().toFile(), "Changed content");

		// merge second_topic with first_topic
		MergeResult mergeResult = git.merge().include(firstTopicCommit).call();
		assertEquals(MergeStatus.CONFLICTING, mergeResult.getMergeStatus());

		IDecoratableResource[] expectedDRs = new IDecoratableResource[] {
				newExpectedDecoratableResource(project1).tracked().dirty()
						.conflicts(),
				newExpectedDecoratableResource(file).tracked().conflicts(),
				newExpectedDecoratableResource(file2).tracked().dirty(),
				newExpectedDecoratableWorkingSet(WORKING_SET).tracked().dirty()
						.conflicts() };
		IndexDiffData indexDiffData = waitForIndexDiff(true);
		IDecoratableResource[] actualDRs = {
				newDecoratableResource(indexDiffData, project1),
				newDecoratableResource(indexDiffData, file),
				newDecoratableResource(indexDiffData, file2),
				newDecoratableWorkingSet(resourceMapping) };

		assertArrayEquals(expectedDRs, actualDRs);
		assertHasUnstagedChanges(true, actualDRs);
		assertDecorationConflicts(resourceMapping);
	}

