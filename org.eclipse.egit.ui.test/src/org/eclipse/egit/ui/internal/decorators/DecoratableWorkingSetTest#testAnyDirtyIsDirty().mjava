	@Test
	public void testAnyDirtyIsDirty() throws Exception {
		// Create new file and commit
		IFile file = createFile(project1, TEST_FILE, "Something");
		gitAdd(git, file);
		gitCommit(git);

		// change file content to make it dirty
		write(file.getLocation().toFile(), "Change");

		IDecoratableResource[] expectedDRs = new IDecoratableResource[] {
				newExpectedDecoratableResource(project1).tracked().dirty(),
				newExpectedDecoratableResource(file).tracked().dirty(),
				newExpectedDecoratableWorkingSet(WORKING_SET).tracked()
						.dirty() };

		waitForIndexDiff(true);
		IndexDiffData indexDiffData = indexDiffCacheEntry.getIndexDiff();
		IDecoratableResource[] actualDRs = {
				newDecoratableResource(indexDiffData, project1),
				newDecoratableResource(indexDiffData, file),
				newDecoratableWorkingSet(resourceMapping) };

		assertArrayEquals(expectedDRs, actualDRs);
		assertHasUnstagedChanges(true, actualDRs);
		assertDecorationDirty(resourceMapping);
	}

