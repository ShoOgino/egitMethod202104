	@Test
	public void testNoActionOnLinkedResources() throws Exception {
		List<RepositoryActionHandler> handlers = getRepositoryActionHandlerList();
		// Create a file outside any project or repository
		File standaloneFile = new File(standaloneDirectory, LINKED_FILE);
		write(standaloneFile, "Something");
		// Create linked file in project that points the file above
		IFile linkedFile = project.getFile(LINKED_FILE);
		assertFalse(linkedFile.exists());
		linkedFile.createLink(standaloneFile.toURI(),
				IResource.ALLOW_MISSING_LOCAL, null);

		// Prepare a mixed selection
		Object[] mixedSelection = { linkedFile,
				project.getFile(FILE1), project.getFile(FILE2) };
		for (RepositoryActionHandler handler : handlers) {
			String handlerClass = handler.getClass().getSimpleName();

			assertTrue(linkedFile.exists());
			assertTrue(linkedFile.isLinked(IResource.CHECK_ANCESTORS));
			IPath location = linkedFile.getLocation();
			assertNotNull(location);
			assertNotNull(
					RepositoryMapping.getMapping(linkedFile.getProject()));
			assertNull(RepositoryMapping.getMapping(linkedFile));
			assertNull(RepositoryMapping.getMapping(location));
			assertFalse(handler.isEnabled());
			Repository[] repositories = handler.getRepositories();
			assertEquals(handlerClass
					+ " found (unexpected) repository mapping for " + location,
					"[]", Arrays.toString(repositories));

			handler.setSelection(new StructuredSelection(linkedFile));
			assertEquals(handlerClass
					+ " found (unexpected) repository mapping for " + location,
					"[]", Arrays.toString(repositories));

			assertFalse(handlerClass
					+ " is enabled on a linked resource pointing outside any project and repository: "
					+ location, handler.isEnabled());

			handler.setSelection(new StructuredSelection(mixedSelection));
			assertFalse(handler.getClass().getSimpleName()
					+ " is enabled when selection contains a linked resource pointing outside any project and repository: "
					+ location, handler.isEnabled());
		}
	}

