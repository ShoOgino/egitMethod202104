	@BeforeClass
	public static void beforeClassBase() throws Exception {
		// suppress auto-ignoring and auto-sharing to avoid interference
		IEclipsePreferences corePrefs = InstanceScope.INSTANCE
				.getNode(org.eclipse.egit.core.Activator.getPluginId());
		corePrefs.putBoolean(
				GitCorePreferences.core_autoIgnoreDerivedResources, false);
		corePrefs.putBoolean(GitCorePreferences.core_autoShareProjects, false);
		// suppress the configuration dialog
		org.eclipse.egit.ui.Activator.getDefault().getPreferenceStore()
				.setValue(UIPreferences.SHOW_INITIAL_CONFIG_DIALOG, false);
		// suppress the detached head warning dialog
		org.eclipse.egit.ui.Activator
				.getDefault()
				.getPreferenceStore()
				.setValue(UIPreferences.SHOW_DETACHED_HEAD_WARNING,
						false);
		closeGitViews();
		MockSystemReader reader = new MockSystemReader();
		// Explicitly define an empty environment
		reader.setProperty(Constants.GIT_AUTHOR_NAME_KEY, null);
		reader.setProperty(Constants.GIT_AUTHOR_EMAIL_KEY, null);
		reader.setProperty(Constants.GIT_COMMITTER_NAME_KEY, null);
		reader.setProperty(Constants.GIT_COMMITTER_EMAIL_KEY, null);
		reader.setProperty(Constants.GIT_CONFIG_NOSYSTEM_KEY, null);
		reader.setProperty(Constants.GIT_CEILING_DIRECTORIES_KEY, null);
		reader.setProperty(Constants.GIT_DIR_KEY, null);
		reader.setProperty(Constants.GIT_WORK_TREE_KEY, null);
		reader.setProperty(Constants.GIT_INDEX_FILE_KEY, null);
		reader.setProperty(Constants.GIT_OBJECT_DIRECTORY_KEY, null);
		reader.setProperty(Constants.GIT_ALTERNATE_OBJECT_DIRECTORIES_KEY,
				null);
		SystemReader.setInstance(reader);
	}

