	/**
	 * Locates the current part and selection and fires
	 * {@link ISelectionListener#selectionChanged(IWorkbenchPart, ISelection)}
	 * on the passed listener.
	 *
	 * @param serviceLocator
	 * @param selectionListener
	 */
	public static void notifySelectionChangedWithCurrentSelection(
			ISelectionListener selectionListener, IServiceLocator serviceLocator) {
		IHandlerService handlerService = CommonUtils.getService(serviceLocator, IHandlerService.class);
		IEvaluationContext state = handlerService.getCurrentState();
		// This seems to be the most reliable way to get the active part, it
		// also returns a part when it is called while creating a view that is
		// being shown.Getting the active part through the active workbench
		// window returned null in that case.
		Object partObject = state.getVariable(ISources.ACTIVE_PART_NAME);
		if (!(partObject instanceof IWorkbenchPart)) {
			partObject = state.getVariable(ISources.ACTIVE_EDITOR_NAME);
		}
		Object selectionObject = state
				.getVariable(ISources.ACTIVE_CURRENT_SELECTION_NAME);
		if (partObject instanceof IWorkbenchPart) {
			IWorkbenchPart part = (IWorkbenchPart) partObject;
			ISelection selection = selectionObject instanceof ISelection
					? (ISelection) selectionObject
					: StructuredSelection.EMPTY;
			selectionListener.selectionChanged(part, selection);
		}
	}

