	/**
	 * Launches Git Model synchronization action
	 *
	 * @param gsdSet
	 * @param resources
	 */
	public static final void launch(final GitSynchronizeDataSet gsdSet,
			IResource[] resources) {
		Job fetchJob = new SynchronizeFetchJob(gsdSet);
		fetchJob.setUser(true);
		fetchJob.schedule();

		ResourceMapping[] mappings = getSelectedResourceMappings(resources);

		GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(
				gsdSet);
		RemoteResourceMappingContext remoteContext = new GitSubscriberResourceMappingContext(
				gsdSet);
		SubscriberScopeManager manager = new SubscriberScopeManager(
				subscriber.getName(), mappings, subscriber, remoteContext, true);
		GitSubscriberMergeContext context = new GitSubscriberMergeContext(
				subscriber, manager, gsdSet);
		GitModelSynchronizeParticipant participant = new GitModelSynchronizeParticipant(
				context);

		TeamUI.getSynchronizeManager().addSynchronizeParticipants(
				new ISynchronizeParticipant[] { participant });
		IWorkbenchWindow window = PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow();
		IWorkbenchPart activePart = null;
		if (window != null)
			activePart = window.getActivePage().getActivePart();

		try {
			fetchJob.join();
		} catch (InterruptedException e) {
			Activator.logError("Fetch operation interupted", e); //$NON-NLS-1$
		}
		participant.run(activePart);
	}

