	/**
	 * Launches Git Model synchronization action
	 *
	 * @param gsdSet
	 * @param resources
	 */
	public static final void launch(final GitSynchronizeDataSet gsdSet,
			IResource[] resources) {
		ResourceMapping[] mappings = getSelectedResourceMappings(resources);

		GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(
				gsdSet);
		RemoteResourceMappingContext remoteContext = new GitSubscriberResourceMappingContext(
				gsdSet);
		SubscriberScopeManager manager = new SubscriberScopeManager(
				subscriber.getName(), mappings, subscriber, remoteContext, true);
		GitSubscriberMergeContext context = new GitSubscriberMergeContext(
				subscriber, manager, gsdSet);
		final GitModelSynchronizeParticipant participant = new GitModelSynchronizeParticipant(
				context);

		TeamUI.getSynchronizeManager().addSynchronizeParticipants(
				new ISynchronizeParticipant[] { participant });
		final IWorkbenchWindow window = PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow();

		boolean launchFetch = Activator.getDefault().getPreferenceStore()
				.getBoolean(UIPreferences.SYNC_VIEW_FETCH_BEFORE_LAUNCH);
		Job fetchJob = null;
		if (launchFetch) {
			fetchJob = new SynchronizeFetchJob(gsdSet);
			fetchJob.setUser(true);

			fetchJob.addJobChangeListener(new JobChangeAdapter() {
				@Override
				public void done(IJobChangeEvent event) {
					IWorkbenchPart activePart = window.getActivePage().getActivePart();
					participant.run(activePart);
				}
			});

			fetchJob.schedule();
		}
	}

