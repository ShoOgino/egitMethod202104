	@Override
	protected InputStream createStream() throws CoreException {
		if (exists) {
			try {
				File file = path.toFile();
				timestamp = file.lastModified();
				if (isSymlink) {
					String symLink = FileUtils.readSymLink(file);
					return new ByteArrayInputStream(Constants.encode(symLink));
				}
				if (file.isDirectory()) {
					// submodule
					IPath subPath = ResourceUtil.getRepositoryRelativePath(path,
							repository);
					if (subPath == null || subPath.isEmpty()) {
						return null;
					}
					return UnitOfWork.run(repository, () -> {
						try (SubmoduleWalk walk = new SubmoduleWalk(
								repository)) {
							FileTreeIterator iterator = new FileTreeIterator(
									repository);
							walk.setTree(iterator);
							walk.setFilter(PathFilterGroup
									.createFromStrings(subPath.toString()));
							walk.setRootTree(iterator);
							walk.setBuilderFactory(() -> RepositoryCache
									.getInstance().getBuilder(true, true));
							if (walk.next()) {
								try (Repository sub = walk.getRepository()) {
									RevCommit headCommit = RepositoryUtil
											.getInstance().parseHeadCommit(sub);
									if (headCommit == null) {
										return null;
									}
									return new ByteArrayInputStream(Constants
											.encode(headCommit.name()));
								}
							}
						}
						return null;
					});
				}
				return Files.newInputStream(file.toPath());
			} catch (IOException | UnsupportedOperationException e) {
				Activator.error(e.getMessage(), e);
			}
		}
		return null;
	}

