	@Override
	protected void synchronize(IResource[] resources, Repository repository,
			String leftRev, String rightRev, boolean includeLocal)
			throws IOException {
		if (rightRev.equals(GitFileRevision.INDEX)) {
			openGitTreeCompare(resources, leftRev,
					CompareTreeView.INDEX_VERSION, includeLocal);
		} else {
			final Set<IResource> includedResources = new HashSet<>(
					Arrays.asList(resources));
			final Set<ResourceMapping> allMappings = new HashSet<>();

			Set<IResource> newResources = new HashSet<>(includedResources);
			do {
				final Set<IResource> copy = newResources;
				newResources = new HashSet<>();
				for (IResource resource : copy) {
					Assert.isNotNull(resource);
					ResourceMapping[] mappings = ResourceUtil
							.getResourceMappings(resource, context);
					allMappings.addAll(Arrays.asList(mappings));
					newResources.addAll(collectResources(mappings));
				}
			} while (includedResources.addAll(newResources));

			if (GitFileRevision.INDEX.equals(leftRev)) {
				// Even git tree compare cannot handle index as
				// source...
				// Synchronize using the local data for now.
				final ResourceMapping[] mappings = allMappings
						.toArray(new ResourceMapping[allMappings.size()]);
				final GitSynchronizeData data = new GitSynchronizeData(
						repository, leftRev, rightRev, true, includedResources);
				GitModelSynchronize.launch(new GitSynchronizeDataSet(data),
						mappings);
			} else {
				final ResourceMapping[] mappings = allMappings
						.toArray(new ResourceMapping[allMappings.size()]);
				final GitSynchronizeData data = new GitSynchronizeData(
						repository, leftRev, rightRev, includeLocal,
						includedResources);
				GitModelSynchronize.launch(new GitSynchronizeDataSet(data),
						mappings);
			}
		}
	}

