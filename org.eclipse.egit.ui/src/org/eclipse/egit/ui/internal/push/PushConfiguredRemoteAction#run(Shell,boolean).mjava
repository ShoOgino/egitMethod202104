	/**
	 * Runs this action
	 * <p>
	 *
	 * @param shell
	 *            a shell may be null; if provided, a pop up will be displayed
	 *            indicating the fetch result
	 * @param dryRun
	 *
	 */
	public void run(final Shell shell, boolean dryRun) {
		RemoteConfig config;
		Exception pushException = null;
		final PushOperation op;
		try {
			config = new RemoteConfig(repository.getConfig(), remoteName);
			// config.getPushURIs returns a unmodifiable list
			List<URIish> pushURIs = new ArrayList<URIish>();
			pushURIs.addAll(config.getPushURIs());
			if (pushURIs.isEmpty() && !config.getURIs().isEmpty())
				pushURIs.add(config.getURIs().get(0));
			if (pushURIs.isEmpty()) {
				throw new IOException(NLS.bind(
						UIText.PushConfiguredRemoteAction_NoUrisMessage,
						remoteName));
			}
			final Collection<RefSpec> pushSpecs = config.getPushRefSpecs();
			if (pushSpecs.isEmpty()) {
				throw new IOException(NLS.bind(
						UIText.PushConfiguredRemoteAction_NoSpecDefined,
						remoteName));
			}
			int timeout = Activator.getDefault().getPreferenceStore().getInt(
					UIPreferences.REMOTE_CONNECTION_TIMEOUT);
			op = new PushOperation(repository, config, dryRun, timeout);
		} catch (URISyntaxException e) {
			pushException = e;
			return;
		} catch (IOException e) {
			pushException = e;
			return;
		} finally {
			if (pushException != null)
				Activator.handleError(pushException.getMessage(),
						pushException, shell != null);
		}

		final Job job = new Job(
				"Push to " + repository.getDirectory().getParentFile().getName() + " - " + remoteName) { //$NON-NLS-1$ //$NON-NLS-2$

			@Override
			protected IStatus run(IProgressMonitor monitor) {
				try {
					op.run(monitor);
					final PushOperationResult res = op.getOperationResult();
					if (shell != null) {
						PlatformUI.getWorkbench().getDisplay().asyncExec(
								new Runnable() {
									public void run() {
										final Dialog dialog = new PushResultDialog(
												shell, repository, res,
												repository.getDirectory()
														.getParentFile()
														.getName()
														+ " - " + remoteName); //$NON-NLS-1$
										dialog.open();
									}
								});
					}
					return Status.OK_STATUS;
				} catch (InvocationTargetException e) {
					return new Status(IStatus.ERROR, Activator.getPluginId(), e
							.getCause().getMessage(), e);
				}
			}

			@Override
			public boolean belongsTo(Object family) {
				if (family.equals(JobFamilies.PUSH))
					return true;
				return super.belongsTo(family);
			}



		};

		job.setUser(true);
		job.schedule();
	}

