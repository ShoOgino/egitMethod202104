	@Override
	public boolean performFinish() {
		try {
			int timeout = Activator.getDefault().getPreferenceStore()
					.getInt(UIPreferences.REMOTE_CONNECTION_TIMEOUT);

			PushOperationSpecification specification = new PushOperationSpecification();
			RepositorySelection remote = repoPage.getSelection();

			RefSpec refSpec = new RefSpec().
					setSourceDestination(pushObj.name(), targetPage.getTargetRef()).
					setForceUpdate(targetPage.isForceUpdate());

			// Include fetchSpecs in calculation so that tracking refs are also updated
			RemoteConfig remoteConfig = remote.getConfig();
			List<RefSpec> fetchSpecs = remoteConfig != null ? remoteConfig.getFetchRefSpecs() : null;

			Collection<RemoteRefUpdate> remoteRefUpdates = Transport
					.findRemoteRefUpdatesFor(repo,
							Collections.singleton(refSpec), fetchSpecs);

			specification.addURIRefUpdates(remote.getURI(true), remoteRefUpdates);

			PushOperation pop = new PushOperation(repo, specification, false,
					timeout);

			PushJob job = new PushWizard.PushJob(repo, pop, null,
					PushWizard.getDestinationString(remote));
			job.setUser(true);
			job.schedule();

			repoPage.saveUriInPrefs();
		} catch (Exception e) {
			Activator.handleError(e.getMessage(), e, true);
		}

		return true;
	}

