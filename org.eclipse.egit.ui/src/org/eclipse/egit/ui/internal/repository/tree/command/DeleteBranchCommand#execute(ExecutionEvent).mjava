	public Object execute(final ExecutionEvent event) throws ExecutionException {
		final List<RefNode> nodes = getSelectedNodes(event);
		final List<RefNode> unmergedNodes = new ArrayList<RefNode>();

		final Shell shell = getShell(event);

		try {
			new ProgressMonitorDialog(shell).run(false, false,
					new IRunnableWithProgress() {
						public void run(IProgressMonitor monitor)
								throws InvocationTargetException,
								InterruptedException {
							try {
								monitor.beginTask(UIText.DeleteBranchCommand_DeletingBranchesProgress, nodes.size());
								for (RefNode refNode : nodes) {
									int result = deleteBranch(refNode, refNode
											.getObject(), false);
									if (result == DeleteBranchOperation.REJECTED_CURRENT) {
										throw new CoreException(
												Activator
														.createErrorStatus(
																UIText.DeleteBranchCommand_CannotDeleteCheckedOutBranch,
																null));
									} else if (result == DeleteBranchOperation.REJECTED_UNMERGED) {
										unmergedNodes.add(refNode);
									} else
										monitor.worked(1);
								}
								if (!unmergedNodes.isEmpty()) {
									MessageDialog messageDialog = new BranchMessageDialog(
											shell, unmergedNodes);
									if (messageDialog.open() == Window.OK) {
										for (RefNode node : unmergedNodes) {
											deleteBranch(node,
													node.getObject(), true);
											monitor.worked(1);
										}
									}
								}
							} catch (CoreException ex) {
								throw new InvocationTargetException(ex);
							} finally {
								monitor.done();
							}
						}
					});
		} catch (InvocationTargetException e1) {
			Activator.handleError(
					UIText.RepositoriesView_BranchDeletionFailureMessage, e1
							.getCause(), true);
		} catch (InterruptedException e1) {
			// ignore
		}

		return null;
	}

