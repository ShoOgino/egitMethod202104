	private List<File> getChangedFiles(RevCommit commit, Repository repo) {
		try {
			List<File> files = new ArrayList<File>();
			TreeWalk tw = new TreeWalk(repo);
			tw.setRecursive(true);
			final RevWalk walk = new RevWalk(repo);
			try {
				FileDiff[] diffs = FileDiff.compute(repo, tw, commit,
						TreeFilter.ALL);
				if (diffs != null && diffs.length > 0) {
					String workDir = repo.getWorkTree().getAbsolutePath();
					for (FileDiff d : diffs) {
						String path = d.getPath();
						File f = new File(workDir + File.separator + path);
						files.add(f);
					}
				}
			} finally {
				tw.release();
				walk.release();
			}
			return files;
		} catch (MissingObjectException e) {
			Activator.error(e.getMessage(), e);
		} catch (IncorrectObjectTypeException e) {
			Activator.error(e.getMessage(), e);
		} catch (CorruptObjectException e) {
			Activator.error(e.getMessage(), e);
		} catch (IOException e) {
			Activator.error(e.getMessage(), e);
		}
		return null;
	}

