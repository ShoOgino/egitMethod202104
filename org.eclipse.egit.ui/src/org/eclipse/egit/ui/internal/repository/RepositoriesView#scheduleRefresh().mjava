	private void scheduleRefresh() {
		if (scheduledJob != null && scheduledJob.getState() == Job.RUNNING) {
			// TODO add some "delay" here in order to avoid repeated updates
			return;
		}

		final CommonViewer tv = getCommonViewer();
		final boolean needsNewInput = lastInputChange > lastInputUpdate;

		Job job = new Job("Refreshing Git Repositories view") { //$NON-NLS-1$

			@Override
			protected IStatus run(IProgressMonitor monitor) {

				if (needsNewInput) {
					unregisterRepositoryListener();
					repositories.clear();
					for (String dir : repositoryUtil
							.getConfiguredRepositories()) {
						try {
							Repository repo = repositoryCache
									.lookupRepository(new File(dir));
							repo
									.addRepositoryChangedListener(repositoryListener);
							repositories.add(repo);
						} catch (IOException e) {
							Activator.handleError(e.getMessage(), e, false);
						}
					}
				}

				Display.getDefault().asyncExec(new Runnable() {
					public void run() {
						// keep expansion state and selection so that we can
						// restore the tree
						// after update
						Object[] expanded = tv.getExpandedElements();
						IStructuredSelection sel = (IStructuredSelection) tv
								.getSelection();

						if (needsNewInput) {
							lastInputUpdate = System.currentTimeMillis();
							tv.setInput(ResourcesPlugin.getWorkspace()
									.getRoot());
						} else
							tv.refresh();
						tv.setExpandedElements(expanded);

						Object selected = sel.getFirstElement();
						if (selected != null)
							tv.reveal(selected);

						IViewPart part = PlatformUI.getWorkbench()
								.getActiveWorkbenchWindow().getActivePage()
								.findView(IPageLayout.ID_PROP_SHEET);
						if (part != null) {
							PropertySheet sheet = (PropertySheet) part;
							PropertySheetPage page = (PropertySheetPage) sheet
									.getCurrentPage();
							page.refresh();
						}
					}
				});

				return Status.OK_STATUS;
			}

		};
		job.setSystem(true);

		IWorkbenchSiteProgressService service = (IWorkbenchSiteProgressService) getSite()
				.getService(IWorkbenchSiteProgressService.class);

		service.schedule(job);

		scheduledJob = job;
	}

