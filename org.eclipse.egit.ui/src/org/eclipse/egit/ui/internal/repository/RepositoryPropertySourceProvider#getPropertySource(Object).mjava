	@Override
	public IPropertySource getPropertySource(Object object) {

		if (object instanceof IPropertySource) {
			// Enable nested properties
			return (IPropertySource) object;
		}

		if (object == lastObject) {
			return lastRepositorySource;
		}

		if (!(object instanceof RepositoryTreeNode)) {
			return null;
		} else if (((RepositoryTreeNode) object).getRepository() == null) {
			return null;
		}

		registerDisposal();
		removeListener();

		RepositoryTreeNode node = (RepositoryTreeNode) object;
		listenerHandle = node.getRepository().getListenerList()
				.addConfigChangedListener(event -> refreshPage());

		if (node.getType() == RepositoryTreeNodeType.REPO) {
			lastObject = object;
			checkChangeType(SourceType.REPOSITORY);
			lastRepositorySource = new RepositoryPropertySource(
					(Repository) node.getObject(), myPage);
			return lastRepositorySource;
		} else if (node.getType() == RepositoryTreeNodeType.REMOTE) {
			lastObject = object;
			checkChangeType(SourceType.REMOTE);
			lastRepositorySource = new RepositoryRemotePropertySource(node
					.getRepository().getConfig(), (String) node.getObject(),
					myPage);
			return lastRepositorySource;
		} else if (node.getType() == RepositoryTreeNodeType.FETCH
				|| node.getType() == RepositoryTreeNodeType.PUSH)
			return getPropertySource(node.getParent());
		else if (node.getType() == RepositoryTreeNodeType.REF) {
			lastObject = object;
			Ref ref = (Ref) node.getObject();
			if (ref.getName().startsWith(Constants.R_HEADS) || ref.getName().startsWith(Constants.R_REMOTES)){
				checkChangeType(SourceType.BRANCH);
				Repository repository = Adapters.adapt(node, Repository.class);
				lastRepositorySource =  new BranchPropertySource(repository, ref.getName(), myPage);
				return lastRepositorySource;
			}
			return null;
		} else if (node.getType() == RepositoryTreeNodeType.TAG) {
			lastObject = object;
			checkChangeType(SourceType.TAG);
			lastRepositorySource = new TagPropertySource(node.getRepository(),
					(Ref) node.getObject(), myPage);
			return lastRepositorySource;
		}
		return null;
	}

