	public void createControl(Composite parent) {

		Composite main = new Composite(parent, SWT.NONE);
		GridDataFactory.fillDefaults().grab(true, true).applyTo(main);

		if (myFetchMode) {
			main.setLayout(new GridLayout(3, false));
			// we only use the first URI
			Label uriLabel = new Label(main, SWT.NONE);
			uriLabel.setText(UIText.ConfigureUriPage_FetchUri_label);
			uriText = new Text(main, SWT.BORDER);
			// manual entry is dangerous, as the validate may wait forever
			uriText.setEnabled(false);

			Button change = new Button(main, SWT.PUSH);
			change.setText(UIText.ConfigureUriPage_Change_button);
			change.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {
					SelectUriWizard slwz = new SelectUriWizard(false, uriText
							.getText());
					WizardDialog dlg = new WizardDialog(getShell(), slwz);
					if (dlg.open() == Window.OK) {
						URIish uri = slwz.getUri();
						uriText.setText(uri.toPrivateString());
						checkPage();
					}
				}

			});

			if (myConfig != null && !myConfig.getURIs().isEmpty()) {

				uriText.setText(myConfig.getURIs().get(0).toPrivateString());
				checkPage();
			} else {
				setPageComplete(false);
			}

			GridDataFactory.fillDefaults().grab(true, false).applyTo(uriText);

		} else {
			main.setLayout(new GridLayout(1, false));
			tv = new TableViewer(main);

			GridDataFactory.fillDefaults().grab(true, true).applyTo(
					tv.getTable());

			tv.setLabelProvider(new LabelProvider());
			tv.setContentProvider(ArrayContentProvider.getInstance());

			ToolBar tb = new ToolBar(main, SWT.HORIZONTAL);
			ToolItem add = new ToolItem(tb, SWT.PUSH);
			add.setText(UIText.ConfigureUriPage_Add_button);

			add.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {
					SelectUriWizard slwz = new SelectUriWizard(false);
					WizardDialog dlg = new WizardDialog(getShell(), slwz);
					if (dlg.open() == Window.OK) {
						URIish uri = slwz.getUri();
						if (!myUris.contains(uri))
							myUris.add(uri);
						tv.setInput(myUris);
						checkPage();
					}
				}

			});

			final ToolItem remove = new ToolItem(tb, SWT.PUSH);
			remove.setText(UIText.ConfigureUriPage_Remove_button);
			remove.setEnabled(false);

			remove.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {
					for (Object o : ((IStructuredSelection) tv.getSelection())
							.toArray())
						myUris.remove(o);
					tv.setInput(myUris);
					checkPage();
				}

			});

			tv.addSelectionChangedListener(new ISelectionChangedListener() {

				public void selectionChanged(SelectionChangedEvent event) {
					remove.setEnabled(!tv.getSelection().isEmpty());

				}
			});

			if (myConfig != null && !myConfig.getPushURIs().isEmpty()) {

				for (URIish uri : myConfig.getPushURIs())
					myUris.add(uri);
				tv.setInput(myUris);
				checkPage();
			} else {
				setPageComplete(false);
			}
		}

		Dialog.applyDialogFont(main);
		setControl(main);

	}

