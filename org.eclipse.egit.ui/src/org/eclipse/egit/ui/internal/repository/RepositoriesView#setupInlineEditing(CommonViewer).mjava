	private void setupInlineEditing(CommonViewer viewer) {
		ColumnViewerEditorActivationStrategy editorActivation = new ColumnViewerEditorActivationStrategy(
				viewer) {

			@Override
			protected boolean isEditorActivationEvent(
					ColumnViewerEditorActivationEvent event) {
				// Editing is started only through the
				// RenameRepositoryGroupCommand
				return event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;
			}
		};

		// TABBING_HORIZONTAL with only one column effectively switches off
		// tabbing. It may jump otherwise into an open editor (closing the cell
		// editor), and when the user is typing he may then inadvertently modify
		// that file.
		TreeViewerEditor.create(viewer, editorActivation,
				ColumnViewerEditor.TABBING_HORIZONTAL);

		// Record the initial value so that the validator can avoid producing an
		// error if the text is the same again during editing.
		String initialValue[] = { null };

		textCellEditor = new MessagePopupTextCellEditor(viewer.getTree(), true);
		textCellEditor.setValidator(value -> {
			String currentText = value.toString().trim();
			if (currentText.isEmpty()) {
				return UIText.RepositoriesView_RepoGroup_EmptyNameError;
			}
			if (!currentText.equals(initialValue[0]) && RepositoryGroups
					.getInstance().groupExists(currentText)) {
				return MessageFormat.format(
						UIText.RepositoryGroups_DuplicateGroupNameError,
						currentText);
			}
			return null;
		});

		// We don't have a ViewerColumn at hand... use the legacy mechanism:

		viewer.setColumnProperties(new String[] { "Name" }); //$NON-NLS-1$
		viewer.setCellEditors(new CellEditor[] { textCellEditor });
		viewer.setCellModifier(new ICellModifier() {

			@Override
			public boolean canModify(Object element, String property) {
				return element instanceof RepositoryGroupNode;
			}

			private String doGetValue(Object element) {
				if (element instanceof RepositoryGroupNode) {
					return ((RepositoryGroupNode) element).getObject()
							.getName();
				}
				return null;
			}

			@Override
			public Object getValue(Object element, String property) {
				String result = doGetValue(element);
				initialValue[0] = result;
				return result;
			}

			@Override
			public void modify(Object element, String property, Object value) {
				if (element instanceof Item) {
					element = ((Item) element).getData();
				}
				if (element instanceof RepositoryGroupNode
						&& value instanceof CharSequence) {
					RepositoryGroup group = ((RepositoryGroupNode) element)
							.getObject();
					String newName = value.toString().trim();
					if (!newName.equals(group.getName())) {
						RepositoryGroups.getInstance().renameGroup(group,
								newName);
						// Refresh all to get re-sorting
						viewer.refresh();
						// Re-set the selection to get a status bar update
						viewer.setSelection(new StructuredSelection(element),
								true);
					}
				}
			}
		});
	}

