	public IPropertyDescriptor[] getPropertyDescriptors() {

		// initFromConfig();

		try {
			userHomeConfig.load();
			repositoryConfig.load();
			effectiveConfig.load();
		} catch (IOException e) {
			showExceptionMessage(e);
		} catch (ConfigInvalidException e) {
			showExceptionMessage(e);
		}

		List<IPropertyDescriptor> resultList = new ArrayList<IPropertyDescriptor>();

		List<String> configuredKeys = getConfiguredKeys();

		boolean effectiveMode = false;

		ActionContributionItem item = (ActionContributionItem) myPage.getSite()
				.getActionBars().getToolBarManager().find(
						modeToggleAction.getId());
		if (item != null) {
			effectiveMode = ((Action) item.getAction()).isChecked();
		}

		if (effectiveMode) {
			for (String key : configuredKeys) {

				for (String sub : getSubSections(effectiveConfig, key)) {
					PropertyDescriptor desc = new PropertyDescriptor(
							EFFECTIVE_ID_PREFIX + sub, sub);

					desc
							.setCategory(UIText.RepositoryPropertySource_EffectiveConfigurationCategory);
					resultList.add(desc);
				}

			}
		} else {

			String categoryString = UIText.RepositoryPropertySource_GlobalConfigurationCategory
					+ userHomeConfig.getFile().getAbsolutePath();
			for (String key : configuredKeys) {

				// no remote configuration globally....
				if (key.startsWith(RepositoriesView.REMOTE + ".")) //$NON-NLS-1$
					continue;

				for (String sub : getSubSections(effectiveConfig, key)) {
					TextPropertyDescriptor desc = new TextPropertyDescriptor(
							USER_ID_PREFIX + sub, sub);
					desc.setCategory(categoryString);
					resultList.add(desc);
				}
			}
			categoryString = UIText.RepositoryPropertySource_RepositoryConfigurationCategory
					+ repositoryConfig.getFile().getAbsolutePath();

			boolean editable = true;

			for (String key : configuredKeys) {

				// remote stuff is not configurable
				editable = !key.startsWith("remote"); //$NON-NLS-1$

				for (String sub : getSubSections(effectiveConfig, key)) {
					PropertyDescriptor desc;
					if (editable)
						desc = new TextPropertyDescriptor(REPO_ID_PREFIX + sub,
								sub);
					else
						desc = new PropertyDescriptor(REPO_ID_PREFIX + sub, sub);
					desc.setCategory(categoryString);
					resultList.add(desc);
				}
			}
		}

		return resultList.toArray(new IPropertyDescriptor[0]);
	}

