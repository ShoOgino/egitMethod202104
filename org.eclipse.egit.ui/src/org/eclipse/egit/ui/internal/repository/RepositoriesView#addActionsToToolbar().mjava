	private void addActionsToToolbar() {

		IToolBarManager manager = getViewSite().getActionBars()
				.getToolBarManager();

		refreshAction = new Action(UIText.RepositoriesView_Refresh_Button) {

			@Override
			public void run() {
				scheduleRefresh();
			}
		};
		refreshAction.setImageDescriptor(UIIcons.ELCL16_REFRESH);
		manager.add(refreshAction);

		linkWithSelectionAction = new Action(
				UIText.RepositoriesView_LinkWithSelection_action,
				IAction.AS_CHECK_BOX) {

			@Override
			public void run() {
				IEclipsePreferences prefs = getPrefs();
				prefs.putBoolean(PREFS_SYNCED, isChecked());
				try {
					prefs.flush();
				} catch (BackingStoreException e) {
					// ignore here
				}
				if (isChecked()) {
					ISelectionService srv = (ISelectionService) getSite()
							.getService(ISelectionService.class);
					reactOnSelection(srv.getSelection());
				}

			}

		};

		linkWithSelectionAction
				.setToolTipText(UIText.RepositoriesView_LinkWithSelection_action);
		linkWithSelectionAction.setImageDescriptor(UIIcons.ELCL16_SYNCED);
		linkWithSelectionAction.setChecked(getPrefs().getBoolean(PREFS_SYNCED,
				false));

		manager.add(linkWithSelectionAction);

		manager.add(new Separator());

		IAction collapseAllAction = new Action(
				UIText.RepositoriesView_CollapseAllMenu) {

			@Override
			public void run() {
				tv.collapseAll();
			}
		};
		collapseAllAction.setImageDescriptor(UIIcons.COLLAPSEALL);
		manager.add(collapseAllAction);

		manager.add(new Separator());

		importAction = new Action(UIText.RepositoriesView_Import_Button) {

			@Override
			public void run() {
				WizardDialog dlg = new WizardDialog(getSite().getShell(),
						new GitCloneWizard());
				if (dlg.open() == Window.OK)
					scheduleRefresh();
			}
		};
		importAction.setToolTipText(UIText.RepositoriesView_Clone_Tooltip);
		importAction.setImageDescriptor(UIIcons.CLONEGIT);

		manager.add(importAction);

		addAction = new Action(UIText.RepositoriesView_Add_Button) {

			@Override
			public void run() {
				RepositorySearchDialog sd = new RepositorySearchDialog(
						getSite().getShell(), getDirs());
				if (sd.open() == Window.OK) {
					Set<String> dirs = new HashSet<String>();
					dirs.addAll(getDirs());
					if (dirs.addAll(sd.getDirectories()))
						saveDirs(dirs);
					scheduleRefresh();
				}

			}
		};
		addAction.setToolTipText(UIText.RepositoriesView_AddRepository_Tooltip);
		addAction.setImageDescriptor(UIIcons.NEW_REPOSITORY);

		manager.add(addAction);

		// copy and paste are global actions; we just implement them
		// and register them with the global action handler
		// we enable/disable them upon tree selection changes

		copyAction = new Action("") { //$NON-NLS-1$

			@Override
			public void run() {
				// for REPO, WORKINGDIR, FILE, FOLDER: copy directory
				IStructuredSelection sel = (IStructuredSelection) tv
						.getSelection();
				if (sel.size() == 1) {
					RepositoryTreeNode node = (RepositoryTreeNode) sel
							.getFirstElement();
					String dir = null;
					if (node.getType() == RepositoryTreeNodeType.REPO) {
						dir = node.getRepository().getDirectory().getPath();
					} else if (node.getType() == RepositoryTreeNodeType.FILE
							|| node.getType() == RepositoryTreeNodeType.FOLDER) {
						dir = ((File) node.getObject()).getPath();
					} else if (node.getType() == RepositoryTreeNodeType.WORKINGDIR) {
						if (!isBare(node.getRepository()))
							dir = node.getRepository().getWorkDir().getPath();
					}
					if (dir != null) {
						Clipboard clip = null;
						try {
							clip = new Clipboard(getSite().getShell()
									.getDisplay());
							clip
									.setContents(new Object[] { dir },
											new Transfer[] { TextTransfer
													.getInstance() });
						} finally {
							if (clip != null)
								// we must dispose ourselves
								clip.dispose();
						}
					}
				}
			}

		};
		copyAction.setEnabled(false);

		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.COPY.getId(), copyAction);

		pasteAction = new Action("") { //$NON-NLS-1$

			@Override
			public void run() {
				// we check if the pasted content is a directory
				// repository location and try to add this
				String errorMessage = null;

				Clipboard clip = null;
				try {
					clip = new Clipboard(getSite().getShell().getDisplay());
					String content = (String) clip.getContents(TextTransfer
							.getInstance());
					if (content == null) {
						errorMessage = UIText.RepositoriesView_NothingToPasteMessage;
						return;
					}

					File file = new File(content);
					if (!file.exists() || !file.isDirectory()) {
						errorMessage = UIText.RepositoriesView_ClipboardContentNotDirectoryMessage;
						return;
					}

					if (!RepositoryCache.FileKey.isGitRepository(file)) {
						errorMessage = NLS
								.bind(
										UIText.RepositoriesView_ClipboardContentNoGitRepoMessage,
										content);
						return;
					}

					if (addDir(file))
						scheduleRefresh();
					else
						errorMessage = NLS.bind(
								UIText.RepositoriesView_PasteRepoAlreadyThere,
								content);
				} finally {
					if (clip != null)
						// we must dispose ourselves
						clip.dispose();
					if (errorMessage != null)
						MessageDialog.openWarning(getSite().getShell(),
								UIText.RepositoriesView_PasteFailureTitle,
								errorMessage);
				}
			}

		};

		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.PASTE.getId(), pasteAction);

	}

