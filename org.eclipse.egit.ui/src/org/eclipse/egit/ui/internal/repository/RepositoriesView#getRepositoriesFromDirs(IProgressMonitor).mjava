	/**
	 * Converts the directories as configured for this view into a list of
	 * {@link Repository} objects suitable for the tree content provider
	 * <p>
	 * TODO move to some utility class
	 *
	 * @param monitor
	 * @return a list of nodes
	 * @throws InterruptedException
	 */
	public static List<RepositoryTreeNode<Repository>> getRepositoriesFromDirs(
			IProgressMonitor monitor) throws InterruptedException {

		List<String> gitDirStrings = getDirs();
		List<RepositoryTreeNode<Repository>> input = new ArrayList<RepositoryTreeNode<Repository>>();

		for (String dirString : gitDirStrings) {
			if (monitor != null && monitor.isCanceled()) {
				throw new InterruptedException(
						UIText.RepositoriesView_ActionCanceled_Message);
			}
			try {
				File dir = new File(dirString);
				if (dir.exists() && dir.isDirectory()) {
					Repository repo = new Repository(dir);
					// reset repository change events here so that check for
					// repository changes does not trigger an unnecessary
					// refresh
					repo.scanForRepoChanges();
					RepositoryNode node = new RepositoryNode(null, repo);
					input.add(node);
				}
			} catch (IOException e) {
				IStatus error = new Status(IStatus.ERROR, Activator
						.getPluginId(), e.getMessage(), e);
				Activator.getDefault().getLog().log(error);
			}
		}
		Collections.sort(input);
		return input;
	}

