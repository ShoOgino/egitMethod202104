	public StyledString getStyledText(Object element) {
		if (!(element instanceof RepositoryTreeNode))
			return null;

		RepositoryTreeNode node = (RepositoryTreeNode) element;

		try {
			switch (node.getType()) {
			case REPO:
				if (node.getParent() != null
						&& node.getParent().getType() == RepositoryTreeNodeType.SUBMODULES)
					return getStyledTextForSubmodule(node);
				return getStyledTextFor((Repository) node.getObject());
			case ADDITIONALREF:
				Ref ref = (Ref) node.getObject();
				// shorten the name
				StyledString refName = new StyledString(
						Repository.shortenRefName(ref.getName()));

				ObjectId refId;
				if (ref.isSymbolic()) {
					refName.append(' ');
					refName.append('[', StyledString.DECORATIONS_STYLER);
					refName.append(ref.getLeaf().getName(),
							StyledString.DECORATIONS_STYLER);
					refName.append(']', StyledString.DECORATIONS_STYLER);
					refId = ref.getLeaf().getObjectId();
				} else
					refId = ref.getObjectId();

				refName.append(' ');
				RevCommit commit = getLatestCommit(node);
				if (commit != null)
					refName.append(abbreviate(commit),
							StyledString.QUALIFIER_STYLER)
							.append(' ')
							.append(commit.getShortMessage(),
									StyledString.QUALIFIER_STYLER);
				else
					refName.append(abbreviate(refId),
							StyledString.QUALIFIER_STYLER);
				return refName;
			case WORKINGDIR:
				StyledString dirString = new StyledString(
						UIText.RepositoriesView_WorkingDir_treenode);
				dirString.append(" - ", StyledString.QUALIFIER_STYLER); //$NON-NLS-1$
				dirString.append(node.getRepository().getWorkTree()
						.getAbsolutePath(), StyledString.QUALIFIER_STYLER);
				return dirString;

			case REF:
				// fall through
			case TAG:
				StyledString styled = null;
				String nodeText = getSimpleText(node);
				if (nodeText != null) {
					styled = new StyledString(nodeText);
					if (verboseBranchMode) {
						RevCommit latest = getLatestCommit(node);
						if (latest != null)
							styled.append(' ')
									.append(abbreviate(latest),
											StyledString.QUALIFIER_STYLER)
									.append(' ')
									.append(latest.getShortMessage(),
											StyledString.QUALIFIER_STYLER);
					}
				}
				return styled;
			case STASHED_COMMIT:
				return getStyledTextForCommit((StashedCommitNode) node);
			case PUSH:
				// fall through
			case FETCH:
				// fall through
			case FILE:
				// fall through
			case FOLDER:
				// fall through
			case BRANCHES:
				// fall through
			case LOCAL:
				// fall through
			case REMOTETRACKING:
				// fall through
			case BRANCHHIERARCHY:
				// fall through
			case TAGS:
				// fall through;
			case ADDITIONALREFS:
				// fall through
			case REMOTES:
				// fall through
			case REMOTE:
				// fall through
			case SUBMODULES:
				// fall through
			case STASH:
				// fall through
			case ERROR: {
				String label = getSimpleText(node);
				if (label != null)
					return new StyledString(label);
			}

			}
		} catch (IOException e) {
			Activator.logError(e.getMessage(), e);
		}

		return null;

	}

