	@Override
	public StyledString getStyledText(Object element) {
		if (!(element instanceof RepositoryTreeNode))
			return null;

		RepositoryTreeNode node = (RepositoryTreeNode) element;

		switch (node.getType()) {
		case REPO:
			if (node.getParent() != null
					&& node.getParent().getType() == RepositoryTreeNodeType.SUBMODULES)
				return getStyledTextForSubmodule(node);
			return GitLabels.getStyledLabelExtendedSafe(node.getObject());
		case ADDITIONALREF:
			Ref ref = (Ref) node.getObject();
			// shorten the name
			StyledString refName = new StyledString(
					Repository.shortenRefName(ref.getName()));

			if (ref.isSymbolic()) {
				refName.append(' ');
				refName.append('[', StyledString.DECORATIONS_STYLER);
				refName.append(ref.getLeaf().getName(),
						StyledString.DECORATIONS_STYLER);
				refName.append(']', StyledString.DECORATIONS_STYLER);
			}
			ObjectId refId = ref.getObjectId();
			refName.append(' ');
			RevCommit commit = getLatestCommit(node);
			if (commit != null) {
				refName.append(abbreviate(commit),
						StyledString.QUALIFIER_STYLER)
						.append(' ')
						.append(commit.getShortMessage(),
								StyledString.QUALIFIER_STYLER);
			} else if (!ref.isSymbolic() || refId != null) {
				refName.append(abbreviate(refId),
						StyledString.QUALIFIER_STYLER);
			} else {
				refName.append(
						UIText.RepositoriesViewLabelProvider_UnbornBranchText,
						StyledString.QUALIFIER_STYLER);
			}
			return refName;
		case WORKINGDIR:
			StyledString dirString = new StyledString(
					UIText.RepositoriesView_WorkingDir_treenode);
			dirString.append(" - ", StyledString.QUALIFIER_STYLER); //$NON-NLS-1$
			dirString.append(node.getRepository().getWorkTree()
					.getAbsolutePath(), StyledString.QUALIFIER_STYLER);
			return dirString;

		case REF:
			StyledString styled = null;
			String nodeText = getSimpleText(node);
			if (nodeText != null) {
				styled = new StyledString(nodeText);
				if (verboseBranchMode) {
					RevCommit latest = getLatestCommit(node);
					if (latest != null)
						styled.append(' ')
								.append(abbreviate(latest),
										StyledString.QUALIFIER_STYLER)
								.append(' ')
								.append(latest.getShortMessage(),
										StyledString.QUALIFIER_STYLER);
				}
			}
			return styled;
		case TAG:
			return getStyledTextForTag((TagNode) node);
		case STASHED_COMMIT:
			return getStyledTextForCommit((StashedCommitNode) node);
		case SUBMODULES:
			return getStyledTextForSubmodules((SubmodulesNode) node);
		case PUSH:
			// fall through
		case FETCH:
			// fall through
		case FILE:
			// fall through
		case FOLDER:
			// fall through
		case BRANCHES:
			// fall through
		case LOCAL:
			// fall through
		case REMOTETRACKING:
			// fall through
		case BRANCHHIERARCHY:
			// fall through
		case TAGS:
			// fall through;
		case ADDITIONALREFS:
			// fall through
		case REMOTES:
			// fall through
		case REMOTE:
			// fall through
		case STASH:
			// fall through
		case ERROR: {
			String label = getSimpleText(node);
			if (label != null)
				return new StyledString(label);
		}

		}

		return null;

	}

