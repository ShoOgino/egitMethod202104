	@Override
	protected Control createDialogArea(Composite parent) {
		Composite main = new Composite(parent, SWT.NONE);
		GridDataFactory.fillDefaults().grab(true, true).applyTo(main);
		main.setLayout(new GridLayout(1, false));
		// if the repository is bare, we don't have a working directory to
		// delete; we should not use this dialog in this case, though
		// as it would be rendered ugly
		if (repository.isBare())
			return main;
		final Button deleteWorkDir = new Button(main, SWT.CHECK);
		final Button removeProjects = new Button(main, SWT.CHECK);
		deleteWorkDir.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				shouldDelete = deleteWorkDir.getSelection();
				removeProjects.setEnabled(!shouldDelete);
				if (shouldDelete && numberOfProjects > 0) {
					removeProjects.setSelection(true);
					shouldRemoveProjects = true;
				}
			}
		});
		GridDataFactory.fillDefaults().grab(true, false).applyTo(deleteWorkDir);
		deleteWorkDir
				.setText(NLS
						.bind(
								UIText.DeleteRepositoryConfirmDialog_DeleteWorkingDirectoryCheckbox,
								repository.getWorkTree().getPath()));
		if (numberOfProjects > 0) {
			removeProjects.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					shouldRemoveProjects = removeProjects.getSelection();
				}
			});
			GridDataFactory.fillDefaults().grab(true, false).applyTo(removeProjects);
			removeProjects
				.setText(NLS
						.bind(UIText.DeleteRepositoryConfirmDialog_DeleteProjectsCheckbox,
								Integer.valueOf(numberOfProjects)));
		} else
			removeProjects.setVisible(false);
		return main;
	}

