	public Object execute(ExecutionEvent event) throws ExecutionException {

		RepositoryTreeNode node = getSelectedNodes(event).get(0);

		final AtomicBoolean abortedDueToConflict = new AtomicBoolean();
		final Repository repository = node.getRepository();

		Ref ref;
		if (node instanceof RefNode)
			ref = ((RefNode) node).getObject();
		else {
			RebaseTargetSelectionDialog rebaseTargetSelectionDialog = new RebaseTargetSelectionDialog(
					getShell(event), repository);
			if (rebaseTargetSelectionDialog.open() == IDialogConstants.OK_ID) {
				String refName = rebaseTargetSelectionDialog.getRefName();
				try {
					ref = repository.getRef(refName);
				} catch (IOException e) {
					throw new ExecutionException(e.getMessage(), e);
				}
			} else
				return null;
		}

		String jobname = NLS.bind(
				UIText.RebaseCurrentRefCommand_RebasingCurrentJobName, ref
						.getName());
		final RebaseOperation rebase = new RebaseOperation(repository, ref);
		Job job = new Job(jobname) {
			@Override
			protected IStatus run(IProgressMonitor monitor) {
				try {
					rebase.execute(monitor);
					// TODO for the time being, we will abort immediately once
					// we have found a conflict
					RebaseResult result = rebase.getResult();
					if (result.getStatus() == org.eclipse.jgit.api.RebaseResult.Status.STOPPED) {
						abortedDueToConflict.set(true);
						new RebaseOperation(repository, Operation.ABORT)
								.execute(monitor);
					}
				} catch (final CoreException e) {
					try {
						new RebaseOperation(repository, Operation.ABORT)
								.execute(monitor);
					} catch (CoreException e1) {
						return e1.getStatus();
					}
					return e.getStatus();
				}
				return Status.OK_STATUS;
			}
		};
		job.setUser(true);
		job.setRule(rebase.getSchedulingRule());
		job.addJobChangeListener(new JobChangeAdapter() {
			@Override
			public void done(IJobChangeEvent cevent) {
				IStatus result = cevent.getJob().getResult();
				if (result.getSeverity() == IStatus.CANCEL) {
					Display.getDefault().asyncExec(new Runnable() {
						public void run() {
							// don't use getShell(event) here since
							// the active shell has changed since the
							// execution has been triggered.
							Shell shell = PlatformUI.getWorkbench()
									.getActiveWorkbenchWindow().getShell();
							MessageDialog
									.openInformation(
											shell,
											UIText.RebaseCurrentRefCommand_RebaseCanceledTitle,
											UIText.RebaseCurrentRefCommand_RebaseCanceledMessage);
						}
					});
				} else if (result.isOK()) {
					Display.getDefault().asyncExec(new Runnable() {
						public void run() {
							// don't get the shell from the event, as this is
							// asynchronous
							Shell shell = PlatformUI.getWorkbench()
									.getActiveWorkbenchWindow().getShell();
							if (abortedDueToConflict.get())
								MessageDialog
										.openError(
												shell,
												UIText.RebaseCurrentRefCommand_AbortedDialogTitle,
												UIText.RebaseCurrentRefCommand_AbortedDialogMessage);
							else
								new RebaseResultDialog(shell, repository,
										rebase.getResult()).open();
						}
					});
				}
			}
		});
		job.schedule();
		return null;
	}

