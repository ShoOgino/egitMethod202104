	private String findGitDirsRecursive(Path root, final Set<Path> gitDirs,
			IProgressMonitor monitor, final boolean lookForNested,
			boolean skipHidden) {

		long start = System.currentTimeMillis();
		final int[] dirCount = new int[1];
		final SubMonitor m = SubMonitor.convert(monitor);
		try {
			SimpleFileVisitor<Path> visitor = new SimpleFileVisitor<Path>() {
				private long lastMonitorUpdate;

				@Override
				public FileVisitResult visitFileFailed(Path file,
						IOException exc) throws IOException {
					return FileVisitResult.SKIP_SUBTREE;
				}

				@Override
				public FileVisitResult preVisitDirectory(Path d,
						BasicFileAttributes attrs) throws IOException {
					dirCount[0]++;
					if (m.isCanceled()) {
						return FileVisitResult.TERMINATE;
					} else if (d == null) {
						return FileVisitResult.CONTINUE;
					} else if (isHidden(d) || isGitInternal(d)) {
						return FileVisitResult.SKIP_SUBTREE;
					}
					updateMonitor(d);
					Path resolved = resolve(d);
					if (resolved == null) {
						return FileVisitResult.CONTINUE;
					}
					if (!suppressed(resolved)) {
						gitDirs.add(resolved.toAbsolutePath());
						updateMonitor(resolved);
						if (isDotGit(resolved)) { // non-bare
							if (!lookForNested
									|| (isSameFile(d, resolved)
											&& !hasSubmodule(resolved))) {
								return FileVisitResult.SKIP_SUBTREE;
							}
						} else { // bare
							return FileVisitResult.SKIP_SUBTREE;
						}
					}
					return FileVisitResult.CONTINUE;
				}

				private boolean isHidden(@NonNull Path d)
						throws IOException {
					return skipHidden && Files.isHidden(d)
							&& !isDotGit(d);
				}

				private boolean isGitInternal(@NonNull Path d) {
					Path p = d.getParent();
					String n = d.getFileName().toString();
					return p != null && isDotGit(p)
							&& !Constants.MODULES.equals(n);
				}

				private Path resolve(@NonNull Path d) {
					File f = FileKey.resolve(d.toFile(), FS.DETECTED);
					if (f == null) {
						return null;
					}
					return f.toPath();
				}

				private boolean suppressed(@NonNull Path d) {
					return !allowBare && !isDotGit(d);
				}

				private boolean isDotGit(@NonNull Path d) {
					return Constants.DOT_GIT.equals(d.getFileName().toString());
				}

				private boolean isSameFile(@NonNull Path f1, @NonNull Path f2) {
					try {
						return Files.isSameFile(f1, f2);
					} catch (IOException e) {
						return false;
					}
				}

				private boolean hasSubmodule(@NonNull Path dotGit) {
					Path gitmodules = dotGit.getParent()
							.resolve(Constants.DOT_GIT_MODULES);
					Path modules = dotGit.resolve(Constants.MODULES);
					return Files.exists(gitmodules)
							&& Files.exists(modules);
				}

				private void updateMonitor(@NonNull Path d) {
					long now = System.currentTimeMillis();
					if ((now - lastMonitorUpdate) > 100L) {
						m.setWorkRemaining(100);
						m.worked(1);
						m.setTaskName(MessageFormat.format(
								UIText.RepositorySearchDialog_RepositoriesFound_message,
								Integer.valueOf(gitDirs.size()),
								d.toAbsolutePath().toString()));
						lastMonitorUpdate = now;
					}
				}
			};
			Files.walkFileTree(root, EnumSet.of(FileVisitOption.FOLLOW_LINKS),
					Integer.MAX_VALUE, visitor);
		} catch (IOException e) {
			Activator.error(e.getMessage(), e);
		}
		long time = System.currentTimeMillis() - start;
		return formatSummary(gitDirs, dirCount, time);
	}

