	@Override
	public int compareTo(RepositoryTreeNode otherNode) {
		int typeDiff = this.myType.ordinal() - otherNode.getType().ordinal();
		if (typeDiff != 0) {
			return typeDiff;
		}
		// we only implement this for sorting, so we only have to
		// implement this for nodes that can be on the same level
		// i.e. siblings to each other

		switch (myType) {
		case REPOGROUP:
			return CommonUtils.STRING_ASCENDING_COMPARATOR.compare(
					((RepositoryGroup) myObject).getName(),
					((RepositoryGroup) otherNode.getObject()).getName());
		case BRANCHES:
		case LOCAL:
		case REMOTETRACKING:
		case BRANCHHIERARCHY:
			return CommonUtils.STRING_ASCENDING_COMPARATOR.compare(
					myObject.toString(), otherNode.getObject().toString());
		case REMOTES:
		case ADDITIONALREFS:
		case TAGS:
		case ERROR:
		case SUBMODULES:
		case STASH:
		case WORKINGDIR:
			return 0;

		case FETCH:
		case PUSH:
		case REMOTE:
			return CommonUtils.STRING_ASCENDING_COMPARATOR
					.compare((String) myObject, (String) otherNode.getObject());
		case FILE:
		case FOLDER:
			return CommonUtils.STRING_ASCENDING_COMPARATOR
					.compare(((File) myObject).getName(),
					((File) otherNode.getObject()).getName());
		case STASHED_COMMIT:
			// ok for positive indexes < ~2 billion
			return ((StashedCommitNode) this).getIndex()
					- ((StashedCommitNode) otherNode).getIndex();
		case TAG:
		case ADDITIONALREF:
		case REF:
			return CommonUtils.REF_ASCENDING_COMPARATOR.compare((Ref) myObject,
					(Ref) otherNode.getObject());
		case REPO:
			int nameCompare = CommonUtils.STRING_ASCENDING_COMPARATOR.compare(
					getDirectoryContainingRepo((Repository) myObject).getName(),
					getDirectoryContainingRepo(
							(Repository) otherNode.getObject())
									.getName());
			if (nameCompare != 0)
				return nameCompare;
			// if the name is not unique, let's look at the whole path
			return CommonUtils.STRING_ASCENDING_COMPARATOR.compare(
					getDirectoryContainingRepo((Repository) myObject)
							.getParentFile().getPath(),
					getDirectoryContainingRepo(
							(Repository) otherNode.getObject()).getParentFile()
									.getPath());
		}
		return 0;
	}

