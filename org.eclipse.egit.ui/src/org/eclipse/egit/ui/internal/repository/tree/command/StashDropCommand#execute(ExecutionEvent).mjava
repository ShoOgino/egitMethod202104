	public Object execute(ExecutionEvent event) throws ExecutionException {
		List<StashedCommitNode> nodes = getSelectedNodes(event);
		if (nodes.isEmpty())
			return null;

		StashedCommitNode node = nodes.get(0);
		final Repository repo = node.getRepository();
		if (repo == null)
			return null;
		final int index = node.getIndex();
		if (index < 0)
			return null;
		final RevCommit commit = node.getObject();
		if (commit == null)
			return null;

		// Confirm deletion of selected tags
		final AtomicBoolean confirmed = new AtomicBoolean();
		final Shell shell = getActiveShell(event);
		shell.getDisplay().syncExec(new Runnable() {

			public void run() {
				confirmed.set(MessageDialog.openConfirm(shell,
						UIText.StashDropCommand_confirmTitle, MessageFormat
								.format(UIText.StashDropCommand_confirmMessage,
										Integer.toString(index))));
			}
		});
		if (!confirmed.get())
			return null;

		final StashDropOperation op = new StashDropOperation(repo, index);
		Job job = new Job(MessageFormat.format(
				UIText.StashDropCommand_jobTitle, commit.name())) {
			@Override
			protected IStatus run(IProgressMonitor monitor) {
				try {
					op.execute(monitor);
				} catch (CoreException e) {
					Activator.logError(MessageFormat.format(
							UIText.StashDropCommand_dropFailed, commit.name()),
							e);
				}
				return Status.OK_STATUS;
			}

			@Override
			public boolean belongsTo(Object family) {
				if (JobFamilies.STASH.equals(family))
					return true;
				return super.belongsTo(family);
			}
		};
		job.setUser(true);
		job.setRule(op.getSchedulingRule());
		job.schedule();
		return null;
	}

