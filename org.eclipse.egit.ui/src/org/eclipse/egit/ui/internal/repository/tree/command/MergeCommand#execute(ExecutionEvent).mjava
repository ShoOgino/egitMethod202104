	public Object execute(final ExecutionEvent event) throws ExecutionException {

		RepositoryTreeNode node = getSelectedNodes(event).get(0);

		final Repository repository = node.getRepository();

		if (!canMerge(repository))
			return null;

		String targetRef;
		if (node instanceof RefNode) {
			String refName = ((RefNode) node).getObject().getName();
			try {
				if (repository.getFullBranch().equals(refName))
					targetRef = null;
				else
					targetRef = refName;
			} catch (IOException e) {
				targetRef = null;
			}
		} else if (node instanceof TagNode)
			targetRef = ((TagNode) node).getObject().getName();
		else
			targetRef = null;

		final String refName;
		if (targetRef != null)
			refName = targetRef;
		else {
			MergeTargetSelectionDialog mergeTargetSelectionDialog = new MergeTargetSelectionDialog(
					getView(event).getSite().getShell(), repository);
			if (mergeTargetSelectionDialog.open() == IDialogConstants.OK_ID) {
				refName = mergeTargetSelectionDialog.getRefName();
			} else {
				return null;
			}
		}

		String jobname = NLS.bind(UIText.MergeAction_JobNameMerge, refName);
		final MergeOperation op = new MergeOperation(repository, refName);
		Job job = new Job(jobname) {
			@Override
			protected IStatus run(IProgressMonitor monitor) {
				try {
					op.execute(monitor);
				} catch (final CoreException e) {
					return e.getStatus();
				}
				return Status.OK_STATUS;
			}
		};
		job.setUser(true);
		job.addJobChangeListener(new JobChangeAdapter() {
			@Override
			public void done(IJobChangeEvent jobEvent) {
				IStatus result = jobEvent.getJob().getResult();
				if (result.getSeverity() == IStatus.CANCEL) {
					Display.getDefault().asyncExec(new Runnable() {
						public void run() {
							try {
								MessageDialog
										.openInformation(
												getActiveShell(event),
												UIText.MergeAction_MergeCanceledTitle,
												UIText.MergeAction_MergeCanceledMessage);
							} catch (ExecutionException e) {
								Activator
										.handleError(
												UIText.MergeAction_MergeCanceledMessage,
												null, true);
							}
						}
					});
				} else if (!result.isOK()) {
					Activator.handleError(result.getMessage(), result
							.getException(), true);
				} else {
					Display.getDefault().asyncExec(new Runnable() {
						public void run() {
							try {
								MessageDialog.openInformation(
										getActiveShell(event),
										UIText.MergeAction_MergeResultTitle, op
												.getResult().toString());
							} catch (ExecutionException e) {
								Activator.handleError(
										op.getResult().toString(), null, true);
							}
						}
					});
				}
			}
		});
		job.schedule();

		return null;
	}

