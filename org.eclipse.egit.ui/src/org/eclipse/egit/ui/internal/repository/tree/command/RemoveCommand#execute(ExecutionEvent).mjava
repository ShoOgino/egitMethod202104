	public Object execute(final ExecutionEvent event) throws ExecutionException {
		IWorkbenchSiteProgressService service = (IWorkbenchSiteProgressService) getView(
				event).getSite()
				.getService(IWorkbenchSiteProgressService.class);

		Job job = new Job("Remove Repositories Job") { //$NON-NLS-1$

			@Override
			protected IStatus run(IProgressMonitor monitor) {
				final List<IProject> projectsToDelete = new ArrayList<IProject>();

				monitor
						.setTaskName(UIText.RepositoriesView_DeleteRepoDeterminProjectsMessage);

				for (RepositoryNode node : getSelectedNodes(event)) {
					if (node.getRepository().isBare())
						continue;
					File workDir = node.getRepository().getWorkDir();
					final IPath wdPath = new Path(workDir.getAbsolutePath());
					for (IProject prj : ResourcesPlugin.getWorkspace()
							.getRoot().getProjects()) {
						if (monitor.isCanceled())
							return Status.OK_STATUS;
						if (wdPath.isPrefixOf(prj.getLocation())) {
							projectsToDelete.add(prj);
						}
					}
				}

				final boolean[] confirmedCanceled = new boolean[] { false,
						false };

				if (!projectsToDelete.isEmpty()) {
					Display.getDefault().syncExec(new Runnable() {

						public void run() {
							try {
								confirmedCanceled[0] = confirmProjectDeletion(
										projectsToDelete, event);
							} catch (OperationCanceledException e) {
								confirmedCanceled[1] = true;
							}
						}
					});
				}
				if (confirmedCanceled[1]) {
					// canceled: return
					return Status.OK_STATUS;
				}
				if (confirmedCanceled[0]) {
					// confirmed deletion
					IWorkspaceRunnable wsr = new IWorkspaceRunnable() {

						public void run(IProgressMonitor actMonitor)
								throws CoreException {

							for (IProject prj : projectsToDelete)
								prj.delete(false, false, actMonitor);
						}
					};

					try {
						ResourcesPlugin.getWorkspace().run(wsr,
								ResourcesPlugin.getWorkspace().getRoot(),
								IWorkspace.AVOID_UPDATE, monitor);
					} catch (CoreException e1) {
						Activator.logError(e1.getMessage(), e1);
					}
				}
				for (RepositoryNode node : getSelectedNodes(event)) {
					util.removeDir(node.getRepository().getDirectory());
				}
				Display.getDefault().asyncExec(new Runnable() {
					public void run() {
						getView(event).getCommonViewer().refresh();
					}
				});

				return Status.OK_STATUS;
			}
		};

		service.schedule(job);

		return null;
	}

