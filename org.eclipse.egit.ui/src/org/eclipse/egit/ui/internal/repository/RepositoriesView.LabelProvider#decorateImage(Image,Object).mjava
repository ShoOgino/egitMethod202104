		public Image decorateImage(final Image image, Object element) {

			RepositoryTreeNode node = (RepositoryTreeNode) element;
			switch (node.getType()) {

			case REF:
				Ref ref = (Ref) node.getObject();
				// shorten the name
				String refName = node.getRepository().shortenRefName(
						ref.getName());
				try {
					String branch = node.getBranch();
					if (refName.equals(branch)) {
						CompositeImageDescriptor cd = new CompositeImageDescriptor() {

							@Override
							protected Point getSize() {
								return new Point(image.getBounds().width, image
										.getBounds().width);
							}

							@Override
							protected void drawCompositeImage(int width,
									int height) {
								drawImage(image.getImageData(), 0, 0);
								drawImage(CHECKEDOUT_OVERLAY.getImageData(), 0,
										0);

							}
						};
						return cd.createImage();
					}
				} catch (IOException e1) {
					// simply ignore here
				}
				return image;

			case PROJ:

				File file = (File) node.getObject();

				for (IProject proj : ResourcesPlugin.getWorkspace().getRoot()
						.getProjects()) {
					if (proj.getLocation().equals(
							new Path(file.getAbsolutePath()))) {
						CompositeImageDescriptor cd = new CompositeImageDescriptor() {

							@Override
							protected Point getSize() {
								return new Point(image.getBounds().width, image
										.getBounds().width);
							}

							@Override
							protected void drawCompositeImage(int width,
									int height) {
								drawImage(image.getImageData(), 0, 0);
								drawImage(CHECKEDOUT_OVERLAY.getImageData(), 0,
										0);

							}
						};
						return cd.createImage();
					}
				}
				return image;

			default:
				return image;
			}
		}

