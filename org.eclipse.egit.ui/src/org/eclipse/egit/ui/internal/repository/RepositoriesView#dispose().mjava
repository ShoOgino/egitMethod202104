	@Override
	public void dispose() {
		if (textCellEditor != null) {
			textCellEditor.dispose();
			textCellEditor = null;
		}
		if (reactOnSelection != null) {
			reactOnSelection.removeListener(reactOnSelectionListener);
		}
		if (branchHierarchy != null) {
			branchHierarchy.removeListener(stateChangeListener);
		}
		// make sure to cancel the refresh job
		if (this.scheduledJob != null) {
			this.scheduledJob.cancel();
			this.scheduledJob = null;
		}
		refreshUiJob.cancel();

		repositoryUtil.getPreferences().removePreferenceChangeListener(
				configurationListener);

		ISelectionService srv = CommonUtils.getService(getSite(), ISelectionService.class);
		srv.removePostSelectionListener(selectionChangedListener);

		// remove RepositoryChangedListener
		unregisterRepositoryListener();
		repositories.clear();

		super.dispose();
	}

