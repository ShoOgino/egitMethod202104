	/**
	 * TODO javadoc missing
	 */
	@Override
	@SuppressWarnings("unchecked")
	public IStructuredSelection findSelection(IEditorInput anInput) {
		if (!(anInput instanceof IURIEditorInput)) {
			return null;
		}

		URI uri = ((IURIEditorInput) anInput).getURI();

		if (!uri.getScheme().equals("file")) //$NON-NLS-1$
			return null;

		File file = new File(uri.getPath());

		if (!file.exists())
			return null;

		RepositoryUtil config = Activator.getDefault().getRepositoryUtil();
		RepositoryCache cache = org.eclipse.egit.core.Activator.getDefault()
				.getRepositoryCache();
		for (String repo : config.getConfiguredRepositories()) {
			Repository repository;
			try {
				repository = cache.lookupRepository(new File(repo));
			} catch (IOException e) {
				continue;
			}
			if (repository.isBare())
				continue;
			if (file.getPath().startsWith(repository.getWorkTree().getPath())) {
				RepositoriesViewContentProvider cp = new RepositoriesViewContentProvider();

				RepositoryNode repoNode = new RepositoryNode(null, repository);
				RepositoryTreeNode result = null;

				for (Object child : cp.getChildren(repoNode)) {
					if (child instanceof WorkingDirNode) {
						result = (WorkingDirNode) child;
						break;
					}
				}

				if (result == null)
					return null;

				IPath remainingPath = new Path(file.getPath().substring(
						repository.getWorkTree().getPath().length()));
				for (String segment : remainingPath.segments()) {
					for (Object child : cp.getChildren(result)) {
						RepositoryTreeNode<File> fileNode;
						try {
							fileNode = (RepositoryTreeNode<File>) child;
						} catch (ClassCastException e) {
							return null;
						}
						if (fileNode.getObject().getName().equals(segment)) {
							result = fileNode;
							break;
						}
					}
				}

				return new StructuredSelection(result);
			}
		}
		return null;
	}

