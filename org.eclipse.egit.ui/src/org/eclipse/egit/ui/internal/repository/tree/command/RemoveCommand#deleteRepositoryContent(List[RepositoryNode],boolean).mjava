	private void deleteRepositoryContent(
			final List<RepositoryNode> selectedNodes,
			final boolean deleteWorkDir) throws IOException {
		for (RepositoryNode node : selectedNodes) {
			Repository repo = node.getRepository();
			File workTree = deleteWorkDir && !repo.isBare() ? repo.getWorkTree() : null;
			if (workTree != null) {
				File[] files = workTree.listFiles();
				if (files != null)
					for (File file : files) {
						if (isTracked(file, repo))
							FileUtils.delete(file,
									FileUtils.RECURSIVE | FileUtils.RETRY);
					}
			}
			repo.close();
			FileUtils.delete(repo.getDirectory(),
					FileUtils.RECURSIVE | FileUtils.RETRY
							| FileUtils.SKIP_MISSING);

			if (workTree != null) {
				// Delete working directory if a submodule repository and refresh
				// parent repository
				if (node.getParent() != null
						&& node.getParent().getType() == RepositoryTreeNodeType.SUBMODULES) {
					FileUtils.delete(workTree, FileUtils.RECURSIVE
							| FileUtils.RETRY | FileUtils.SKIP_MISSING);
					node.getParent().getRepository().notifyIndexChanged();
				}
				// Delete if empty working directory
				String[] files = workTree.list();
				boolean isWorkingDirEmpty = files != null && files.length == 0;
				if (isWorkingDirEmpty)
					FileUtils.delete(workTree, FileUtils.RETRY | FileUtils.SKIP_MISSING);
			}
		}
	}

