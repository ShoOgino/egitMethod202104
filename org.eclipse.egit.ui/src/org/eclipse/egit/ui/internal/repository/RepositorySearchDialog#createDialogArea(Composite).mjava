	@Override
	protected Control createDialogArea(Composite parent) {

		final IEclipsePreferences prefs = new InstanceScope().getNode(Activator
				.getPluginId());

		Composite main = new Composite(parent, SWT.NONE);
		main.setLayout(new GridLayout(4, false));
		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

		Label dirLabel = new Label(main, SWT.NONE);
		dirLabel.setText(UIText.RepositorySearchDialog_DirectoryLabel);
		final Text dir = new Text(main, SWT.BORDER);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).span(2, 1).hint(300,
				SWT.DEFAULT).applyTo(dir);

		String initialPath = prefs.get(PREF_PATH, ResourcesPlugin
				.getWorkspace().getRoot().getLocation().toOSString());

		dir.setText(initialPath);

		Button browse = new Button(main, SWT.PUSH);
		browse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false,
				1, 1));
		browse.setText(UIText.RepositorySearchDialog_BrowseButton);
		browse.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				DirectoryDialog dd = new DirectoryDialog(getShell());
				dd.setFilterPath(dir.getText());
				String directory = dd.open();
				if (directory != null) {
					dir.setText(directory);
					prefs.put(PREF_PATH, directory);
					try {
						prefs.flush();
					} catch (BackingStoreException e1) {
						// ignore here
					}
				}
			}

		});

		// we fill the room under the "Directory" label
		new Label(main, SWT.NONE);

		final Button btnLookForNested = new Button(main, SWT.CHECK);
		btnLookForNested.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER,
				false, false, 2, 1));
		btnLookForNested
				.setSelection(prefs.getBoolean(PREF_DEEP_SEARCH, false));
		btnLookForNested
				.setText(UIText.RepositorySearchDialog_DeepSearch_button);

		btnLookForNested.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				prefs.putBoolean(PREF_DEEP_SEARCH, btnLookForNested
						.getSelection());
				try {
					prefs.flush();
				} catch (BackingStoreException e1) {
					// ignore
				}
			}

		});

		Button search = new Button(main, SWT.PUSH);
		search.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false,
				1, 1));
		search.setText(UIText.RepositorySearchDialog_SearchButton);

		tv = CheckboxTableViewer.newCheckList(main, SWT.NONE);
		tab = tv.getTable();
		tab.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1));
		tab.setEnabled(false);

		btnToggleSelect = new Button(main, SWT.NONE);
		btnToggleSelect.setLayoutData(new GridData(SWT.FILL, SWT.TOP, false,
				false, 1, 1));
		btnToggleSelect
				.setText(UIText.RepositorySearchDialog_ToggleSelection_button);
		btnToggleSelect.setEnabled(false);
		btnToggleSelect.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {

				for (int i = 0; i < tab.getItemCount(); i++) {
					if (!existingRepositoryDirs.contains(tv.getElementAt(i)))
						tv.setChecked(tv.getElementAt(i), !tv.getChecked(tv
								.getElementAt(i)));
				}
				getButton(IDialogConstants.OK_ID).setEnabled(
						tv.getCheckedElements().length > 0);
			}
		});

		tv.addCheckStateListener(new ICheckStateListener() {

			public void checkStateChanged(CheckStateChangedEvent event) {
				if (existingRepositoryDirs.contains(event.getElement()))
					event.getCheckable().setChecked(event.getElement(), false);
				getButton(IDialogConstants.OK_ID).setEnabled(
						tv.getCheckedElements().length > 0);
			}
		});

		tv.setContentProvider(new ContentProvider());
		tv.setLabelProvider(new LabelProvider());

		search.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				final TreeSet<String> directories = new TreeSet<String>();
				final File file = new File(dir.getText());
				final boolean lookForNested = btnLookForNested.getSelection();
				if (file.exists()) {
					try {
						prefs.put(PREF_PATH, file.getCanonicalPath());
						try {
							prefs.flush();
						} catch (BackingStoreException e1) {
							// ignore here
						}
					} catch (IOException e2) {
						// ignore
					}

					IRunnableWithProgress action = new IRunnableWithProgress() {

						public void run(IProgressMonitor monitor)
								throws InvocationTargetException,
								InterruptedException {

							try {
								findGitDirsRecursive(file, directories,
										monitor, lookForNested);
							} catch (Exception ex) {
								Activator.getDefault().getLog().log(
										new Status(IStatus.ERROR, Activator
												.getPluginId(),
												ex.getMessage(), ex));
							}
						}
					};
					try {
						ProgressMonitorDialog pd = new ProgressMonitorDialog(
								getShell());
						pd
								.getProgressMonitor()
								.setTaskName(
										UIText.RepositorySearchDialog_ScanningForRepositories_message);
						pd.run(true, true, action);

					} catch (InvocationTargetException e1) {
						MessageDialog.openError(getShell(),
								UIText.RepositorySearchDialog_ErrorHeader, e1
										.getCause().getMessage());
					} catch (InterruptedException e1) {
						// ignore
					}

					boolean foundNew = false;

					for (String foundDir : directories) {
						if (!existingRepositoryDirs.contains(foundDir)) {
							foundNew = true;
							break;
						}
					}

					btnToggleSelect.setEnabled(foundNew);
					tab.setEnabled(directories.size() > 0);
					tv.setInput(directories);
				}
			}

		});

		return main;
	}

