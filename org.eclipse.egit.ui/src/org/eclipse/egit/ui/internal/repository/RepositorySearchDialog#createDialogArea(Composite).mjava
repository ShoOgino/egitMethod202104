	@Override
	protected Control createDialogArea(Composite parent) {
		super.createDialogArea(parent);
		setTitle(UIText.RepositorySearchDialog_searchRepositories);
		setMessage(UIText.RepositorySearchDialog_searchRepositoriesMessage);
		final IEclipsePreferences prefs = new InstanceScope().getNode(Activator
				.getPluginId());

		Composite main = new Composite(parent, SWT.NONE);
		main.setLayout(new GridLayout(4, false));
		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

		Label dirLabel = new Label(main, SWT.NONE);
		dirLabel.setText(UIText.RepositorySearchDialog_directory);
		final Text dir = new Text(main, SWT.BORDER);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).span(2, 1).hint(300,
				SWT.DEFAULT).applyTo(dir);

		String initialPath = prefs.get(PREF_PATH, ResourcesPlugin
				.getWorkspace().getRoot().getLocation().toOSString());

		dir.setText(initialPath);

		Button browse = new Button(main, SWT.PUSH);
		browse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false,
				1, 1));
		browse.setText(UIText.RepositorySearchDialog_browse);
		browse.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				DirectoryDialog dd = new DirectoryDialog(getShell());
				dd.setFilterPath(dir.getText());
				String directory = dd.open();
				if (directory != null) {
					dir.setText(directory);
					prefs.put(PREF_PATH, directory);
					try {
						prefs.flush();
					} catch (BackingStoreException e1) {
						// ignore here
					}
				}
			}

		});

		fTree = new FilteredCheckboxTree(main, null, SWT.BORDER);
		fTreeViewer = fTree.getCheckboxTreeViewer();
		GridDataFactory.fillDefaults().grab(true, true).span(4, 1).minSize(0, 300).applyTo(fTree);
		fTree.setEnabled(false);

		final Button lookForNestedButton = new Button(main, SWT.CHECK);
		lookForNestedButton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER,
				false, false, 2, 1));
		lookForNestedButton
				.setSelection(prefs.getBoolean(PREF_DEEP_SEARCH, false));
		lookForNestedButton
				.setText(UIText.RepositorySearchDialog_DeepSearch_button);

		lookForNestedButton.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				prefs.putBoolean(PREF_DEEP_SEARCH, lookForNestedButton
						.getSelection());
				try {
					prefs.flush();
				} catch (BackingStoreException e1) {
					// ignore
				}
			}

		});


		fSelectAllButton = new Button(main, SWT.NONE);
		fSelectAllButton.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false,
				false, 1, 1));
		fSelectAllButton
				.setText(UIText.RepositorySearchDialog_SelectAll_button);
		fSelectAllButton.setEnabled(false);
		fSelectAllButton.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				fTreeViewer.setAllChecked(true);
				getButton(IDialogConstants.OK_ID).setEnabled(
						fTreeViewer.getCheckedElements().length > 0);
			}
		});

		fDeselectAllButton = new Button(main, SWT.NONE);
		fDeselectAllButton.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false,
				false, 1, 1));
		fDeselectAllButton
				.setText(UIText.RepositorySearchDialog_DeselectAll_button);
		fDeselectAllButton.setEnabled(false);
		fDeselectAllButton.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				fTreeViewer.setAllChecked(false);
				getButton(IDialogConstants.OK_ID).setEnabled(
						fTreeViewer.getCheckedElements().length > 0);
			}
		});

		// TODO this isn't the most optimal way of handling this... ideally we should have some type of delay
		// if we could use databinding an observeDelayedValue would totally work here
		dir.addModifyListener(new ModifyListener() {

			public void modifyText(ModifyEvent e) {
				// perform the search...
				final TreeSet<String> directories = new TreeSet<String>();
				final File file = new File(dir.getText());
				final boolean lookForNested = lookForNestedButton.getSelection();
				if (file.exists()) {
					try {
						prefs.put(PREF_PATH, file.getCanonicalPath());
						try {
							prefs.flush();
						} catch (BackingStoreException e1) {
							// ignore here
						}
					} catch (IOException e2) {
						// ignore
					}

					IRunnableWithProgress action = new IRunnableWithProgress() {

						public void run(IProgressMonitor monitor)
								throws InvocationTargetException,
								InterruptedException {

							try {
								findGitDirsRecursive(file, directories,
										monitor, lookForNested);
							} catch (Exception ex) {
								Activator.getDefault().getLog().log(
										new Status(IStatus.ERROR, Activator
												.getPluginId(),
												ex.getMessage(), ex));
							}
						}
					};
					try {
						ProgressMonitorDialog pd = new ProgressMonitorDialog(
								getShell());
						pd
								.getProgressMonitor()
								.setTaskName(
										UIText.RepositorySearchDialog_ScanningForRepositories_message);
						pd.run(true, true, action);

					} catch (InvocationTargetException e1) {
						org.eclipse.egit.ui.Activator.handleError(
								UIText.RepositorySearchDialog_errorOccurred,
								e1, true);
					} catch (InterruptedException e1) {
						// ignore
					}

					boolean foundNew = false;

					for (String foundDir : directories) {
						if (!fExistingDirectories.contains(foundDir)) {
							foundNew = true;
							break;
						}
					}

					fSelectAllButton.setEnabled(foundNew);
					fDeselectAllButton.setEnabled(foundNew);
					fTree.setEnabled(directories.size() > 0);
					fTreeViewer.setInput(directories);
				}
			}
		});

		fTreeViewer.addCheckStateListener(new ICheckStateListener() {

			public void checkStateChanged(CheckStateChangedEvent event) {
				if (fExistingDirectories.contains(event.getElement()))
					event.getCheckable().setChecked(event.getElement(), false);
				getButton(IDialogConstants.OK_ID).setEnabled(
						fTreeViewer.getCheckedElements().length > 0);
			}
		});

		fTreeViewer.setContentProvider(new ContentProvider());
		fTreeViewer.setLabelProvider(new RepositoryLabelProvider());

		return main;
	}

