	@Override
	public boolean performDrop(Object data) {
		if (!this.rebaseInteractiveView.isDragAndDropEnabled())
			return false;

		if (!(data instanceof IStructuredSelection))
			return false;

		final IStructuredSelection structuredSelection = (IStructuredSelection) data;
		List selectionList = structuredSelection.toList();

		if (selectionList.contains(getCurrentTarget()))
			return false;

		List<RebaseInteractivePlan.PlanElement> sourceElements = new ArrayList<RebaseInteractivePlan.PlanElement>();
		for (Object obj : selectionList) {
			if (obj instanceof RebaseInteractivePlan.PlanElement)
				sourceElements.add((RebaseInteractivePlan.PlanElement) obj);
		}

		if (sourceElements.isEmpty())
			return false;

		Object targetObj = getCurrentTarget();
		if (!(targetObj instanceof RebaseInteractivePlan.PlanElement))
			return false;
		RebaseInteractivePlan.PlanElement targetElement = (RebaseInteractivePlan.PlanElement) targetObj;

		boolean before = false;
		switch (getCurrentLocation()) {
		case ViewerDropAdapter.LOCATION_BEFORE:
			before = true;
			break;
		case ViewerDropAdapter.LOCATION_NONE:
			return false;
		}

		if (!before)
			Collections.reverse(sourceElements);

		if (RebaseInteractivePreferences.isOrderReversed())
			before = !before;

		for (RebaseInteractivePlan.PlanElement element : sourceElements)
			rebaseInteractiveView.getCurrentPlan().moveTodoEntry(element,
					targetElement, before);

		return true;
	}

