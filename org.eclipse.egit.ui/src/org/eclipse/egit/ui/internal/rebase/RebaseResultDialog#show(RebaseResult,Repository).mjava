	/**
	 * @param result
	 *            the result to show
	 * @param repository
	 */
	public static void show(final RebaseResult result,
			final Repository repository) {
		switch (result.getStatus()) {
		case ABORTED:
		case INTERACTIVE_PREPARED:
			// Don't show the dialog
			return;
		case CONFLICTS:
			PlatformUI.getWorkbench().getDisplay().asyncExec(() -> {
				Shell shell = PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getShell();
				MessageDialog dialog = new CleanupUncomittedChangesDialog(shell,
						UIText.BranchResultDialog_CheckoutConflictsTitle,
						UIText.AbstractRebaseCommandHandler_cleanupDialog_text,
						repository, result.getConflicts(), false);
				dialog.open();
			});
			return;
		case STOPPED:
		case STASH_APPLY_CONFLICTS:
			// Show the dialog
			break;
		default:
			if (!Activator.getDefault().getPreferenceStore()
					.getBoolean(UIPreferences.SHOW_REBASE_CONFIRM)) {
				return;
			}
			break;
		}
		PlatformUI.getWorkbench().getDisplay().asyncExec(() -> {
			Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
					.getShell();
			new RebaseResultDialog(shell, repository, result).open();
		});
	}

