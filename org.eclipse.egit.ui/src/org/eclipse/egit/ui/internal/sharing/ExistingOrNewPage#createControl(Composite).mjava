	public void createControl(Composite parent) {
		Group g = new Group(parent, SWT.NONE);
		g.setLayout(new GridLayout(3,false));
		g.setLayoutData(GridDataFactory.fillDefaults().grab(true, true).create());
		tree = new Tree(g, SWT.BORDER|SWT.MULTI|SWT.FULL_SELECTION);
		tree.setHeaderVisible(true);
		tree.setLayout(new GridLayout());
		tree.setLayoutData(GridDataFactory.fillDefaults().grab(true, true).span(3,1).create());
		tree.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent e) {
				TreeItem t = (TreeItem) e.item;
				for(TreeItem ti : t.getItems())
					tree.deselect(ti);
				if (t.getParentItem() != null) {
					tree.deselect(t.getParentItem());
					for(TreeItem ti : t.getParentItem().getItems())
						if (ti != t)
							tree.deselect(ti);
				}
				Set<IProject> projects = new HashSet<IProject>();
				for (TreeItem treeItem : tree.getSelection()) {
					if (treeItem.getData() ==  null && treeItem.getParentItem() != null) {
						treeItem = treeItem.getParentItem();
					}
					final IProject project = (IProject) treeItem.getData();
					if (projects.contains(project))
							tree.deselect(treeItem);
					projects.add(project);
				}
			}
		});
		TreeColumn c1 = new TreeColumn(tree,SWT.NONE);
		c1.setText(UIText.ExistingOrNewPage_HeaderProject);
		c1.setWidth(100);
		TreeColumn c2 = new TreeColumn(tree,SWT.NONE);
		c2.setText(UIText.ExistingOrNewPage_HeaderPath);
		c2.setWidth(400);
		TreeColumn c3 = new TreeColumn(tree,SWT.NONE);
		c3.setText(UIText.ExistingOrNewPage_HeaderRepository);
		c3.setWidth(200);
		for (IProject project : myWizard.projects) {
			TreeItem treeItem = new TreeItem(tree, SWT.NONE);
			treeItem.setData(project);
			treeItem.setText(0, project.getName());
			treeItem.setText(1, project.getLocation().toOSString());
			RepositoryFinder repositoryFinder = new RepositoryFinder(project);
			Collection<RepositoryMapping> mappings;
			try {
				mappings = repositoryFinder.find(new NullProgressMonitor());
				Iterator<RepositoryMapping> mi = mappings.iterator();
				RepositoryMapping m = mi.hasNext() ? mi.next() : null;
				if (m == null) {
					// no mapping found, enable repository creation
					treeItem.setText(2, ""); //$NON-NLS-1$
				} else {
					// at least one mapping found
					fillTreeItemWithGitDirectory(m, treeItem, false);
				}

				while (mi.hasNext()) {	// fill in additional mappings
					m = mi.next();
					TreeItem treeItem2 = new TreeItem(treeItem, SWT.NONE);
					treeItem2.setData(m.getContainer().getProject());
					fillTreeItemWithGitDirectory(m, treeItem2, true);
				}
			} catch (CoreException e) {
				TreeItem treeItem2 = new TreeItem(treeItem, SWT.BOLD|SWT.ITALIC);
				treeItem2.setText(e.getMessage());
			}
		}

		button = new Button(g, SWT.PUSH);
		button.setLayoutData(GridDataFactory.fillDefaults().create());
		button.setText(UIText.ExistingOrNewPage_CreateButton);
		button.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				File gitDir = new File(repositoryToCreate.getText(),Constants.DOT_GIT);
				try {
					Repository repository = new Repository(gitDir);
					repository.create();
					for (IProject project : getProjects().keySet()) {
						// If we don't refresh the project directories right
						// now we won't later know that a .git directory
						// exists within it and we won't mark the .git
						// directory as a team-private member. Failure
						// to do so might allow someone to delete
						// the .git directory without us stopping them.
						// (Half lie, we should optimize so we do not
						// refresh when the .git is not within the project)
						//
						if (!gitDir.toString().contains("..")) //$NON-NLS-1$
							project.refreshLocal(IResource.DEPTH_ONE,
									new NullProgressMonitor());
					}
				} catch (IOException e1) {
					MessageDialog.openError(getShell(), UIText.ExistingOrNewPage_ErrorFailedToCreateRepository, gitDir.toString() + ":\n" + e1.getMessage()); //$NON-NLS-1$
					Activator.logError("Failed to create repository at " + gitDir, e1); //$NON-NLS-1$
				} catch (CoreException e2) {
					Activator.logError(UIText.ExistingOrNewPage_ErrorFailedToRefreshRepository + gitDir, e2);
				}
				for (TreeItem ti : tree.getSelection()) {
					ti.setText(2, gitDir.toString());
				}
				updateCreateOptions();
				getContainer().updateButtons();
			}
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
		repositoryToCreate = new Text(g, SWT.SINGLE | SWT.BORDER);
		repositoryToCreate.setLayoutData(GridDataFactory.fillDefaults().grab(true, false).span(1,1).create());
		repositoryToCreate.addListener(SWT.Modify, new Listener() {
			public void handleEvent(Event e) {
				if (e.text == null)
					return;
				IPath fromOSString = Path.fromOSString(e.text);
				button.setEnabled(minumumPath
						.matchingFirstSegments(fromOSString) == fromOSString
						.segmentCount());
			}
		});
		dotGitSegment = new Text(g ,SWT.NONE);
		dotGitSegment.setEnabled(false);
		dotGitSegment.setEditable(false);
		dotGitSegment.setText(File.separatorChar + Constants.DOT_GIT);
		dotGitSegment.setLayoutData(GridDataFactory.fillDefaults().align(SWT.LEFT, SWT.CENTER).create());

		tree.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				updateCreateOptions();
			}
			public void widgetDefaultSelected(SelectionEvent e) {
				// Empty
			}
		});
		updateCreateOptions();
		setControl(g);
	}

