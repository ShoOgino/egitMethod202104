	/**
	 * Creates a decoratable resource mapping (used for e.g. working sets)
	 *
	 * @param mapping the resource mapping to decorate
	 * @throws IOException
	 */
	public DecoratableResourceMapping(ResourceMapping mapping) throws IOException {
		super(null); // no resource ...

		this.mapping = mapping;
		IProject[] projects = mapping.getProjects();

		if(projects == null || projects.length == 0)
			return;

		// collect repositories to allow decoration of mappings (bug 369969)
		Set<Repository> repositories = new HashSet<Repository>(projects.length);

		// we could use DecoratableResourceAdapter for each project, but that would be too much overhead,
		// as we need only very little information at all...
		for(IProject prj : projects) {
			RepositoryMapping repoMapping = RepositoryMapping.getMapping(prj);
			if(repoMapping == null)
				continue;

			IndexDiffData diffData = GitLightweightDecorator.getIndexDiffDataOrNull(prj);
			if(diffData == null)
				continue;

			// at least one contained resource is tracked for sure here.
			tracked = true;

			Repository repository = repoMapping.getRepository();
			String repoRelative = makeRepoRelative(repository, prj) + "/"; //$NON-NLS-1$

			Set<String> modified = diffData.getModified();
			Set<String> conflicting = diffData.getConflicting();

			// attention - never reset these to false (so don't use the return value of the methods!)
			if(containsPrefix(modified, repoRelative))
				dirty = true;

			if(containsPrefix(conflicting, repoRelative))
				conflicts = true;

			// collect repository
			repositories.add(repository);
		}

		// collect repository info for decoration (bug 369969)
		if(repositories.size() == 1) {
			// single repo, single branch --> [repo branch]
			Repository repository = repositories.iterator().next();
			repositoryName = DecoratableResourceHelper
					.getRepositoryName(repository);
			branch = DecoratableResourceHelper.getShortBranch(repository);
			branchStatus = DecoratableResourceHelper
					.getBranchStatus(repository);
		} else if(repositories.size() > 1) {
			// collect branch names but skip branch status (doesn't make sense)
			Set<String> branches = new HashSet<String>(2);
			for (Repository repository : repositories) {
				branches.add(DecoratableResourceHelper
						.getShortBranch(repository));
			    if (branches.size() > 1)
			        break;
			}

			// multiple repos, one branch --> [* branch]
			if (branches.size() == 1) {
				repositoryName = MULTIPLE;
				branch = branches.iterator().next();
			}

			// we set nothing in the following case:
			//   multiple repos, multiple branches
		}
	}

