	/**
	 * Retrieves a label for the {@link BranchTrackingStatus} of the current
	 * HEAD.
	 *
	 * @param repository
	 *            to get the status label for
	 * @return the label, or {@code null}Â if none
	 */
	public String getBranchStatus(Repository repository) {
		String label = branchStateLabels
				.computeIfAbsent(repository.getDirectory(), dir -> {
					String branchName = getFullBranchName(repository);
					if (branchName == null) {
						return ""; //$NON-NLS-1$
					}
					BranchTrackingStatus status = null;
					try {
						status = BranchTrackingStatus.of(repository,
								branchName);
					} catch (IOException e) {
						// Ignore here; return null below.
					}
					if (status == null) {
						return ""; //$NON-NLS-1$
					}
					if (status.getAheadCount() == 0
							&& status.getBehindCount() == 0) {
						return ""; //$NON-NLS-1$
					}
					return GitLabels.formatBranchTrackingStatus(status);
				});
		return StringUtils.isEmptyOrNull(label) ? null : label;
	}

