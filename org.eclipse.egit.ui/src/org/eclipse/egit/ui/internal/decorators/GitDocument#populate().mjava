	void populate() throws IOException {
		if (GitTraceLocation.QUICKDIFF.isActive())
			GitTraceLocation.getTrace().traceEntry(
					GitTraceLocation.QUICKDIFF.getLocation(), resource);

		// Do not populate if already disposed
		if (disposed)
			return;

		RepositoryMapping mapping = RepositoryMapping.getMapping(resource);
		if (mapping == null) {
			setResolved(null, null, null, ""); //$NON-NLS-1$
			return;
		}
		final String gitPath = mapping.getRepoRelativePath(resource);
		if (gitPath == null) {
			setResolved(null, null, null, ""); //$NON-NLS-1$
			return;
		}
		final Repository repository = mapping.getRepository();
		String baseline = GitQuickDiffProvider.baseline.get(repository);
		if (baseline == null)
			baseline = Constants.HEAD;
		ObjectId commitId = repository.resolve(baseline);
		if (commitId != null) {
			if (commitId.equals(lastCommit)) {
				if (GitTraceLocation.QUICKDIFF.isActive())
					GitTraceLocation.getTrace().trace(
							GitTraceLocation.QUICKDIFF.getLocation(),
							"(GitDocument) already resolved"); //$NON-NLS-1$
				return;
			}
		} else {
			if (repository.exactRef(Constants.HEAD) == null) {
				// Complain only if not an unborn branch
				String msg = NLS.bind(UIText.GitDocument_errorResolveQuickdiff,
						new Object[] { baseline, resource, repository });
				Activator.logError(msg, new Throwable());
			}
			setResolved(null, null, null, ""); //$NON-NLS-1$
			return;
		}

		RevCommit baselineCommit;
		String oldPath = gitPath;

		try (RevWalk rw = new RevWalk(repository);
				ObjectReader reader = repository.newObjectReader()) {
			baselineCommit = rw.parseCommit(commitId);
			DiffConfig diffConfig = repository.getConfig().get(DiffConfig.KEY);
			if (diffConfig.getRenameDetectionType() != RenameDetectionType.FALSE) {
				TreeWalk walk = new TreeWalk(repository);
				CanonicalTreeParser baseLineIterator = new CanonicalTreeParser();
				baseLineIterator.reset(reader, baselineCommit.getTree());
				walk.addTree(baseLineIterator);
				walk.addTree(new DirCacheIterator(repository.readDirCache()));
				List<DiffEntry> diffs = DiffEntry.scan(walk, true);
				RenameDetector renameDetector = new RenameDetector(repository);
				renameDetector.addAll(diffs);
				List<DiffEntry> renames = renameDetector.compute();
				for (DiffEntry e : renames) {
					if (e.getNewPath().equals(gitPath)) {
						oldPath = e.getOldPath();
						break;
					}
				}
			}
		} catch (IOException err) {
			String msg = NLS.bind(UIText.GitDocument_errorLoadCommit,
					new Object[] { commitId, baseline, resource, repository });
			Activator.logError(msg, err);
			setResolved(null, null, null, ""); //$NON-NLS-1$
			return;
		}
		RevTree treeId = baselineCommit.getTree();
		if (treeId.equals(lastTree)) {
			if (GitTraceLocation.QUICKDIFF.isActive())
				GitTraceLocation.getTrace().trace(
						GitTraceLocation.QUICKDIFF.getLocation(),
						"(GitDocument) already resolved"); //$NON-NLS-1$
			return;
		}

		try (TreeWalk tw = TreeWalk.forPath(repository, oldPath, treeId)) {
			if (tw == null) {
				if (GitTraceLocation.QUICKDIFF.isActive())
					GitTraceLocation
							.getTrace()
							.trace(
									GitTraceLocation.QUICKDIFF.getLocation(),
									"(GitDocument) resource " + resource + " not found in " + treeId + " in " + repository + ", baseline=" + baseline); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
				setResolved(null, null, null, ""); //$NON-NLS-1$
				return;
			}
			ObjectId id = tw.getObjectId(0);
			if (id.equals(ObjectId.zeroId())) {
				setResolved(null, null, null, ""); //$NON-NLS-1$
				String msg = NLS
						.bind(UIText.GitDocument_errorLoadTree, new Object[] {
								treeId.getName(), baseline, resource, repository });
				Activator.logError(msg, new Throwable());
				setResolved(null, null, null, ""); //$NON-NLS-1$
				return;
			}
			if (!id.equals(lastBlob)) {
				if (GitTraceLocation.QUICKDIFF.isActive())
					GitTraceLocation.getTrace().trace(
							GitTraceLocation.QUICKDIFF.getLocation(),
							"(GitDocument) compareTo: " + baseline); //$NON-NLS-1$
				ObjectLoader loader = LfsFactory.getInstance().applySmudgeFilter(
						repository, repository.open(id, Constants.OBJ_BLOB),
						tw.getAttributes().get(Constants.ATTR_DIFF));
				byte[] bytes = loader.getBytes();
				String charset;
				charset = CompareCoreUtils.getResourceEncoding(resource);
				// Finally we could consider validating the content with respect
				// to the content. We don't do that here.
				String s = new String(bytes, charset);
				setResolved(commitId, treeId, id, s);
				if (GitTraceLocation.QUICKDIFF.isActive())
					GitTraceLocation
							.getTrace()
							.trace(GitTraceLocation.QUICKDIFF.getLocation(),
									"(GitDocument) has reference doc, size=" + s.length() + " bytes"); //$NON-NLS-1$ //$NON-NLS-2$
			} else {
				if (GitTraceLocation.QUICKDIFF.isActive())
					GitTraceLocation.getTrace().trace(
							GitTraceLocation.QUICKDIFF.getLocation(),
							"(GitDocument) already resolved"); //$NON-NLS-1$
			}
		} finally {
			if (GitTraceLocation.QUICKDIFF.isActive()) {
				GitTraceLocation.getTrace().traceExit(
						GitTraceLocation.QUICKDIFF.getLocation());
			}
		}

	}

