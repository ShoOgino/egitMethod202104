	/**
	 * Retrieves a label for the current HEAD of a {@link Repository}.
	 *
	 * @param repository
	 *            to get the label of the current HEAD of
	 * @return the label
	 */
	public String getCurrentBranchLabel(Repository repository) {
		return branchLabels.computeIfAbsent(repository.getDirectory(), dir -> {
			return UnitOfWork.get(repository, () -> {
				Ref head = getHeadRef(repository);
				if (head == null) {
					return CoreText.RepositoryUtil_noHead;
				}
				if (head.isSymbolic()) {
					String branchName = getFullBranchName(repository);
					return Repository.shortenRefName(branchName);
				}
				ObjectId objectId = head.getObjectId();
				if (objectId == null) {
					return CoreText.RepositoryUtil_noHead;
				}
				String ref = RepositoryUtil.getInstance()
						.mapCommitToRef(repository, objectId.name(), false);
				if (ref != null) {
					return Repository.shortenRefName(ref) + ' '
							+ objectId.abbreviate(7).name();
				} else {
					return objectId.abbreviate(7).name();
				}
			});
		});
	}

