	/**
	 * This method should only be called by the decorator thread.
	 *
	 * @see org.eclipse.jface.viewers.ILightweightLabelDecorator#decorate(java.lang.Object,
	 *      org.eclipse.jface.viewers.IDecoration)
	 */
	public void decorate(Object element, IDecoration decoration) {

		final IResource resource = getResource(element);
		if (resource == null)
			return;

		// Don't decorate if the workbench is not running
		if (!PlatformUI.isWorkbenchRunning())
			return;

		// Don't decorate if UI plugin is not running
		final Activator activator = Activator.getDefault();
		if (activator == null)
			return;

		// Don't decorate the workspace root
		if (resource.getType() == IResource.ROOT)
			return;

		// Don't decorate non-existing resources
		if (!resource.exists() && !resource.isPhantom())
			return;

		try {
			final Boolean notDecoratable = (Boolean) resource
					.getSessionProperty(NOT_DECORATABLE_KEY);
			if (notDecoratable != null && notDecoratable.equals(Boolean.TRUE))
				// Resource is not decoratable, do not try again
				return;

			final IDecoratableResource decoratableResource = (IDecoratableResource) resource
					.getSessionProperty(DECORATABLE_RESOURCE_KEY);
			boolean decorated = false;
			if (decoratableResource != null) {
				// Use stored decoratable resource (even when it is outdated)
				final DecorationHelper helper = new DecorationHelper(
						activator.getPreferenceStore());
				helper.decorate(decoration, decoratableResource);
				decorated = true;
			}

			final Long refreshed = (Long) resource
					.getSessionProperty(REFRESHED_KEY);
			if (refreshed != null) {
				final Long refresh = (Long) resource.getWorkspace().getRoot()
						.getSessionProperty(REFRESH_KEY);
				if (refresh == null
						|| refresh.longValue() <= refreshed.longValue()) {
					// Stored decoratable resource is up-to-date
					if (decorated)
						return;
				}
			}
		} catch (CoreException e) {
			handleException(resource, e);
			return;
		}

		// Don't decorate ignored resources (e.g. bin folder content)
		if (Team.isIgnoredHint(resource))
			return;

		// Make sure we're dealing with a project under Git revision control
		final RepositoryMapping mapping = RepositoryMapping
				.getMapping(resource);
		if (mapping == null)
			return;

		// Cannot decorate linked resources
		if (mapping.getRepoRelativePath(resource) == null)
			return;

		// No (up-to-date) stored decoratable resource is available, thus
		// decoration request is added to the queue
		GitDecoratorJob.getJobForRepository(
				mapping.getGitDirAbsolutePath().toString())
				.addDecorationRequest(element);
	}

