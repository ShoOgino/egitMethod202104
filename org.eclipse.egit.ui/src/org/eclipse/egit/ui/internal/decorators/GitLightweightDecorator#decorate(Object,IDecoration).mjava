	/**
	 * This method should only be called by the decorator thread.
	 *
	 * @see org.eclipse.jface.viewers.ILightweightLabelDecorator#decorate(java.lang.Object,
	 *      org.eclipse.jface.viewers.IDecoration)
	 */
	public void decorate(Object element, IDecoration decoration) {

		final IResource resource = getResource(element);
		if (resource == null)
			return;

		// Don't decorate if the workbench is not running
		if (!PlatformUI.isWorkbenchRunning())
			return;

		// Don't decorate if UI plugin is not running
		final Activator activator = Activator.getDefault();
		if (activator == null)
			return;

		// Don't decorate the workspace root
		if (resource.getType() == IResource.ROOT)
			return;

		// Don't decorate non-existing resources
		if (!resource.exists() && !resource.isPhantom())
			return;

		// Don't decorate ignored resources (e.g. bin folder content)
		if (Team.isIgnoredHint(resource))
			return;

		// Make sure we're dealing with a project under Git revision control
		final RepositoryMapping mapping = RepositoryMapping
				.getMapping(resource);
		if (mapping == null)
			return;

		// Cannot decorate linked resources
		if (mapping.getRepoRelativePath(resource) == null)
			return;

		try {
			IDecoratableResource decoratableResource = null;
			final DecorationHelper helper = new DecorationHelper(
					activator.getPreferenceStore());

			final Long refreshed = (Long) resource
					.getSessionProperty(REFRESHED_KEY);
			if (refreshed != null) {
				// Stored decoratable resource is available
				final IWorkspaceRoot root = resource.getWorkspace().getRoot();
				final Long refresh = (Long) root
						.getSessionProperty(REFRESH_KEY);
				if (refresh == null
						|| refresh.longValue() < refreshed.longValue()) {
					// Stored decoratable resource is up-to-date
					decoratableResource = (IDecoratableResource) resource
							.getSessionProperty(DECORATABLE_RESOURCE_KEY);
					if (decoratableResource != null) {
						// Use stored decoratable resource
						helper.decorate(decoration, decoratableResource);
						return;
					}
				}
			}

			// No (up-to-date) stored decoratable resource is available
			decoratableResource = new DecoratableResourceAdapter(resource);
			helper.decorate(decoration, decoratableResource);

			// Store decoratable resource in session
			resource.setSessionProperty(DECORATABLE_RESOURCE_KEY,
					decoratableResource);
			// Set (new) 'refreshed' timestamp
			resource.setSessionProperty(REFRESHED_KEY,
					Long.valueOf(System.currentTimeMillis()));
		} catch (IOException e) {
			handleException(resource, new CoreException(new Status(
					IStatus.ERROR, Activator.getPluginId(), e.getMessage(), e)));
		} catch (CoreException e) {
			handleException(resource, e);
		}
	}

