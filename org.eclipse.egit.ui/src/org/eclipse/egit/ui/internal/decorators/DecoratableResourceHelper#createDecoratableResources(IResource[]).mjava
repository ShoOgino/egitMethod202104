	/**
	 * Creates a list of decoratable resources for the given list of resources
	 *
	 * @param resources
	 *            the list of resources to be decorated
	 * @return the list of decoratable resources
	 * @throws IOException
	 */
	public static IDecoratableResource[] createDecoratableResources(
			final IResource[] resources) throws IOException {
		if (resources == null)
			return null;

		// Use first (available) resource to get repository mapping
		int i = 0;
		while (resources[i] == null) {
			i++;
			if (i >= resources.length)
				// Array only contains nulls
				return null;
		}

		final IDecoratableResource[] decoratableResources = new IDecoratableResource[resources.length];

		for (i = 0; i < resources.length; i++) {
			final IResource resource = resources[i];
			if (resource != null && resource.getProject().isOpen()) {
				// Decorate folder and project node separately
				try {
					decoratableResources[i] = new DecoratableResourceAdapter(
							resource);
				} catch (IOException e) {
					// Ignore - decoratableResources[i] is null
				}
			}
		}

		return decoratableResources;
	}

