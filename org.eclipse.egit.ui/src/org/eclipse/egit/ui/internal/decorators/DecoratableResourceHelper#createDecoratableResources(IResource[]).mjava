	static IDecoratableResource[] createDecoratableResources(
			final IResource[] resources) throws IOException {
		// Use first (available) resource to get repository mapping
		int i = 0;
		while (resources[i] == null) {
			i++;
			if (i >= resources.length)
				// Array only contains nulls
				return null;
		}
		final RepositoryMapping mapping = RepositoryMapping
				.getMapping(resources[i]);

		final IDecoratableResource[] decoratableResources = new IDecoratableResource[resources.length];

		ArrayList<String> resourcePaths = new ArrayList<String>();
		for (i = 0; i < resources.length; i++) {
			final IResource resource = resources[i];
			if (resource != null && resource.getProject().isOpen()) {
				switch (resource.getType()) {
				case IResource.FILE:
					// Add file path to list used for bulk decoration
					resourcePaths.add(mapping.getRepoRelativePath(resource));
					break;
				case IResource.FOLDER:
				case IResource.PROJECT:
					// Decorate folder and project node separately
					try {
						decoratableResources[i] = new DecoratableResourceAdapter(
								resource);
					} catch (IOException e) {
						// Ignore - decoratableResources[i] is null
					}
					resourcePaths.add(null);
					break;
				}
			} else {
				resourcePaths.add(null);
			}
		}

		// Check resource paths before proceeding with bulk decoration
		boolean containsAtLeastOnePath = false;
		for (final String p : resourcePaths) {
			if (p != null) {
				containsAtLeastOnePath = true;
				break;
			}
		}
		if (!containsAtLeastOnePath)
			return decoratableResources;

		final TreeWalk treeWalk = createThreeWayTreeWalk(mapping, resourcePaths);
		if (treeWalk != null)
			while (treeWalk.next()) {
				i = resourcePaths.indexOf(treeWalk.getPathString());
				if (i != -1) {
					try {
						if (decoratableResources[i] == null)
							decoratableResources[i] = decorateResource(
									new DecoratableResource(resources[i]),
									treeWalk);
					} catch (IOException e) {
						// Ignore - decoratableResources[i] is null
					}
				}
			}
		return decoratableResources;
	}

