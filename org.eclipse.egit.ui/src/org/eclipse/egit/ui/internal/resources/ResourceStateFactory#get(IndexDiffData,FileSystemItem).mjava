	/**
	 * Computes an {@link IResourceState} for the given {@link FileSystemItem}
	 * from the given {@link IndexDiffData}.
	 *
	 * @param indexDiffData
	 *            to compute the state from
	 * @param file
	 *            to get the state of
	 * @return the state
	 */
	@NonNull
	private IResourceState get(@NonNull IndexDiffData indexDiffData,
			@NonNull FileSystemItem file) {
		IPath path = file.getAbsolutePath();
		if (path == null) {
			return UNKNOWN_STATE;
		}
		Repository repository = file.getRepository();
		if (repository == null || repository.isBare()) {
			return UNKNOWN_STATE;
		}
		File workTree = repository.getWorkTree();
		String repoRelativePath = path.makeRelativeTo(
				new org.eclipse.core.runtime.Path(workTree.getAbsolutePath()))
				.toString();
		if (repoRelativePath.equals(path.toString())) {
			// Could not be made relative.
			return UNKNOWN_STATE;
		}
		if (file.isContainer()) {
			if (!repoRelativePath.endsWith("/")) { //$NON-NLS-1$
				repoRelativePath += '/';
			}
			if (ResourceUtil.isSymbolicLink(repository, repoRelativePath)) {
				// The Eclipse resource model handles a symlink to a folder like
				// the container it refers to but git status handles the symlink
				// source like a special file.
				return extractFileProperties(indexDiffData, repoRelativePath);
			} else {
				return extractContainerProperties(indexDiffData,
						repoRelativePath, file);
			}
		} else {
			return extractFileProperties(indexDiffData, repoRelativePath);
		}
	}

