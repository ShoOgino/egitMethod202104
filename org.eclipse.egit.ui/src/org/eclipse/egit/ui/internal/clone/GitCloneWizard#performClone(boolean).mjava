	boolean performClone(boolean background) {
		final URIish uri = cloneSource.getSelection().getURI();
		final boolean allSelected;
		final Collection<Ref> selectedBranches;
		if (validSource.isSourceRepoEmpty()) {
			// fetch all branches of empty repo
			allSelected = true;
			selectedBranches = Collections.emptyList();
		} else {
			allSelected = validSource.isAllSelected();
			selectedBranches = validSource.getSelectedBranches();
		}
		final File workdir = cloneDestination.getDestinationFile();
		final String branch = cloneDestination.getInitialBranch();
		final String remoteName = cloneDestination.getRemote();

		workdir.mkdirs();
		if (!workdir.isDirectory()) {
			final String errorMessage = NLS.bind(
					UIText.GitCloneWizard_errorCannotCreate, workdir.getPath());
			ErrorDialog.openError(getShell(), getWindowTitle(),
					UIText.GitCloneWizard_failed, new Status(IStatus.ERROR,
							Activator.getPluginId(), 0, errorMessage, null));
			// let's give user a chance to fix this minor problem
			return false;
		}

		final RepositoriesView view;
		IViewPart vp = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
				.getActivePage().findView(RepositoriesView.VIEW_ID);
		if (vp != null) {
			view = (RepositoriesView) vp;
		} else {
			view = null;
		}

		final CloneOperation op = new CloneOperation(uri, allSelected,
				selectedBranches, workdir, branch, remoteName);
		importProject.setGitDir(op.getGitDir());
		if (background) {
			final Job job = new Job(NLS.bind(UIText.GitCloneWizard_jobName, uri
					.toString())) {
				@Override
				protected IStatus run(final IProgressMonitor monitor) {
					try {
						op.run(monitor);
						RepositorySelectionPage.saveUriInPrefs(uri.toString());
						RepositoriesView.addDir(op.getGitDir());
						if (view != null)
							view.scheduleRefresh();

						return Status.OK_STATUS;
					} catch (InterruptedException e) {
						return Status.CANCEL_STATUS;
					} catch (InvocationTargetException e) {
						Throwable thr = e.getCause();
						return new Status(IStatus.ERROR, Activator
								.getPluginId(), 0, thr.getMessage(), thr);
					}
				}

			};
			job.setUser(true);
			job.schedule();
			return true;
		} else {
			try {
				// Perform clone in ModalContext thread with progress
				// reporting on the wizard.
				getContainer().run(true, true, new IRunnableWithProgress() {
					public void run(IProgressMonitor monitor)
							throws InvocationTargetException,
							InterruptedException {
						op.run(monitor);
					}
				});
				RepositorySelectionPage.saveUriInPrefs(uri.toString());
				RepositoriesView.addDir(op.getGitDir());
				if (view != null)
					view.scheduleRefresh();
				return true;
			} catch (InterruptedException e) {
				MessageDialog.openInformation(getShell(),
						UIText.GitCloneWizard_CloneFailedHeading,
						UIText.GitCloneWizard_CloneCanceledMessage);
				return false;
			} catch (Exception e) {
				Activator.handleError(UIText.GitCloneWizard_CloneFailedHeading,
						e, true);
				return false;
			}
		}
	}

