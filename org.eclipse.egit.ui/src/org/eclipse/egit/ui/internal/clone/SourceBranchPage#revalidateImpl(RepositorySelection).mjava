	private void revalidateImpl(final RepositorySelection newRepoSelection) {
		if (label.isDisposed() || !isCurrentPage())
			return;

		final ListRemoteOperation listRemoteOp;
		final URIish uri = newRepoSelection.getURI();
		try {
			int timeout = Activator.getDefault().getPreferenceStore().getInt(
					UIPreferences.REMOTE_CONNECTION_TIMEOUT);
			listRemoteOp = new ListRemoteOperation(uri, timeout);
			if (credentials != null)
				listRemoteOp
						.setCredentialsProvider(new EGitCredentialsProvider(
								credentials.getUser(), credentials
										.getPassword()));
			getContainer().run(true, true, new IRunnableWithProgress() {
				@Override
				public void run(IProgressMonitor monitor)
						throws InvocationTargetException, InterruptedException {
					listRemoteOp.run(monitor);
				}
			});
		} catch (InvocationTargetException e) {
			Throwable why = e.getCause();
			transportError(why);
			if (showDetailedFailureDialog())
				SourceBranchFailureDialog.show(getShell(), uri);
			return;
		} catch (InterruptedException e) {
			transportError(UIText.SourceBranchPage_remoteListingCancelled);
			return;
		}

		final Ref idHEAD = listRemoteOp.getRemoteRef(Constants.HEAD);
		head = null;
		boolean headIsMaster = false;
		final String masterBranchRef = Constants.R_HEADS + Constants.MASTER;
		for (final Ref r : listRemoteOp.getRemoteRefs()) {
			final String n = r.getName();
			if (!n.startsWith(Constants.R_HEADS)) {
				continue;
			}
			availableRefs.add(r);
			if (idHEAD == null || headIsMaster) {
				continue;
			}
			ObjectId objectId = r.getObjectId();
			if (objectId == null) {
				continue;
			}
			if (objectId.equals(idHEAD.getObjectId())) {
				headIsMaster = masterBranchRef.equals(r.getName());
				if (head == null || headIsMaster) {
					head = r;
				}
			}
		}
		Collections.sort(availableRefs, new Comparator<Ref>() {
			@Override
			public int compare(final Ref ref1, final Ref ref2) {
				return CommonUtils.REF_ASCENDING_COMPARATOR.compare(ref1, ref2);
			}
		});
		if (idHEAD != null && head == null) {
			head = idHEAD;
			availableRefs.add(0, idHEAD);
		}

		validatedRepoSelection = newRepoSelection;
		refsViewer.setInput(availableRefs);
		refsViewer.setAllChecked(true);
		checkPage();
		checkForEmptyRepo();
	}

