	private void importProjects(final Repository repository,
			final IWorkingSet[] sets) {
		String repoName = Activator.getDefault().getRepositoryUtil()
				.getRepositoryName(repository);
		Job importJob = new WorkspaceJob(MessageFormat.format(
				UIText.GitCloneWizard_jobImportProjects, repoName)) {

			@Override
			public IStatus runInWorkspace(IProgressMonitor monitor) {
				SubMonitor progress = SubMonitor.convert(monitor, 2);
				List<File> files = new ArrayList<>();
				ProjectUtil.findProjectFiles(files, repository.getWorkTree(),
						true, progress.newChild(1));
				if (files.isEmpty()) {
					return Status.OK_STATUS;
				}
				Set<ProjectRecord> records = new LinkedHashSet<>();
				for (File file : files) {
					records.add(new ProjectRecord(file));
				}
				try {
					ProjectUtils.createProjects(records, sets,
							progress.newChild(1));
				} catch (InvocationTargetException e) {
					Activator.logError(e.getLocalizedMessage(), e);
				} catch (InterruptedException e) {
					Activator.logError(e.getLocalizedMessage(), e);
				}
				return Status.OK_STATUS;
			}
		};
		importJob.schedule();
	}

