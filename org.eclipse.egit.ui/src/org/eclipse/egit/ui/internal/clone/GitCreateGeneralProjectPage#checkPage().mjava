	private void checkPage() {
		String projectName = projectText.getText();
		setErrorMessage(null);
		try {
			// make sure the directory exists
			if (!myDirectory.exists()) {
				setErrorMessage(NLS.bind(
						UIText.GitCreateGeneralProjectPage_DirNotExistMessage,
						myDirectory.getPath()));
				return;
			}
			// make sure we don't have a file
			if (!myDirectory.isDirectory()) {
				setErrorMessage(NLS.bind(
						UIText.GitCreateGeneralProjectPage_FileNotDirMessage,
						myDirectory.getPath()));
				return;
			}
			// make sure there is not already a .project file
			if (myDirectory.list(new FilenameFilter() {

				public boolean accept(File dir, String name) {
					if (name.equals(".project")) //$NON-NLS-1$
						return true;
					return false;
				}
			}).length > 0) {
				setErrorMessage(NLS
						.bind(
								UIText.GitCreateGeneralProjectPage_FileExistsInDirMessage,
								".project", myDirectory.getPath())); //$NON-NLS-1$
				return;
			}
			// project name empty
			if (projectName.length() == 0) {
				setErrorMessage(UIText.GitCreateGeneralProjectPage_EnterProjectNameMessage);
				return;
			}
			// project name valid (no strange chars...)
			IStatus result = ResourcesPlugin.getWorkspace().validateName(
					projectName, IResource.PROJECT);
			if (!result.isOK()) {
				setErrorMessage(result.getMessage());
				return;
			}
			// project already exists
			if (isProjectInWorkspace(projectName)) {
				setErrorMessage(NLS
						.bind(
								UIText.GitCreateGeneralProjectPage_PorjectAlreadyExistsMessage,
								projectName));
				return;
			}
			IProject newProject = ResourcesPlugin.getWorkspace().getRoot()
					.getProject(projectName);
			IStatus locationResult = ResourcesPlugin.getWorkspace()
					.validateProjectLocation(newProject,
							new Path(myDirectory.getPath()));
			if (!locationResult.isOK()) {
				setErrorMessage(locationResult.getMessage());
				return;
			}
		} finally {
			setPageComplete(getErrorMessage() == null);
		}

	}

