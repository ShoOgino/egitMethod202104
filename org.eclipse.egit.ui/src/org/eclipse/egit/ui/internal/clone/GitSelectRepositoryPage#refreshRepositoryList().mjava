	private void refreshRepositoryList() {
		List<?> dirsBefore = (List<?>) tv.getInput();
		List<String> dirsAfter = getInitialRepositories();
		if (dirsBefore == null) {
			dirsBefore = Collections.emptyList();
		}
		if (!dirsBefore.containsAll(dirsAfter)) {
			IStructuredSelection previousSelection = (IStructuredSelection) tv
					.getSelection();
			tv.setInput(dirsAfter);
			for (String dir : dirsAfter) {
				if (!dirsBefore.contains(dir)) {
					try {
						Repository newRepository = RepositoryCache.getInstance()
								.lookupRepository(new File(dir));
						if (!allowBare && newRepository.isBare()) {
							// Re-set to previous selection, if any
							if (!previousSelection.isEmpty()) {
								tv.setSelection(previousSelection);
							}
						} else {
							RepositoryNode node = new RepositoryNode(null,
									newRepository);
							tv.setSelection(new StructuredSelection(node));
						}
					} catch (IOException e1) {
						Activator.handleError(e1.getMessage(), e1,
								false);
					}
					break;
				}
			}
		}
	}

