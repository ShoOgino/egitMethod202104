	/**
	 * @param collection
	 *            the selected elements
	 * @param single
	 *            <code>true</code> if only a single repository is allowed
	 * @return the repository if any was found, <code>null</code> otherwise
	 */
	private static Repository getRepositoryOfProjects(Collection<?> collection,
			boolean single) {
		Repository repo = null;
		for (Object element : collection) {
			IContainer container = Adapters.adapt(element, IProject.class);
			RepositoryMapping mapping = null;
			if (container != null) {
				mapping = RepositoryMapping.getMapping(container);
			} else {
				container = Adapters.adapt(element, IContainer.class);
				if (container != null) {
					mapping = RepositoryMapping.getMapping(container);
				}
			}
			if (container != null && mapping != null
					&& container.equals(mapping.getContainer())) {
				Repository r = mapping.getRepository();
				if (single && r != null && repo != null && r != repo) {
					return null;
				} else if (r != null) {
					repo = r;
				}
			} else {
				IWorkingSet workingSet = Adapters.adapt(element,
						IWorkingSet.class);
				if (workingSet != null) {
					for (IAdaptable adaptable : workingSet.getElements()) {
						Repository r = getRepositoryOfProject(adaptable);
						if (single && r != null && repo != null && r != repo) {
							return null;
						} else if (r != null) {
							repo = r;
						}
					}
				}
			}
		}
		return repo;
	}

