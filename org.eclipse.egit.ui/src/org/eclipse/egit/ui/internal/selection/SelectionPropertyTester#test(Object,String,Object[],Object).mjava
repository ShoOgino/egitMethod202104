	public boolean test(Object receiver, String property, Object[] args,
			Object expectedValue) {
		Collection<?> collection = (Collection<?>) receiver;
		if ("projectSingleRepository".equals(property)) { //$NON-NLS-1$
			if (collection.size() != 1)
				return false;

			Repository repository = getRepositoryOfProjects(collection, true);
			if (repository == null)
				return false;

			for (Object arg : args) {
				String s = (String) arg;
				if (!ResourcePropertyTester.testRepositoryState(repository, s))
					return false;
			}
			return true;

		} else if ("projectsWithRepositories".equals(property)) { //$NON-NLS-1$
			Repository repository = getRepositoryOfProjects(collection, false);
			return repository != null;

		} else if ("resourcesSingleRepository".equals(property)) { //$NON-NLS-1$
			if (collection.isEmpty())
				return false;

			Object firstElement = collection.iterator().next();
			IStructuredSelection selection;
			if (collection.size() == 1 && firstElement instanceof ITextSelection) {
				selection = SelectionUtils.getStructuredSelection((ITextSelection) firstElement);
			} else {
				selection = new StructuredSelection(new ArrayList<Object>(
						collection));
			}

			// It may seem like we could just use SelectionUtils.getRepository
			// here. The problem: It would also return a repository for a node
			// in the repo view. But this property is just for resources.
			IResource[] resources = SelectionUtils
					.getSelectedResources(selection);
			Repository repository = getRepositoryOfResources(resources);
			return repository != null;
		}
		return false;
	}

