	/**
	 * Determines the most fitting {@link HistoryPageInput} for the given
	 * {@link IStructuredSelection}. The {@code mandatoryObject} must be
	 * contained in the selection and in a repository.
	 * <p>
	 * Most fitting means that the input will contain all selected resources
	 * which are contained in the same repository as the given
	 * {@code mandatoryObject}.
	 * </p>
	 *
	 * @param selection
	 *            The selection for which the most fitting HistoryPageInput is
	 *            to be determined.
	 * @param mandatoryObject
	 *            The object to which the HistoryPageInput is tailored. Must be
	 *            contained in the given selection and in a repository.
	 * @return The most fitting HistoryPageInput. Will return {@code null} when
	 *         the {@code mandatoryObject} is not contained in the given
	 *         selection or in a repository.
	 */
	@Nullable
	public static HistoryPageInput getMostFittingInput(
			@NonNull IStructuredSelection selection, Object mandatoryObject) {
		Set<IResource> resources = getSelectedResourcesSet(selection);
		if (!resources.contains(mandatoryObject)) {
			return null;
		}

		Repository repository = ResourceUtil
				.getRepository((IResource) mandatoryObject);
		if (repository == null) {
			return null;
		}

		for (Iterator<IResource> it = resources.iterator(); it.hasNext();) {
			IResource resource = it.next();
			if (ResourceUtil.getRepository(resource) != repository) {
				it.remove();
			}
		}

		IResource[] resourceArray = resources.toArray(new IResource[0]);
		return new HistoryPageInput(repository, resourceArray);
	}

