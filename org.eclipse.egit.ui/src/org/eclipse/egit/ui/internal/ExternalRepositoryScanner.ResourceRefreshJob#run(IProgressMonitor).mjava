		@Override
		public IStatus run(IProgressMonitor monitor) {
			try {
				List<WorkingTreeChanges> changes;
				synchronized (repositoriesChanged) {
					if (repositoriesChanged.isEmpty()) {
						return Status.OK_STATUS;
					}
					changes = new ArrayList<>(repositoriesChanged.values());
					repositoriesChanged.clear();
				}

				SubMonitor progress = SubMonitor.convert(monitor,
						changes.size());
				try {
					for (WorkingTreeChanges change : changes) {
						if (progress.isCanceled()) {
							return Status.CANCEL_STATUS;
						}
						ResourceRefreshHandler handler = new ResourceRefreshHandler();
						Repository repo = RepositoryCache.getInstance()
								.getRepository(change.getGitDirectory());
						if (repo == null || repo.isBare()) {
							// Repo has vanished or suddenly become a bare repo?
							// No point updating anything.
							progress.worked(1);
							continue;
						}
						WorkingTreeModifiedEvent event = new WorkingTreeModifiedEvent(
								change.getModified(), change.getDeleted());
						event.setRepository(repo);
						handler.refreshRepository(event,
								repo.getWorkTree().getAbsoluteFile(),
								progress.newChild(1));
					}
				} catch (OperationCanceledException oe) {
					return Status.CANCEL_STATUS;
				} catch (CoreException e) {
					Activator.handleError(UIText.Activator_refreshFailed, e,
							false);
					return new Status(IStatus.ERROR, Activator.PLUGIN_ID,
							e.getMessage());
				}

				if (!monitor.isCanceled()) {
					// re-schedule if we got some changes in the meantime
					synchronized (repositoriesChanged) {
						if (!repositoriesChanged.isEmpty()) {
							schedule(100);
						}
					}
				}
			} finally {
				monitor.done();
			}
			return Status.OK_STATUS;
		}

