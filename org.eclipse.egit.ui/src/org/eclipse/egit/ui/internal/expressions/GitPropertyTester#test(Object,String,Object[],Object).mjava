	@Override
	public boolean test(Object receiver, String property, Object[] args,
			Object expectedValue) {
		if ("parentCount".equals(property)) { //$NON-NLS-1$
			RevCommit commit = AdapterUtils.adapt(receiver, RevCommit.class);
			if (commit == null) {
				return false;
			}
			if (expectedValue instanceof Integer) {
				return commit.getParentCount() <= ((Integer) expectedValue)
						.intValue();
			} else {
				return computeResult(expectedValue,
						commit.getParentCount() > 0);
			}
		} else if ("isBare".equals(property)) { //$NON-NLS-1$
			Repository repository = AdapterUtils.adapt(receiver,
					Repository.class);
			if (repository != null) {
				return computeResult(expectedValue, repository.isBare());
			}
		} else if ("isSafe".equals(property)) { //$NON-NLS-1$
			Repository repository = AdapterUtils.adapt(receiver,
					Repository.class);
			if (repository != null) {
				return computeResult(expectedValue, repository
						.getRepositoryState().equals(RepositoryState.SAFE));
			}
		} else if ("canCommit".equals(property)) { //$NON-NLS-1$
			Repository repository = AdapterUtils.adapt(receiver,
					Repository.class);
			if (repository != null) {
				return computeResult(expectedValue,
						repository.getRepositoryState().canCommit());
			}
		} else if ("hasMultipleRefs".equals(property)) { //$NON-NLS-1$
			IRepositoryCommit commit = AdapterUtils.adapt(receiver,
					IRepositoryCommit.class);
			if (commit != null) {
				return computeResult(expectedValue,
						hasMultipleRefs(commit, toRefNames(args)));
			}
		} else if ("hasRef".equals(property)) { //$NON-NLS-1$
			IRepositoryCommit commit = AdapterUtils.adapt(receiver,
					IRepositoryCommit.class);
			if (commit != null) {
				return computeResult(expectedValue,
						hasRef(commit, toRefNames(args)));
			}
		} else if ("isStash".equals(property)) { //$NON-NLS-1$
			RepositoryCommit commit = AdapterUtils.adapt(receiver,
					RepositoryCommit.class);
			return computeResult(expectedValue,
					commit != null && commit.isStash());
		}
		return false;
	}

