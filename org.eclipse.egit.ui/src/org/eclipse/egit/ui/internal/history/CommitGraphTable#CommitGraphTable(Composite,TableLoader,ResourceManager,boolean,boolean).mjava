	CommitGraphTable(Composite parent, final TableLoader loader,
			final ResourceManager resources, boolean canShowEmailAddresses,
			boolean useColumnPreferences) {
		nFont = UIUtils.getFont(UIPreferences.THEME_CommitGraphNormalFont);
		hFont = highlightFont();
		tableLoader = loader;

		Composite tableContainer = new Composite(parent, SWT.NONE);
		final Table rawTable = new Table(tableContainer,
				SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER
						| SWT.FULL_SELECTION | SWT.VIRTUAL);
		rawTable.setHeaderVisible(true);
		rawTable.setLinesVisible(false);
		rawTable.setFont(nFont);
		rawTable.addListener(SWT.SetData, new Listener() {
			@Override
			public void handleEvent(Event event) {
				if (tableLoader != null) {
					TableItem item = (TableItem) event.item;
					int index = rawTable.indexOf(item);
					if (trace)
						GitTraceLocation.getTrace().trace(
								GitTraceLocation.HISTORYVIEW.getLocation(),
								"Item " + index); //$NON-NLS-1$
					tableLoader.loadItem(index);
				}
			}
		});

		tableLayout = new CommitGraphTableLayout();
		tableContainer.setLayout(tableLayout);

		createColumns(rawTable);
		createPaintListener(rawTable);

		System.arraycopy(columnLayouts, 0, defaultLayouts, 0,
				columnLayouts.length);
		System.arraycopy(columnLayouts, 0, baseLayouts, 0,
				columnLayouts.length);
		if (useColumnPreferences) {
			IPreferenceStore store = Activator.getDefault()
					.getPreferenceStore();
			applyColumnPreferences(store, rawTable);
			IPropertyChangeListener prefsChanged = event -> {
				String property = event.getProperty();
				if (UIPreferences.HISTORY_COLUMN_ID.equals(property)
						|| UIPreferences.HISTORY_COLUMN_AUTHOR.equals(property)
						|| UIPreferences.HISTORY_COLUMN_AUTHOR_DATE
								.equals(property)
						|| UIPreferences.HISTORY_COLUMN_COMMITTER
								.equals(property)
						|| UIPreferences.HISTORY_COLUMN_COMMITTER_DATE
								.equals(property)) {
					rawTable.getDisplay().asyncExec(() -> {
						if (!rawTable.isDisposed()) {
							applyColumnPreferences(store, rawTable);
							rawTable.getParent().layout();
						}
					});
				}
			};
			store.addPropertyChangeListener(prefsChanged);
			rawTable.addDisposeListener(
					event -> store.removePropertyChangeListener(prefsChanged));
		}
		rawTable.addListener(SWT.Resize, event -> layout(rawTable));

		table = new TableViewer(rawTable) {
			@Override
			protected Widget doFindItem(final Object element) {
				return element != null ? ((SWTCommit) element).widget : null;
			}

			@Override
			protected void mapElement(final Object element, final Widget item) {
				if (element == null) {
					return;
				}
				((SWTCommit) element).widget = item;
			}
		};

		GraphLabelProvider graphLabelProvider = new GraphLabelProvider(
				canShowEmailAddresses);
		graphLabelProvider.addListener(new ILabelProviderListener() {
			@Override
			public void labelProviderChanged(LabelProviderChangedEvent event) {
				table.refresh();
			}
		});
		table.setLabelProvider(graphLabelProvider);
		table.setContentProvider(new GraphContentProvider());
		renderer = new SWTPlotRenderer(rawTable.getDisplay(), resources);

		clipboard = new Clipboard(rawTable.getDisplay());
		rawTable.addDisposeListener(new DisposeListener() {
			@Override
			public void widgetDisposed(final DisposeEvent e) {
				clipboard.dispose();
			}
		});

		copy = ActionUtils.createGlobalAction(ActionFactory.COPY,
				() -> doCopy());
		copy.setText(UIText.CommitGraphTable_CopyCommitIdLabel);
		copy.setImageDescriptor(UIIcons.ELCL16_ID);
		table.setUseHashlookup(true);

		table.addSelectionChangedListener(new ISelectionChangedListener() {
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				ISelection s = event.getSelection();
				if (s.isEmpty() || !(s instanceof IStructuredSelection))
					return;
				final IStructuredSelection iss = (IStructuredSelection) s;
				commitToShow = (PlotCommit<?>) iss.getFirstElement();

				copy.setEnabled(canDoCopy());
			}
		});

		final CommitGraphTableHoverManager hoverManager = new CommitGraphTableHoverManager(
				table, renderer);
		hoverManager.install(table.getTable());

		table.getTable().addDisposeListener(new DisposeListener() {

			@Override
			public void widgetDisposed(DisposeEvent e) {
				if (allCommits != null)
					allCommits.dispose();
				hoverManager.dispose();
			}
		});

		Transfer[] transferTypes = new Transfer[] {TextTransfer.getInstance(), FileTransfer.getInstance()};
		table.addDragSupport(DND.DROP_DEFAULT | DND.DROP_COPY, transferTypes,
				new CommitDragSourceListener());
	}

