	void initAndStartRevWalk(boolean forceNewWalk) throws IllegalStateException {
		try {
			if (trace)
				GitTraceLocation.getTrace().traceEntry(
						GitTraceLocation.HISTORYVIEW.getLocation());

			if (input == null)
				return;
			Repository db = input.getRepository();
			if (repoHasBeenRemoved(db)) {
				clearHistoryPage();
				return;
			}

			AnyObjectId headId = resolveHead(db, true);
			if (headId == null) {
				TableViewer viewer = graph.getTableView();
				viewer.setInput(new SWTCommit[0]);
				currentHeadId = null;
				currentFetchHeadId = null;
				currentRepo = db;
				// Force a selection changed event
				viewer.setSelection(viewer.getSelection());
				return;
			}
			AnyObjectId fetchHeadId = resolveFetchHead(db);

			List<FilterPath> paths = buildFilterPaths(input.getItems(), input
					.getFileList(), db);

			if (forceNewWalk || shouldRedraw(db, headId, fetchHeadId, paths)) {
				releaseGenerateHistoryJob();

				SWTWalk walk = createNewWalk(db, headId, fetchHeadId);
				setWalkStartPoints(walk, db, headId);

				setupFileViewer(walk, db, paths);
				setupCommentViewer(db);

				loadInitialHistory(walk);
			} else
				// needed for context menu and double click
				graph.setHistoryPageInput(input);
		} finally {
			if (trace)
				GitTraceLocation.getTrace().traceExit(
						GitTraceLocation.HISTORYVIEW.getLocation());

		}
	}

