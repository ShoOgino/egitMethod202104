	private void addDiff(final StringBuilder d,
			final ArrayList<StyleRange> styles) {
		DiffFormatter diffFmt = new DiffFormatter(new OutputStream() {

			@Override
			public void write(int c) throws IOException {
				d.append((char) c);

			}
		}) {
			@Override
			protected void writeHunkHeader(int aCur, int aEnd, int bCur,
					int bEnd) throws IOException {
				int start = d.length();
				super.writeHunkHeader(aCur, aEnd, bCur, bEnd);
				int end = d.length();
				styles.add(new StyleRange(start, end - start,
						sys_hunkHeaderColor, null));
			}

			@Override
			protected void writeAddedLine(RawText b, int bCur)
					throws IOException {
				int start = d.length();
				super.writeAddedLine(b, bCur);
				int end = d.length();
				styles.add(new StyleRange(start, end - start,
						sys_linesAddedColor, null));
			}

			@Override
			protected void writeRemovedLine(RawText b, int bCur)
					throws IOException {
				int start = d.length();
				super.writeRemovedLine(b, bCur);
				int end = d.length();
				styles.add(new StyleRange(start, end - start,
						sys_linesRemovedColor, null));
			}
		};

		if (!(commit.getParentCount() == 1))
			return;
		try {
			FileDiff[] diffs = FileDiff.compute(walker, commit);

			for (FileDiff diff : diffs) {
				if (diff.getBlobs().length == 2) {
					String path = diff.getPath();
					d.append(formatPathLine(path)).append("\n"); //$NON-NLS-1$
					diff.outputDiff(d, db, diffFmt, false, false);
				}
			}
		} catch (IOException e) {
			Activator.handleError(NLS.bind(
					UIText.CommitMessageViewer_errorGettingFileDifference,
					commit.getId()), e, false);
		}
	}

