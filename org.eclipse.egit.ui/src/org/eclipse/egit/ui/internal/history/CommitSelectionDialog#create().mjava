	@Override
	public void create() {
		super.create();
		getButton(OK).setEnabled(false);
		try {
			PlatformUI.getWorkbench().getProgressService().run(true, true,
					new IRunnableWithProgress() {
						@Override
						public void run(IProgressMonitor monitor)
								throws InvocationTargetException,
								InterruptedException {
							monitor.beginTask(
									UIText.CommitSelectionDialog_BuildingCommitListMessage,
									IProgressMonitor.UNKNOWN);
							try (SWTWalk currentWalk = new SWTWalk(
									repository)) {
								currentWalk.setTreeFilter(createTreeFilter());
								currentWalk.sort(RevSort.COMMIT_TIME_DESC,
										true);
								currentWalk.sort(RevSort.BOUNDARY, true);
								highlightFlag = currentWalk
										.newFlag("highlight"); //$NON-NLS-1$
								allCommits.source(currentWalk);

								RefFilterHelper helper = new RefFilterHelper(
										repository);

								markStartAllRefs(currentWalk, helper
										.getMatchingRefsForSelectedRefFilters());

								for (;;) {
									final int oldsz = allCommits.size();
									allCommits.fillTo(oldsz + BATCH_SIZE - 1);

									if (monitor.isCanceled()
											|| oldsz == allCommits.size()) {
										break;
									}
									String taskName = MessageFormat.format(
											UIText.CommitSelectionDialog_FoundCommitsMessage,
											Integer.valueOf(allCommits.size()));
									monitor.setTaskName(taskName);
								}
								if (monitor.isCanceled()) {
									throw new InterruptedException();
								}
								getShell().getDisplay().asyncExec(() -> updateUi());
							} catch (IOException e) {
								throw new InvocationTargetException(e);
							} finally {
								monitor.done();
							}
						}
					});
		} catch (InvocationTargetException e) {
			setErrorMessage(e.getCause().getMessage());
		} catch (InterruptedException e) {
			setMessage(UIText.CommitSelectionDialog_IncompleteListMessage,
					IMessageProvider.WARNING);
		}
	}

