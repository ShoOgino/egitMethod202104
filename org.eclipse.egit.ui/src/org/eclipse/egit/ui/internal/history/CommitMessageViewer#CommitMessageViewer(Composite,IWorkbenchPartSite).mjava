	CommitMessageViewer(final Composite parent, IWorkbenchPartSite partSite) {
		super(parent, null, SWT.READ_ONLY);
		this.partSite = partSite;

		final StyledText t = getTextWidget();
		t.setFont(UIUtils.getFont(UIPreferences.THEME_CommitMessageFont));

		setTextDoubleClickStrategy(new DefaultTextDoubleClickStrategy(),
				IDocument.DEFAULT_CONTENT_TYPE);
		activatePlugins();

		// react on changes in the fill and wrap preferences
		listener = event -> {
			String property = event.getProperty();
			if (UIPreferences.RESOURCEHISTORY_SHOW_COMMENT_FILL
					.equals(property)) {
				setFill(Boolean.parseBoolean(event.getNewValue().toString()));
			} else if (UIPreferences.HISTORY_SHOW_TAG_SEQUENCE.equals(property)
					|| UIPreferences.HISTORY_SHOW_BRANCH_SEQUENCE
							.equals(property)
					|| UIPreferences.HISTORY_VERIFY_SIGNATURES.equals(property)
					|| UIPreferences.DATE_FORMAT.equals(property)
					|| UIPreferences.DATE_FORMAT_CHOICE.equals(property)) {
				format();
			}
		};
		IPreferenceStore store = Activator.getDefault().getPreferenceStore();
		store.addPropertyChangeListener(listener);
		fill = store
				.getBoolean(UIPreferences.RESOURCEHISTORY_SHOW_COMMENT_FILL);

		themeListener = event -> {
			String property = event.getProperty();
			if (IThemeManager.CHANGE_CURRENT_THEME.equals(property)
					|| UIPreferences.THEME_CommitMessageFont.equals(property)) {
				Font themeFont = UIUtils
						.getFont(UIPreferences.THEME_CommitMessageFont);
				async(() -> setFont(themeFont));
			}
		};
		PlatformUI.getWorkbench().getThemeManager()
				.addPropertyChangeListener(themeListener);

		IPersistentPreferenceStore pstore = (IPersistentPreferenceStore) store;

		showBranchSequencePrefAction = new BooleanPrefAction(pstore,
				UIPreferences.HISTORY_SHOW_BRANCH_SEQUENCE,
				UIText.ResourceHistory_ShowBranchSequence) {
			@Override
			protected void apply(boolean value) {
				// nothing, just toggle
			}
		};
		showTagSequencePrefAction = new BooleanPrefAction(pstore,
				UIPreferences.HISTORY_SHOW_TAG_SEQUENCE,
				UIText.ResourceHistory_ShowTagSequence) {
			@Override
			protected void apply(boolean value) {
				// nothing, just toggle
			}
		};
		wrapCommentsPrefAction = new BooleanPrefAction(pstore,
				UIPreferences.RESOURCEHISTORY_SHOW_COMMENT_WRAP,
				UIText.ResourceHistory_toggleCommentWrap) {
			@Override
			protected void apply(boolean value) {
				// nothing, just toggle
			}
		};
		fillParagraphsPrefAction = new BooleanPrefAction(pstore,
				UIPreferences.RESOURCEHISTORY_SHOW_COMMENT_FILL,
				UIText.ResourceHistory_toggleCommentFill) {
			@Override
			protected void apply(boolean value) {
				// nothing, just toggle
			}
		};

		// global action handlers for select all and copy
		final ActionUtils.UpdateableAction selectAll = ActionUtils
				.createGlobalAction(ActionFactory.SELECT_ALL,
				() -> doOperation(ITextOperationTarget.SELECT_ALL),
				() -> canDoOperation(ITextOperationTarget.SELECT_ALL));
		final ActionUtils.UpdateableAction copy = ActionUtils
				.createGlobalAction(ActionFactory.COPY,
				() -> doOperation(ITextOperationTarget.COPY),
				() -> canDoOperation(ITextOperationTarget.COPY));
		ActionUtils.setGlobalActions(getControl(), copy, selectAll);
		addSelectionChangedListener(event -> {
			selectAll.update();
			copy.update();
		});
		final MenuManager mgr = new MenuManager();
		mgr.setRemoveAllWhenShown(true);
		mgr.addMenuListener(manager -> {
			mgr.add(copy);
			mgr.add(selectAll);
			mgr.add(new Separator());
			mgr.add(showBranchSequencePrefAction);
			mgr.add(showTagSequencePrefAction);
			mgr.add(wrapCommentsPrefAction);
			mgr.add(fillParagraphsPrefAction);
		});

		Control c = getControl();
		c.setMenu(mgr.createContextMenu(c));
	}

