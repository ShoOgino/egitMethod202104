	/**
	 * Computer file diffs for specified tree walk and commit
	 *
	 * @param repository
	 * @param walk
	 * @param commit
	 * @param parents
	 * @param monitor
	 *            for progress reporting an cancellation; may be {@code null}
	 * @param markTreeFilters
	 *            optional filters for marking entries, see
	 *            {@link #isMarked(int)}
	 * @return non-null but possibly empty array of file diffs
	 * @throws MissingObjectException
	 * @throws IncorrectObjectTypeException
	 * @throws CorruptObjectException
	 * @throws IOException
	 */
	public static FileDiff[] compute(Repository repository, TreeWalk walk,
			RevCommit commit, RevCommit[] parents,
			@Nullable IProgressMonitor monitor, TreeFilter... markTreeFilters)
			throws MissingObjectException, IncorrectObjectTypeException,
			CorruptObjectException, IOException {

		final ArrayList<FileDiff> r = new ArrayList<>();

		if (parents.length > 0) {
			walk.reset(trees(commit, parents));
		} else {
			walk.reset();
			walk.addTree(new EmptyTreeIterator());
			walk.addTree(commit.getTree());
		}

		if (walk.getTreeCount() <= 2) {
			// TODO: make JGit DiffEntry.scan and RenameDetector.compute
			// cancelable
			SubMonitor progress = SubMonitor.convert(monitor, 3);
			List<DiffEntry> entries = DiffEntry.scan(walk, false,
					markTreeFilters);
			if (progress.isCanceled()) {
				return new FileDiff[0];
			}
			progress.worked(1);
			List<DiffEntry> xentries = new LinkedList<>(entries);
			RenameDetector detector = new RenameDetector(repository);
			detector.addAll(entries);
			boolean cancelled = false;
			List<DiffEntry> renames = Collections.emptyList();
			try {
				renames = detector.compute(walk.getObjectReader(),
						new EclipseGitProgressTransformer(
								progress.newChild(1)));
			} catch (CancelledException e) {
				cancelled = true;
			}
			if (!cancelled) {
				progress.setWorkRemaining(renames.size());
				for (DiffEntry m : renames) {
					final FileDiff d = new FileDiff(repository, commit, m);
					r.add(d);
					for (Iterator<DiffEntry> i = xentries.iterator(); i
							.hasNext();) {
						DiffEntry n = i.next();
						if (m.getOldPath().equals(n.getOldPath()))
							i.remove();
						else if (m.getNewPath().equals(n.getNewPath()))
							i.remove();
					}
					progress.worked(1);
				}
			}
			for (DiffEntry m : xentries) {
				final FileDiff d = new FileDiff(repository, commit, m);
				r.add(d);
			}
		}
		else { // DiffEntry does not support walks with more than two trees
			SubMonitor progress = SubMonitor.convert(monitor, 1);
			final int nTree = walk.getTreeCount();
			final int myTree = nTree - 1;

			TreeFilterMarker treeFilterMarker = new TreeFilterMarker(
					markTreeFilters);

			while (walk.next()) {
				if (progress.isCanceled()) {
					break;
				}
				progress.setWorkRemaining(100).worked(1);
				if (matchAnyParent(walk, myTree)) {
					continue;
				}
				int treeFilterMarks = treeFilterMarker.getMarks(walk);

				final FileDiffForMerges d = new FileDiffForMerges(repository,
						commit,
						treeFilterMarks);
				d.path = walk.getPathString();
				int m0 = 0;
				for (int i = 0; i < myTree; i++)
					m0 |= walk.getRawMode(i);
				final int m1 = walk.getRawMode(myTree);
				d.change = ChangeType.MODIFY;
				if (m0 == 0 && m1 != 0)
					d.change = ChangeType.ADD;
				else if (m0 != 0 && m1 == 0)
					d.change = ChangeType.DELETE;
				else if (m0 != m1 && walk.idEqual(0, myTree))
					d.change = ChangeType.MODIFY; // there is no ChangeType.TypeChanged
				d.blobs = new ObjectId[nTree];
				d.modes = new FileMode[nTree];
				for (int i = 0; i < nTree; i++) {
					d.blobs[i] = walk.getObjectId(i);
					d.modes[i] = walk.getFileMode(i);
				}

				r.add(d);
			}

		}

		final FileDiff[] tmp = new FileDiff[r.size()];
		r.toArray(tmp);
		return tmp;
	}

