	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		ObjectId commitId = getSelectedCommitId(event);
		Repository repo = getRepository(event);

		final BranchOperationUI op;
		List<Ref> nodes;
		try {
			nodes = getBranchesOfCommit(getSelection(event), repo, true);
		} catch (IOException e) {
			throw new ExecutionException(
					UIText.AbstractHistoryCommitHandler_cantGetBranches,
					e);
		}

		if (nodes.isEmpty()) {
			op = BranchOperationUI.checkout(repo, commitId.name());
		} else if (nodes.size() == 1) {
			op = BranchOperationUI.checkout(repo, nodes.get(0).getName());
		} else {
			BranchSelectionDialog<Ref> dlg = new BranchSelectionDialog<>(
					HandlerUtil.getActiveShellChecked(event), nodes,
					UIText.CheckoutHandler_CheckoutBranchDialogTitle,
					UIText.CheckoutHandler_CheckoutBranchDialogMessage,
					UIText.CheckoutHandler_CheckoutBranchDialogButton, SWT.SINGLE);
			if (dlg.open() == Window.OK) {
				op = BranchOperationUI.checkout(repo,
						dlg.getSelectedNode().getName());
			} else {
				op = null;
			}
		}

		if (op == null)
			return null;

		op.start();
		return null;
	}

