	private void createTable(Composite parent) {
		configsTable = CheckboxTableViewer
				.newCheckList(parent,
						SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
		GridData tableData = new GridData(SWT.FILL, SWT.FILL, true, true);
		tableData.widthHint = convertHorizontalDLUsToPixels(120);
		configsTable.getControl().setLayoutData(tableData);

		configsTable.setContentProvider(ArrayContentProvider.getInstance());
		configsTable.setLabelProvider(new RefLabelProvider());
		configsTable.setComparator(new ViewerComparator() {

			@Override
			public int category(Object element) {
				RefFilter filter = ((RefFilter) element);
				if (filter.isPreconfigured()) {
					return 100;
				}
				return 1000;
			}
		});
		configsTable.addSelectionChangedListener(event -> {
			updateButtonEnablement();
		});
		configsTable.addCheckStateListener(new ICheckStateListener() {

			@Override
			public void checkStateChanged(CheckStateChangedEvent event) {
				((RefFilter) event.getElement())
						.setSelected(event.getChecked());
			}
		});
		configsTable.setCheckStateProvider(new ICheckStateProvider() {

			@Override
			public boolean isGrayed(Object element) {
				return false;
			}

			@Override
			public boolean isChecked(Object element) {
				return ((RefFilter) element).isSelected();
			}
		});

		configsTable.getTable().addKeyListener(new KeyAdapter() {

			@Override
			public void keyPressed(KeyEvent event) {
				if (event.keyCode == SWT.DEL && removeButton.isEnabled()) {
					removeSelectedFilters();
				}
			}
		});

		TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(
				configsTable, new FocusCellHighlighter(configsTable) {
					// Empty; SWT highlights already.
				});
		ColumnViewerEditorActivationStrategy editorActivation = new ColumnViewerEditorActivationStrategy(
				configsTable) {

			@Override
			protected boolean isEditorActivationEvent(
					ColumnViewerEditorActivationEvent event) {
				boolean singleSelect = configsTable.getStructuredSelection()
						.size() == 1;
				boolean isLeftDoubleClick = event.eventType == ColumnViewerEditorActivationEvent.MOUSE_DOUBLE_CLICK_SELECTION
						&& ((MouseEvent) event.sourceEvent).button == 1;
				return singleSelect && (isLeftDoubleClick
						|| event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC);
			}
		};
		TableViewerEditor.create(configsTable, focusCellManager,
				editorActivation, ColumnViewerEditor.DEFAULT);

		editor = new TextCellEditor(configsTable.getTable()) {

			@Override
			protected Control createControl(Composite containing) {
				Control result = super.createControl(containing);
				if ((text.getStyle() & SWT.SINGLE) != 0) {
					// See bug 273470
					text.addVerifyListener(
							event -> event.text = Utils.firstLine(event.text));
				}
				return result;
			}
		};
		editor.setValidator(value -> {
			String currentText = value.toString().trim();
			if (currentText.isEmpty()) {
				return UIText.GitHistoryPage_filterRefDialog_refEmptyError;
			}
			return null;
		});
		editor.addListener(new ICellEditorListener() {

			@Override
			public void editorValueChanged(boolean oldValidState,
					boolean newValidState) {
				if (newValidState) {
					message.setImage(null);
					message.setText(
							UIText.GitHistoryPage_filterRefDialog_dialogMessage);
				} else {
					message.setImage(PlatformUI.getWorkbench().getSharedImages()
							.getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
					message.setText(editor.getErrorMessage());
				}
				getButton(OK).setEnabled(newValidState);
			}

			@Override
			public void cancelEditor() {
				editorValueChanged(false, true);
				updateButtonEnablement();
			}

			@Override
			public void applyEditorValue() {
				cancelEditor();
			}
		});
		configsTable.setColumnProperties(new String[] { FILTER_COLUMN_NAME });
		configsTable.setCellEditors(new CellEditor[] { editor });
		configsTable.setCellModifier(new ICellModifier() {

			@Override
			public void modify(Object element, String property, Object value) {
				RefFilter filter = (RefFilter) ((TableItem) element).getData();
				// Remove the filter before changing the value; its hashCode
				// depends on it!
				filters.remove(filter);
				filter.setFilterString((String) value);
				filters.add(filter);
				configsTable.refresh();
				configsTable.reveal(filter);
			}

			@Override
			public Object getValue(Object element, String property) {
				RefFilter filter = (RefFilter) element;
				return filter.getFilterString();
			}

			@Override
			public boolean canModify(Object element, String property) {
				RefFilter filter = (RefFilter) element;
				return !filter.isPreconfigured();
			}
		});
	}

