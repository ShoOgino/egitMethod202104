	/**
	 * Retrieves and formats the commit info.
	 *
	 * @param monitor
	 *            for progress reporting and cancellation
	 * @return formatted commit info
	 * @throws IOException
	 */
	public FormatResult format(IProgressMonitor monitor) throws IOException {
		boolean trace = GitTraceLocation.HISTORYVIEW.isActive();
		if (trace) {
			GitTraceLocation.getTrace().traceEntry(
					GitTraceLocation.HISTORYVIEW.getLocation());
		}
		monitor.setTaskName(UIText.CommitMessageViewer_FormattingMessageTaskName);
		IPreferenceStore preferences = Activator.getDefault()
				.getPreferenceStore();
		final StringBuilder d = new StringBuilder();
		final PersonIdent author = commit.getAuthorIdent();
		final PersonIdent committer = commit.getCommitterIdent();
		List<GitCommitReference> hyperlinks = new ArrayList<>();
		d.append(UIText.CommitMessageViewer_commit);
		d.append(' ');
		d.append(commit.getId().name());
		d.append(LF);

		RevCommit c = commit;
		if (preferences.getBoolean(UIPreferences.HISTORY_VERIFY_SIGNATURES)
				&& c.getRawGpgSignature() != null) {
			GpgSignatureVerifierFactory factory = GpgSignatureVerifierFactory
					.getDefault();
			if (factory != null) {
				GpgSignatureVerifier verifier = factory.getVerifier();
				GpgConfig config = new GpgConfig(db.getConfig());
				try {
					SignatureVerification verification = verifier
							.verifySignature(c, config);
					if (verification != null) {
						String[] text = SignatureUtils
								.toString(verification, committer,
										dateFormatter)
								.split(LF);
						String prefix = verifier.getName();
						for (String line : text) {
							d.append(prefix).append(": ").append(line) //$NON-NLS-1$
									.append(LF);
						}
					}
				} catch (IOException | JGitInternalException e) {
					Activator.logError("Cannot verify signature on commit " //$NON-NLS-1$
							+ commit.name(), e);
				}
			}
		}
		addPersonIdent(d, author, UIText.CommitMessageViewer_author);
		addPersonIdent(d, committer, UIText.CommitMessageViewer_committer);

		for (int i = 0; i < commit.getParentCount(); i++) {
			addCommit(d, (SWTCommit) commit.getParent(i),
					UIText.CommitMessageViewer_parent, hyperlinks);
		}

		for (int i = 0; i < commit.getChildCount(); i++) {
			addCommit(d, (SWTCommit) commit.getChild(i),
					UIText.CommitMessageViewer_child, hyperlinks);
		}

		if (preferences
				.getBoolean(UIPreferences.HISTORY_SHOW_BRANCH_SEQUENCE)) {
			try (RevWalk rw = new RevWalk(db)) {
				List<Ref> branches = getBranches(commit, allRefs, db, monitor);
				Collections.sort(branches,
						CommonUtils.REF_ASCENDING_COMPARATOR);
				if (!branches.isEmpty()) {
					d.append(UIText.CommitMessageViewer_branches);
					d.append(": "); //$NON-NLS-1$
					int count = 0;
					for (Iterator<Ref> i = branches.iterator(); i.hasNext();) {
						Ref head = i.next();
						RevCommit p;
						p = rw.parseCommit(head.getObjectId());
						addLink(d, formatHeadRef(head), hyperlinks, p);
						if (i.hasNext()) {
							if (count++ <= MAXBRANCHES) {
								d.append(", "); //$NON-NLS-1$
							} else {
								d.append(NLS.bind(UIText.CommitMessageViewer_MoreBranches, Integer.valueOf(branches.size() - MAXBRANCHES)));
								break;
							}
						}
					}
					d.append(LF);
				}
			} catch (IOException e) {
				Activator.logError(e.getMessage(), e);
			}
		}

		String tagsString = getTagsString();
		if (tagsString.length() > 0) {
			d.append(UIText.CommitMessageViewer_tags);
			d.append(": "); //$NON-NLS-1$
			d.append(tagsString);
			d.append(LF);
		}

		if (preferences.getBoolean(UIPreferences.HISTORY_SHOW_TAG_SEQUENCE)) {
			try (RevWalk rw = new RevWalk(db)) {
				monitor.setTaskName(UIText.CommitMessageViewer_GettingPreviousTagTaskName);
				addTag(d, UIText.CommitMessageViewer_follows, rw,
						getNextTag(false, monitor), hyperlinks);
			} catch (IOException e) {
				Activator.logError(e.getMessage(), e);
			}

			try (RevWalk rw = new RevWalk(db)) {
				monitor.setTaskName(UIText.CommitMessageViewer_GettingNextTagTaskName);
				addTag(d, UIText.CommitMessageViewer_precedes, rw,
						getNextTag(true, monitor), hyperlinks);
			} catch (IOException e) {
				Activator.logError(e.getMessage(), e);
			}
		}

		d.append(LF);
		int headerEnd = d.length();
		String msg = commit.getFullMessage().trim();
		// Find start of footer:
		int footerStart = CommonUtils.getFooterOffset(msg);
		if (footerStart >= 0) {
			if (fill) {
				String footer = msg.substring(footerStart);
				msg = msg.substring(0, footerStart);
				msg = msg.replaceAll("([\\w.,; \t])\n(\\w)", "$1 $2") //$NON-NLS-1$ //$NON-NLS-2$
						+ footer;
				footerStart = headerEnd + msg.length() - footer.length();
			} else {
				footerStart = headerEnd + footerStart;
			}
		} else if (fill) {
			msg = msg.replaceAll("([\\w.,; \t])\n(\\w)", "$1 $2"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		d.append(msg);
		if (!msg.endsWith(LF))
			d.append(LF);

		if (trace)
			GitTraceLocation.getTrace().traceExit(
					GitTraceLocation.HISTORYVIEW.getLocation());
		return new FormatResult(d.toString(), hyperlinks, headerEnd,
				footerStart >= 0 ? footerStart : d.length());
	}

