	private TreeWalk createFileWalker(Repository db, List<FilterPath> paths) {
		final TreeWalk fileWalker = new TreeWalk(db);
		fileWalker.setRecursive(true);
		fileWalker.setFilter(TreeFilter.ANY_DIFF);
		if (store.getBoolean(UIPreferences.RESOURCEHISTORY_FOLLOW_RENAMES)
				&& !paths.isEmpty()
				&& allRegularFiles(paths)) {
			pathFilters = paths;

			List<String> selectedPaths = new ArrayList<String>(paths.size());
			for (FilterPath filterPath : paths)
				selectedPaths.add(filterPath.getPath());

			TreeFilter followFilter = createFollowFilterFor(selectedPaths);
			currentWalk.setTreeFilter(followFilter);
		} else if (paths.size() > 0) {
			pathFilters = paths;
			List<String> stringPaths = new ArrayList<String>(paths.size());
			for (FilterPath p : paths)
				stringPaths.add(p.getPath());

			currentWalk.setTreeFilter(AndTreeFilter.create(PathFilterGroup
					.createFromStrings(stringPaths), TreeFilter.ANY_DIFF));
		} else {
			pathFilters = null;
			currentWalk.setTreeFilter(TreeFilter.ALL);
		}
		return fileWalker;
	}

