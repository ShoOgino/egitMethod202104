			public FilterAction(IAction... actions) {
				super(UIText.GitHistoryPage_FilterSubMenuLabel);
				@SuppressWarnings("null")
				@NonNull
				List<IAction> a = actions == null ? Collections.emptyList()
						: Arrays.asList(actions);
				this.actions = a;
				setToolTipText(UIText.GitHistoryPage_FilterTooltip);
				listener = e -> {
					if (IAction.ENABLED.equals(e.getProperty())) {
						boolean previousEnablement = isEnabled();
						childEnablement = FilterAction.this.actions.stream()
								.anyMatch(IAction::isEnabled);
						boolean currentEnablement = isEnabled();
						if (currentEnablement != previousEnablement) {
							IAction currentChild = currentEnablement
									? FilterAction.this.actions.stream()
											.filter(IAction::isChecked)
											.findFirst().orElse(null)
									: null;
							if (currentChild == null) {
								setToolTipText(
										UIText.GitHistoryPage_FilterTooltip);
							} else {
								setToolTipText(MessageFormat.format(
										UIText.GitHistoryPage_FilterTooltipCurrent,
										currentChild.getToolTipText()));
							}
							firePropertyChange(IAction.ENABLED,
									Boolean.valueOf(previousEnablement),
									Boolean.valueOf(currentEnablement));
						}
					} else if (IAction.CHECKED.equals(e.getProperty())) {
						Object newValue = e.getNewValue();
						boolean isChecked = false;
						if (newValue instanceof Boolean) {
							isChecked = ((Boolean) newValue).booleanValue();
						} else if (newValue instanceof String) {
							isChecked = Boolean.parseBoolean((String) newValue);
						}
						if (isChecked) {
							Object source = e.getSource();
							if (source instanceof IAction) {
								if (isEnabled()) {
									setToolTipText(MessageFormat.format(
											UIText.GitHistoryPage_FilterTooltipCurrent,
											((IAction) source)
													.getToolTipText()));
								}
								ImageDescriptor image = ((IAction) source)
										.getImageDescriptor();
								if (image != null) {
									setImageDescriptor(image);
								}
							}
						}
					}
				};
				for (IAction action : this.actions) {
					action.addPropertyChangeListener(listener);
				}
			}

