	private void attachCommitSelectionChanged() {
		graph.addSelectionChangedListener(new ISelectionChangedListener() {
			@Override
			public void selectionChanged(final SelectionChangedEvent event) {
				final ISelection s = event.getSelection();
				if (s.isEmpty() || !(s instanceof IStructuredSelection)) {
					commentViewer.setInput(null);
					fileViewer.setInput(null);
					return;
				}

				final IStructuredSelection sel = ((IStructuredSelection) s);
				if (sel.size() > 1) {
					commentViewer.setInput(null);
					fileViewer.setInput(null);
					return;
				}
				if (input == null) {
					return;
				}
				final PlotCommit<?> c = (PlotCommit<?>) sel.getFirstElement();
				commentViewer.setInput(c);
				final PlotWalk walk = new PlotWalk(input.getRepository());
				try {
					final RevCommit unfilteredCommit = walk.parseCommit(c);
					for (RevCommit parent : unfilteredCommit.getParents())
						walk.parseBody(parent);
					fileViewer.setInput(unfilteredCommit);
				} catch (IOException e) {
					fileViewer.setInput(c);
				} finally {
					walk.dispose();
				}

				if (input.getSingleFile() != null)
					fileViewer.selectFirstInterestingElement();
			}
		});
		commentViewer
				.addCommitNavigationListener(new CommitNavigationListener() {
					@Override
					public void showCommit(final RevCommit c) {
						graph.selectCommit(c);
					}
				});
	}

