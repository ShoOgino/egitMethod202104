	private static List<Ref> findBranchesReachableFrom(RevCommit commit,
			RevWalk revWalk, Collection<Ref> refs)
			throws MissingObjectException, IncorrectObjectTypeException,
			IOException {

		List<Ref> result = new ArrayList<Ref>();
		// searches from branches can be cut off early if any parent of the
		// search-for commit is found. This is quite likely, so optimize for this.
		revWalk.markStart(Arrays.asList(commit.getParents()));
		ObjectIdSubclassMap<ObjectId> cutOff = new ObjectIdSubclassMap<ObjectId>();

		final int SKEW = 24*3600; // one day clock skew

		for (Ref ref : refs) {
			RevCommit headCommit = revWalk.parseCommit(ref.getObjectId());

			// if commit is in the ref branch, then the tip of ref should be
			// newer than the commit we are looking for. Allow for a large
			// clock skew.
			if (headCommit.getCommitTime() + SKEW < commit.getCommitTime())
				continue;

			List<ObjectId> maybeCutOff = new ArrayList<ObjectId>(cutOff.size()); // guess rough size
			revWalk.resetRetain();
			revWalk.markStart(headCommit);
			RevCommit current;
			Ref found = null;
			while ((current = revWalk.next()) != null) {
				if (AnyObjectId.equals(current, commit)) {
					found = ref;
					break;
				}
				if (cutOff.contains(current))
					break;
				maybeCutOff.add(current.toObjectId());
			}
			if (found != null)
				result.add(ref);
			else
				for (ObjectId id : maybeCutOff)
					cutOff.addIfAbsent(id);

		}
		return result;
	}

