	private void execFind() {
		// If it isn't the last event, just ignore it.
		if (currentThreadIx < globalThreadIx) {
			return;
		}

		FindResults findResults = toolbar.findResults;
		findResults.clear();

		boolean maxResultsOverflow = false;
		if (pattern.length() > 0 && fileRevisions != null) {
			String findPattern = pattern;
			if (ignoreCase) {
				findPattern = pattern.toLowerCase();
			}

			long lastUIUpdate = System.currentTimeMillis();

			int totalRevisions = fileRevisions.length;
			int totalMatches = 0;
			boolean notFound = true;
			for (int i = 0; i < totalRevisions; i++) {
				// If a new find event was generated, ends the current thread.
				if (toolbar.getDisplay().isDisposed()
						|| currentThreadIx < globalThreadIx) {
					return;
				}

				// Updates the toolbar with in process info.
				if (System.currentTimeMillis() - lastUIUpdate > 500) {
					final int percentage = (int) (((i + 1F) / totalRevisions) * 100);
					toolbar.getDisplay().asyncExec(new Runnable() {
						public void run() {
							if (toolbar.isDisposed()) {
								return;
							}
							toolbar.progressUpdate(percentage);
						}
					});
					lastUIUpdate = System.currentTimeMillis();
				}

				// Finds for the pattern in the revision history.
				notFound = true;
				SWTCommit revision = fileRevisions[i];
				try {
					revision.parseBody();
				} catch (IOException e) {
					Activator.error("Error parsing body", e); //$NON-NLS-1$
					continue;
				}

				if (findInCommitId) {
					String contentId = revision.getId().name();
					if (contentId != null) {
						if (ignoreCase) {
							contentId = contentId.toLowerCase();
						}
						if (contentId.indexOf(findPattern) != -1) {
							totalMatches++;
							findResults.add(i, revision);
							notFound = false;
						}
					}
				}

				if (findInComments && notFound) {
					String comment = revision.getFullMessage();
					if (comment != null) {
						if (ignoreCase) {
							comment = comment.toLowerCase();
						}
						if (comment.indexOf(findPattern) != -1) {
							totalMatches++;
							findResults.add(i, revision);
							notFound = false;
						}
					}
				}

				if (findInAuthor && notFound) {
					String author = revision.getAuthorIdent().getName();
					if (author != null) {
						if (ignoreCase) {
							author = author.toLowerCase();
						}
						if (author.indexOf(findPattern) != -1) {
							totalMatches++;
							findResults.add(i, revision);
							notFound = false;
						}
					}
					if (notFound) {
						String email = revision.getAuthorIdent()
								.getEmailAddress();
						if (email != null) {
							if (ignoreCase) {
								email = email.toLowerCase();
							}
							if (email.indexOf(findPattern) != -1) {
								totalMatches++;
								findResults.add(i, revision);
								notFound = false;
							}
						}
					}
				}

				if (findInCommitter && notFound) {
					String committer = revision.getCommitterIdent().getName();
					if (committer != null) {
						if (ignoreCase) {
							committer = committer.toLowerCase();
						}
						if (committer.indexOf(findPattern) != -1) {
							totalMatches++;
							findResults.add(i, revision);
							notFound = false;
						}
					}
					if (notFound) {
						String email = revision.getCommitterIdent()
								.getEmailAddress();
						if (email != null) {
							if (ignoreCase) {
								email = email.toLowerCase();
							}
							if (email.indexOf(findPattern) != -1) {
								totalMatches++;
								findResults.add(i, revision);
								notFound = false;
							}
						}
					}
				}

				if (findInReference && notFound) {
					if (revision.getRefCount() > 0) {
						for (int j = 0; j < revision.getRefCount(); j++) {
							Ref ref = revision.getRef(j);
							String refName = ref.getName();
							refName = Repository.shortenRefName(refName);
							if (ignoreCase)
								refName = refName.toLowerCase();
							if (refName.indexOf(findPattern) != -1) {
								totalMatches++;
								findResults.add(i, revision);
								notFound = false;
							}
						}
					}
				}

				if (totalMatches == MAX_RESULTS) {
					maxResultsOverflow = true;
					break;
				}
			}

		}

		// Updates the toolbar with the result find info.
		final boolean overflow = maxResultsOverflow;
		toolbar.getDisplay().syncExec(new Runnable() {
			public void run() {
				if (toolbar.isDisposed()) {
					return;
				}
				toolbar.findCompletionUpdate(pattern, overflow);
			}
		});
	}

