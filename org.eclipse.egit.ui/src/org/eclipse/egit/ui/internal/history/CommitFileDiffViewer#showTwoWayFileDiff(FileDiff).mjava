	void showTwoWayFileDiff(final FileDiff d) {
		final String np = d.getNewPath();
		final String op = d.getOldPath();
		final RevCommit c = d.getCommit();

		// extract commits
		final RevCommit leftCommit;
		final ObjectId baseObjectId;
		if (d.getBlobs().length == 2 && !d.getChange().equals(ChangeType.ADD)) {
			leftCommit = c.getParent(0);
			baseObjectId = d.getBlobs()[0];
		} else {
			// Initial import
			leftCommit = null;
			baseObjectId = null;
		}

		final RevCommit rightCommit;
		final ObjectId rightObjectId;
		if (d.getChange().equals(ChangeType.DELETE)) {
			rightCommit = null;
			rightObjectId = null;
		} else {
			rightCommit = c;
			rightObjectId = d.getBlobs()[1];
		}

		IWorkbenchPage page = site.getWorkbenchWindow().getActivePage();
		if (leftCommit != null && rightCommit != null) {
			IFile file = ResourceUtil.getFileForLocation(getRepository(), np);
			try {
				if (file != null) {
					IResource[] resources = new IResource[] { file, };
					CompareUtils.compare(resources, getRepository(),
							leftCommit.getName(), rightCommit.getName(), false,
							page);
				} else {
					IPath location = new Path(getRepository().getWorkTree()
							.getAbsolutePath()).append(np);
					CompareUtils.compare(location, getRepository(),
							leftCommit.getName(), rightCommit.getName(), false,
							page);
				}
			} catch (Exception e) {
				Activator.logError(UIText.GitHistoryPage_openFailed, e);
				Activator.showError(UIText.GitHistoryPage_openFailed, null);
			}
			return;
		}

		// still happens on initial commits
		final ITypedElement base = createTypedElement(op, leftCommit,
				baseObjectId);
		final ITypedElement next = createTypedElement(np, rightCommit,
				rightObjectId);
		CompareUtils.openInCompare(page, new GitCompareFileRevisionEditorInput(
				next, base, null));
	}

