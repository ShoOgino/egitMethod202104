	void showTwoWayFileDiff(final FileDiff d) {
		final String np = d.getNewPath();
		final String op = d.getOldPath();
		final RevCommit c = d.getCommit();

		// extract commits
		final RevCommit leftCommit;
		final ObjectId baseObjectId;
		if (d.getBlobs().length == 2 && !d.getChange().equals(ChangeType.ADD)) {
			leftCommit = c.getParent(0);
			baseObjectId = d.getBlobs()[0];
		} else {
			// Initial import
			leftCommit = null;
			baseObjectId = null;
		}

		final RevCommit rightCommit;
		final ObjectId rightObjectId;
		if (d.getChange().equals(ChangeType.DELETE)) {
			rightCommit = null;
			rightObjectId = null;
		} else {
			rightCommit = c;
			rightObjectId = d.getBlobs()[1];
		}


		// determine (from a local available file) if a model compare is possible
		IFile file = ResourceUtil.getFileForLocation(getRepository(), np);
		if (file != null && leftCommit != null && rightCommit != null) {
			if (!CompareUtils.canDirectlyOpenInCompare(file)) {
				try {
					GitModelSynchronize.synchronizeModelBetweenRefs(file,
							getRepository(), leftCommit.getName(),
							rightCommit.getName());
				} catch (Exception e) {
					Activator.logError(UIText.GitHistoryPage_openFailed, e);
					Activator.showError(UIText.GitHistoryPage_openFailed, null);
				}
				return;
			}
		}

		final ITypedElement base = createTypedElement(op, leftCommit,
				baseObjectId);
		final ITypedElement next = createTypedElement(np, rightCommit,
				rightObjectId);
		CompareUtils.openInCompare(site.getWorkbenchWindow().getActivePage(),
				new GitCompareFileRevisionEditorInput(next, base, null));
	}

