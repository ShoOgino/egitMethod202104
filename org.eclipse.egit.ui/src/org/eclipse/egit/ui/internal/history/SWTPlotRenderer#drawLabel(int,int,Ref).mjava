	@Override
	protected int drawLabel(int x, int y, Ref ref) {
		String txt;
		String name = ref.getName();
		boolean tag = false;
		boolean branch = false;
		RGB labelOuter;
		RGB labelInner;
		Color labelTextColor = sys_black;
		boolean adjustColors = true;

		if (name.startsWith(Constants.R_HEADS)) {
			branch = true;
			labelOuter = OUTER_HEAD;
			labelInner = INNER_HEAD;
			txt = name.substring(Constants.R_HEADS.length());
		} else if (name.startsWith(Constants.R_REMOTES)) {
			branch = true;
			labelOuter = OUTER_REMOTE;
			labelInner = INNER_REMOTE;
			txt = name.substring(Constants.R_REMOTES.length());
		} else if (name.startsWith(Constants.R_TAGS)) {
			tagCount++;

			tag = true;
			if (ref.getPeeledObjectId() != null) {
				labelOuter = OUTER_ANNOTATED;
				labelInner = INNER_ANNOTATED;
			} else {
				labelOuter = OUTER_TAG;
				labelInner = INNER_TAG;
			}

			int maxNumberOfTags = 1;
			if (tagCount == maxNumberOfTags) {
				txt = name.substring(Constants.R_TAGS.length());
			} else if (tagCount == maxNumberOfTags + 1) {
				txt = ELLIPSIS;
				ellipsisTags.add(name);
			} else {
				// Don't draw additional tags, they are shown when hovering the
				// ellipsis
				return 0;
			}
		} else {
			labelOuter = OUTER_OTHER;
			float hsb[] = tableBG.getRGB().getHSB();
			if (hsb[2] < 0.5) {
				// Dark table: use table background a little lightened
				if (hsb[2] < 0.1) {
					hsb[2] = 0.3f;
				} else {
					hsb[2] *= 1.7;
				}
				labelInner = new RGB(hsb[0], hsb[1], hsb[2]);
				labelTextColor = hsb[2] < 0.5 ? sys_white : sys_black;
				adjustColors = false;
			} else {
				// Light table
				labelInner = INNER_OTHER;
				labelTextColor = sys_black;
			}

			if (name.startsWith(Constants.R_REFS))
				txt = name.substring(Constants.R_REFS.length());
			else
				txt = name; // HEAD and such
		}

		if (adjustColors) {
			float hsb[] = tableBG.getRGB().getHSB();
			if (hsb[2] < 0.5) {
				// Dark table: darken the fill color
				hsb = labelInner.getHSB();
				if (hsb[2] >= 0.5) {
					// With the very bright, weakly saturated colors we have,
					// the following works reasonably well: Bump the saturation
					// up, and darken a little. Unless it's a gray: then darken
					// only.
					if (!(labelInner.red == labelInner.blue
							&& labelInner.blue == labelInner.green)) {
						hsb[1] = (float) Math.min(1.0, hsb[1] * 1.5);
					}
					hsb[2] *= 0.7;
					labelInner = new RGB(hsb[0], hsb[1], hsb[2]);
				}
				labelTextColor = hsb[2] < 0.5 ? sys_white : sys_black;
			}
		}
		int maxLength;
		if (tag)
			maxLength = Activator.getDefault().getPreferenceStore()
					.getInt(UIPreferences.HISTORY_MAX_TAG_LENGTH);
		else if (branch)
			maxLength = Activator.getDefault().getPreferenceStore()
					.getInt(UIPreferences.HISTORY_MAX_BRANCH_LENGTH);
		else
			maxLength = MAX_LABEL_LENGTH;
		if (txt.length() > maxLength) {
			// Account for the ellipsis length
			int textLength = maxLength - 3;
			if (Activator.getDefault().getPreferenceStore()
					.getBoolean(UIPreferences.HISTORY_CUT_AT_START))
				txt = ELLIPSIS + txt.substring(txt.length() - textLength);
			else
				txt = txt.substring(0, textLength) + ELLIPSIS;
		}

		// highlight checked out branch
		Font oldFont = g.getFont();
		boolean isHead = isHead(name);
		if (isHead)
			g.setFont(CommitGraphTable.highlightFont());

		Point textsz = g.stringExtent(txt);
		int arc = textsz.y / 2;
		final int texty = (y * 2 - textsz.y) / 2;
		final int outerWidth = textsz.x + 7;

		// Draw backgrounds
		g.setLineWidth(1);

		g.setBackground(sys_white);
		g.fillRoundRectangle(cellX + x + 1, cellY + texty, textsz.x + 6,
				textsz.y + 1, arc, arc);

		g.setBackground(resources.createColor(labelInner));
		g.fillRoundRectangle(cellX + x + 2, cellY + texty + 1, textsz.x + 4,
				textsz.y - 2, arc - 1, arc - 1);

		g.setForeground(resources.createColor(labelOuter));
		g.drawRoundRectangle(cellX + x, cellY + texty - 1, outerWidth,
				textsz.y + 1, arc, arc);

		g.setForeground(labelTextColor);

		// Draw text
		g.drawString(txt, cellX + x + 4, cellY + texty, true);

		g.setBackground(cellBG);
		g.setBackground(cellFG);

		if (isHead)
			g.setFont(oldFont);

		labelCoordinates.put(name, new Point(x, x + outerWidth));
		return 10 + textsz.x;
	}

