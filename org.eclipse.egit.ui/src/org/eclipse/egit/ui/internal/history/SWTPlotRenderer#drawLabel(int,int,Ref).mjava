	@Override
	protected int drawLabel(int x, int y, Ref ref) {
		String txt;
		String name = ref.getOrigName();
		if (name.startsWith(Constants.R_HEADS)) {
			g.setBackground(sys_green);
			txt = name.substring(Constants.R_HEADS.length());
		} else if (name.startsWith(Constants.R_REMOTES)){
			g.setBackground(sys_gray);
			txt = name.substring(Constants.R_REMOTES.length());
		} else if (name.startsWith(Constants.R_TAGS)){
			g.setBackground(sys_yellow);
			txt = name.substring(Constants.R_TAGS.length());
		} else {
			// Whatever this would be
			g.setBackground(sys_white);
			if (name.startsWith(Constants.R_REFS))
				txt = name.substring(Constants.R_REFS.length());
			else
				txt = name; // HEAD and such
		}

		// Make peeled objects, i.e. via annotated tags come out in a paler color
		Color peeledColor = null;
		if (ref.getPeeledObjectId() == null || !ref.getPeeledObjectId().equals(ref.getObjectId())) {
			peeledColor = new Color(g.getDevice(), ColorUtil.blend(g.getBackground().getRGB(), sys_white.getRGB()));
			g.setBackground(peeledColor);
		}

		if (txt.length() > 12)
			txt = txt.substring(0,11) + "\u2026"; // ellipsis "â€¦" (in UTF-8)

		Point textsz = g.stringExtent(txt);
		int arc = textsz.y/2;
		final int texty = (y * 2 - textsz.y) / 2;

		// Draw backgrounds
		g.fillRoundRectangle(x + 1, cellY + texty -1, textsz.x + 3, textsz.y + 1, arc, arc);
		g.setForeground(sys_black);
		g.drawString(txt, x + 2, cellY + texty, true);
		g.setLineWidth(2);

		// And a two color shaded border, blend with whatever background there already is
		g.setAlpha(128);
		g.setForeground(sys_gray);
		g.drawRoundRectangle(x, cellY + texty -2, textsz.x + 5, textsz.y + 3, arc, arc);
		g.setLineWidth(2);
		g.setForeground(sys_black);
		g.drawRoundRectangle(x + 1, cellY + texty -1, textsz.x + 3, textsz.y + 1, arc, arc);
		g.setAlpha(255);

		if (peeledColor != null)
			peeledColor.dispose();
		return 8 + textsz.x;
	}

