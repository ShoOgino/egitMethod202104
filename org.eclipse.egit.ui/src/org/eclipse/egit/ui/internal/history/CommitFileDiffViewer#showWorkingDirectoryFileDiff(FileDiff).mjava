	void showWorkingDirectoryFileDiff(final FileDiff d) {
		final GitCompareFileRevisionEditorInput in;

		final String p = d.getPath();
		final RevCommit commit = d.getCommit();
		final ObjectId[] blobs = d.getBlobs();
		final ITypedElement base;
		final ITypedElement next;

		IFile file = ResourceUtil.getFileForLocation(getRepository(), p);
		if (file != null && commit != null) {
			if (!CompareUtils.canDirectlyOpenInCompare(file)) {
				try {
					GitModelSynchronize.synchronizeModelWithWorkspace(file,
							getRepository(), commit.getName());
				} catch (Exception e) {
					Activator.logError(UIText.GitHistoryPage_openFailed, e);
					Activator.showError(UIText.GitHistoryPage_openFailed, null);
				}
				return;
			}
		}

		if (file != null)
			next = SaveableCompareEditorInput.createFileElement(file);
		else
			next = new LocalNonWorkspaceTypedElement(new Path(getRepository()
					.getWorkTree().getAbsolutePath()).append(p));

		if (d.getChange().equals(ChangeType.DELETE))
			base = new GitCompareFileRevisionEditorInput.EmptyTypedElement(""); //$NON-NLS-1$
		else
			base = CompareUtils.getFileRevisionTypedElement(p, commit,
					getRepository(), blobs[blobs.length - 1]);

		in = new GitCompareFileRevisionEditorInput(next, base, null);
		CompareUtils.openInCompare(site.getWorkbenchWindow().getActivePage(),
				in);
	}

