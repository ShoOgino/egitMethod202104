	public Object execute(ExecutionEvent event) throws ExecutionException {
		IStructuredSelection selection = getSelection(getPage());
		if (selection.size() == 1) {
			Iterator<?> it = selection.iterator();
			RevCommit commit = (RevCommit) it.next();
			Object input = getPage().getInputInternal().getSingleFile();
			Repository repo = getRepository(event);
			ObjectId headCommit;
			try {
				headCommit = repo.resolve(Constants.HEAD);
			} catch (IOException e) {
				throw new ExecutionException(e.getMessage(), e);
			}
			if (input instanceof IFile) {
				IFile file = (IFile) input;
				final RepositoryMapping mapping = RepositoryMapping
						.getMapping(file.getProject());
				final String gitPath = mapping.getRepoRelativePath(file);
				ITypedElement right = CompareUtils.getFileRevisionTypedElement(
						gitPath, commit, mapping.getRepository());
				final ITypedElement ancestor = CompareUtils.
						getFileRevisionTypedElementForCommonAncestor(
						gitPath, headCommit, commit, repo);

				final GitCompareFileRevisionEditorInput in = new GitCompareFileRevisionEditorInput(
						SaveableCompareEditorInput.createFileElement(file),
						right, ancestor, null);
				openInCompare(event, in);
			}
			if (input instanceof File) {
				File file = (File) input;
				// TODO can we create a ITypedElement from the local file?
				RevCommit leftCommit;
				RevWalk walk = new RevWalk(repo);
				try {
					leftCommit = walk.parseCommit(headCommit);
				} catch (Exception e) {
					throw new ExecutionException(e.getMessage(), e);
				} finally {
					walk.release();
				}
				final String gitPath = getRepoRelativePath(repo, file);
				ITypedElement left = CompareUtils.getFileRevisionTypedElement(
						gitPath, leftCommit, repo);
				ITypedElement right = CompareUtils.getFileRevisionTypedElement(
						gitPath, commit, repo);
				final ITypedElement ancestor = CompareUtils.
						getFileRevisionTypedElementForCommonAncestor(
						gitPath, headCommit, commit, repo);
				final GitCompareFileRevisionEditorInput in = new GitCompareFileRevisionEditorInput(
						left, right, ancestor, null);
				openInCompare(event, in);
				return null;
			}
		}
		return null;
	}

