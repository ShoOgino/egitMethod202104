	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		IStructuredSelection selection = getSelection(event);
		if (selection.isEmpty())
			return null;

		// Even if there's more than one element, only consider the first
		RevCommit commit = (RevCommit) selection.getFirstElement();
		Object input = getPage(event).getInputInternal().getSingleFile();
		IWorkbenchPage workbenchPage = HandlerUtil
				.getActiveWorkbenchWindowChecked(event).getActivePage();
		if (input instanceof IFile) {
			IFile file = (IFile) input;
			final RepositoryMapping mapping = RepositoryMapping
					.getMapping(file);
			if (mapping != null) {
				final String gitPath = mapping.getRepoRelativePath(file);
				final String commitPath = getRenamedPath(gitPath, commit);
				ITypedElement right = CompareUtils.getFileRevisionTypedElement(
						commitPath, commit, mapping.getRepository());
				CompareEditorInput in = new GitCompareFileRevisionEditorInput(
						SaveableCompareEditorInput.createFileElement(file),
						right, null);
				CompareUtils.openInCompare(workbenchPage, in);
			}
		} else if (input instanceof File) {
			File file = (File) input;
			Repository repo = getRepository(event);
			if (repo != null) {
				final String leftCommitPath = getRepoRelativePath(repo, file);
				final String rightCommitPath = getRenamedPath(leftCommitPath,
						commit);
				ITypedElement right = CompareUtils.getFileRevisionTypedElement(
						rightCommitPath, commit, repo);
				CompareEditorInput in = new GitCompareFileRevisionEditorInput(
						new LocalNonWorkspaceTypedElement(repo,
								new Path(file.getAbsolutePath())),
						right, null);
				CompareUtils.openInCompare(workbenchPage, in);
			}
		}
		return null;
	}

