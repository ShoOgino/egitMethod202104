	public void inputChanged(Viewer viewer, Object oldInput,
			Object newInput) {
		if (newInput != null) {

			Repository repository = (Repository)((Object[])newInput)[0];
			IndexDiff indexDiff = (IndexDiff)((Object[])newInput)[1];

			Set<StagingEntry> nodes = new TreeSet<StagingEntry>(new Comparator<StagingEntry>() {
				public int compare(StagingEntry o1, StagingEntry o2) {
					return o1.getPath().compareTo(o2.getPath());
				}
			});

			if (isWorkspace) {
				for (String file : indexDiff.getMissing())
					nodes.add(new StagingEntry(repository, StagingEntry.State.MISSING, file));
				for (String file : indexDiff.getModified()) {
					if (indexDiff.getChanged().contains(file))
						nodes.add(new StagingEntry(repository, StagingEntry.State.PARTIALLY_MODIFIED, file));
					else
						nodes.add(new StagingEntry(repository, StagingEntry.State.MODIFIED, file));
				}
				for (String file : indexDiff.getUntracked())
					nodes.add(new StagingEntry(repository, StagingEntry.State.UNTRACKED, file));
				for (String file : indexDiff.getConflicting())
					nodes.add(new StagingEntry(repository, StagingEntry.State.CONFLICTING, file));
			} else {
				for (String file : indexDiff.getAdded())
					nodes.add(new StagingEntry(repository, StagingEntry.State.ADDED, file));
				for (String file : indexDiff.getChanged())
					nodes.add(new StagingEntry(repository, StagingEntry.State.CHANGED, file));
				for (String file : indexDiff.getRemoved())
					nodes.add(new StagingEntry(repository, StagingEntry.State.REMOVED, file));
			}
			content = nodes.toArray(new StagingEntry[nodes.size()]);
		}
	}

