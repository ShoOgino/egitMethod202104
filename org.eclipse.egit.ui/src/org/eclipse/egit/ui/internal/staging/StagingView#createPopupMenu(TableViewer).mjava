	private void createPopupMenu(final TableViewer tableViewer) {
		final MenuManager menuMgr = new MenuManager();
		menuMgr.setRemoveAllWhenShown(true);
		Control control = tableViewer.getControl();
		control.setMenu(menuMgr.createContextMenu(control));
		menuMgr.addMenuListener(new IMenuListener() {

			public void menuAboutToShow(IMenuManager manager) {
				IStructuredSelection selection = (IStructuredSelection) tableViewer.getSelection();
				if (selection.isEmpty())
					return;

				boolean submoduleSelected = false;
				for (Object item : selection.toArray())
					if (((StagingEntry) item).isSubmodule()) {
						submoduleSelected = true;
						break;
					}

				Action openWorkingTreeVersion = new Action(
						UIText.CommitFileDiffViewer_OpenWorkingTreeVersionInEditorMenuLabel) {
					@Override
					public void run() {
						openSelectionInEditor(tableViewer.getSelection());
					}
				};
				boolean addReplaceWithFileInGitIndex = false;
				boolean addReplaceWithHeadRevision = false;
				boolean addStage = false;
				boolean addUnstage = false;
				boolean addLaunchMergeTool = false;
				openWorkingTreeVersion.setEnabled(!submoduleSelected);
				menuMgr.add(openWorkingTreeVersion);

				StagingEntry stagingEntry = (StagingEntry) selection.getFirstElement();
				switch (stagingEntry.getState()) {
				case ADDED:
					addUnstage = true;
					break;
				case CHANGED:
					addReplaceWithHeadRevision = true;
					addUnstage = true;
					break;
				case REMOVED:
					addReplaceWithHeadRevision = true;
					addUnstage = true;
					break;
				case CONFLICTING:
					addReplaceWithFileInGitIndex = true;
					addReplaceWithHeadRevision = true;
					addStage = true;
					addLaunchMergeTool = true;
					break;
				case MISSING:
				case MODIFIED:
				case PARTIALLY_MODIFIED:
				case UNTRACKED:
					addReplaceWithFileInGitIndex = true;
					addReplaceWithHeadRevision = true;
					addStage = true;
					break;
				}
				if (addStage)
					menuMgr.add(new Action(UIText.StagingView_StageItemMenuLabel) {
						@Override
						public void run() {
							stage((IStructuredSelection) tableViewer.getSelection());
						}
					});
				if (addUnstage)
					menuMgr.add(new Action(UIText.StagingView_UnstageItemMenuLabel) {
						@Override
						public void run() {
							unstage((IStructuredSelection) tableViewer.getSelection());
						}
					});
				boolean isNonResourceSelection = isNonResourceSelection(tableViewer.getSelection());
				if (addReplaceWithFileInGitIndex)
					if (isNonResourceSelection)
						menuMgr.add(new ReplaceAction(UIText.StagingView_replaceWithFileInGitIndex, selection, false));
					else
						menuMgr.add(createItem(ActionCommands.DISCARD_CHANGES_ACTION, tableViewer));	// replace with index
				if (addReplaceWithHeadRevision)
					if (isNonResourceSelection)
						menuMgr.add(new ReplaceAction(UIText.StagingView_replaceWithHeadRevision, selection, true));
					else
						menuMgr.add(createItem(ActionCommands.REPLACE_WITH_HEAD_ACTION, tableViewer));
				if (addLaunchMergeTool)
					menuMgr.add(createItem(ActionCommands.MERGE_TOOL_ACTION, tableViewer));
			}
		});

	}

