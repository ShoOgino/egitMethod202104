	/**
	 * Checks whether a signing key for the given identification can be found by
	 * the given {@link GpgSigner}.
	 *
	 * @param signer
	 *            to use for the check
	 * @param signingKey
	 *            from the GPG git config, may be {@code null}
	 * @param personIdent
	 *            to use as a fallback if no {@code signingKey} ID is provided
	 * @return {@code true} if signing appears to be possible, {@code false}
	 *         otherwise
	 */
	public static boolean checkSigningKey(GpgSigner signer, String signingKey,
			@NonNull PersonIdent personIdent) {
		if (signer != null) {
			try {
				return signer.canLocateSigningKey(signingKey, personIdent,
						new CredentialsProvider() {

							@Override
							public boolean supports(CredentialItem... items) {
								return true;
							}

							@Override
							public boolean isInteractive() {
								return false;
							}

							@Override
							public boolean get(URIish uri,
									CredentialItem... items)
									throws UnsupportedCredentialItem {
								return false;
							}
						});
			} catch (CanceledException e) {
				// interpret this as "ok" - a passphrase was asked and canceled
				// by our no-op CredentialsProvider
				return true;
			}
		}
		return false;
	}

