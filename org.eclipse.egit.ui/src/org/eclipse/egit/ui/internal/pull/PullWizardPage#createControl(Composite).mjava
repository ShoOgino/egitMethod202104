	@Override
	public void createControl(Composite parent) {
		parent.addDisposeListener(event -> {
			for (CancelableFuture<Collection<Ref>> l : refs.values()) {
				l.cancel(CancelableFuture.CancelMode.INTERRUPT);
			}
			refs.clear();
		});
		try {
			this.remoteConfigs = RemoteConfig
					.getAllRemoteConfigs(repository.getConfig());
			Collections.sort(remoteConfigs, Comparator.comparing(
					RemoteConfig::getName, String.CASE_INSENSITIVE_ORDER));
			setDefaultUpstreamConfig();
		} catch (URISyntaxException e) {
			this.remoteConfigs = new ArrayList<>();
			handleError(e);
		}

		Composite res = new Composite(parent, SWT.NONE);
		res.setLayout(new GridLayout(3, false));

		Label remoteLabel = new Label(res, SWT.NONE);
		remoteLabel.setText(UIText.PushBranchPage_RemoteLabel);

		this.remoteSelectionCombo = new RemoteSelectionCombo(
				res, SWT.NONE, SelectionType.PUSH);
		GridDataFactory.fillDefaults().grab(true, false)
				.applyTo(remoteSelectionCombo);
		setRemoteConfigs();
		remoteSelectionCombo.addRemoteSelectionListener(rc -> {
			remoteConfig = rc;
			setRefAssist(rc);
			checkPage();
		});

		Button newRemoteButton = new Button(res, SWT.PUSH);
		newRemoteButton.setText(UIText.PushBranchPage_NewRemoteButton);
		GridDataFactory.fillDefaults().applyTo(newRemoteButton);
		newRemoteButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				showNewRemoteDialog();
			}
		});

		Label branchNameLabel = new Label(res, SWT.NONE);
		branchNameLabel.setText(UIText.PullWizardPage_referenceLabel);
		branchNameLabel.setToolTipText(UIText.PullWizardPage_referenceTooltip);

		remoteBranchNameText = new Text(res, SWT.BORDER);
		GridDataFactory.fillDefaults().grab(true, false).span(2, 1)
				.applyTo(remoteBranchNameText);
		remoteBranchNameText.setText(getSuggestedBranchName());
		AsynchronousRefProposalProvider candidateProvider = new AsynchronousRefProposalProvider(
				getContainer(), remoteBranchNameText, () -> {
					RemoteConfig config = remoteSelectionCombo
							.getSelectedRemote();
					if (config == null) {
						return null;
					}
					List<URIish> uris = config.getURIs();
					if (uris == null || uris.isEmpty()) {
						return null;
					}
					return uris.get(0).toString();
				}, uri -> {
					AsynchronousBranchList list = refs.get(uri);
					if (list == null) {
						list = new AsynchronousBranchList(repository, uri,
								null);
						refs.put(uri, list);
					}
					return list;
				});
		candidateProvider.setContentProposalAdapter(
				UIUtils.addRefContentProposalToText(remoteBranchNameText,
						this.repository, candidateProvider, true));
		remoteBranchNameText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				checkPage();
			}
		});

		this.upstreamConfigComponent = new BranchRebaseModeCombo(res);
		GridDataFactory.fillDefaults().grab(true, false).span(2, 1)
				.align(SWT.BEGINNING, SWT.CENTER)
				.applyTo(upstreamConfigComponent.getViewer().getCombo());
		this.upstreamConfigComponent.getViewer().addSelectionChangedListener(
				(event) -> upstreamConfig = upstreamConfigComponent
						.getRebaseMode());
		if (upstreamConfig != null) {
			upstreamConfigComponent.setRebaseMode(upstreamConfig);
		}
		if (this.fullBranch != null
				&& this.fullBranch.startsWith(Constants.R_HEADS)) {
			this.rememberConfigForBranch = new Button(res, SWT.CHECK);
			GridData checkboxLayoutData = new GridData(SWT.BEGINNING,
					SWT.CENTER, false, false, 3, 1);
			checkboxLayoutData.verticalIndent = 20;
			this.rememberConfigForBranch.setText(
					UIText.UpstreamConfigComponent_ConfigureUpstreamCheck);
			this.rememberConfigForBranch.setToolTipText(
					UIText.UpstreamConfigComponent_ConfigureUpstreamToolTip);
			this.rememberConfigForBranch.setLayoutData(checkboxLayoutData);
			this.rememberConfigForBranch.setSelection(this.configureUpstream);
			this.rememberConfigForBranch
					.addSelectionListener(new SelectionAdapter() {
						@Override
						public void widgetSelected(SelectionEvent e) {
							configureUpstream = rememberConfigForBranch
									.getSelection();
							checkPage();
						}
					});
		}

		setPageComplete(isPageComplete());
		setControl(res);
	}

