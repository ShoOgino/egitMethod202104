	private List<Ref> getRemoteRefs() {
		if (remoteRefs == null) {
			URIish uriToCheck;
			List<Ref> proposals = new ArrayList<>();
			uriToCheck = config.getURIs().get(0);
			final ListRemoteOperation lop = new ListRemoteOperation(repository,
					uriToCheck, Activator.getDefault().getPreferenceStore()
							.getInt(UIPreferences.REMOTE_CONNECTION_TIMEOUT));
			try {
				new ProgressMonitorDialog(getShell()).run(true, true,
						new IRunnableWithProgress() {
							@Override
							public void run(IProgressMonitor monitor)
									throws InvocationTargetException,
									InterruptedException {
								monitor
										.beginTask(
												UIText.FetchSourcePage_GettingRemoteRefsTaskname,
												IProgressMonitor.UNKNOWN);
								lop.run(monitor);
								monitor.done();
							}
						});
				for (Ref ref : lop.getRemoteRefs()) {
					if (ref.getName().startsWith(Constants.R_HEADS)
							|| ref.getName().startsWith(Constants.R_TAGS))
						proposals.add(ref);
				}
				Collections.sort(proposals, new Comparator<Ref>() {
					@Override
					public int compare(Ref ref1, Ref ref2) {
						return CommonUtils.REF_ASCENDING_COMPARATOR
								.compare(ref1, ref2);
					}
				});
				this.remoteRefs = proposals;
			} catch (IllegalStateException e) {
				setErrorMessage(e.getMessage());
			} catch (InvocationTargetException e) {
				setErrorMessage(e.getMessage());
			} catch (InterruptedException e) {
				setErrorMessage(e.getMessage());
			}
		}
		return remoteRefs;
	}

