	private void createTableColumns() {
		final TableColumnLayout layout = new TableColumnLayout();
		tablePanel.setLayout(layout);

		final TableViewerColumn srcViewer = createColumn(layout,
				UIText.FetchResultTable_columnSrc, COLUMN_SRC_WEIGHT, SWT.LEFT);
		srcViewer.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				return ((TrackingRefUpdate) element).getRemoteName();
			}
		});

		final TableViewerColumn dstViewer = createColumn(layout,
				UIText.FetchResultTable_columnDst, COLUMN_DST_WEIGHT, SWT.LEFT);
		dstViewer.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				return ((TrackingRefUpdate) element).getLocalName();
			}
		});

		final TableViewerColumn statusViewer = createColumn(layout,
				UIText.FetchResultTable_columnStatus, COLUMN_STATUS_WEIGHT,
				SWT.LEFT);
		statusViewer.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(final Object element) {
				final TrackingRefUpdate tru = (TrackingRefUpdate) element;
				final RefUpdate.Result r = tru.getResult();
				if (r == RefUpdate.Result.LOCK_FAILURE)
					return UIText.FetchResultTable_statusLockFailure;

				if (r == RefUpdate.Result.IO_FAILURE)
					return UIText.FetchResultTable_statusIOError;

				if (r == RefUpdate.Result.NEW) {
					if (tru.getRemoteName().startsWith(Constants.R_HEADS))
						return UIText.FetchResultTable_statusNewBranch;
					else if (tru.getLocalName().startsWith(Constants.R_TAGS))
						return UIText.FetchResultTable_statusNewTag;
					return UIText.FetchResultTable_statusNew;
				}

				if (r == RefUpdate.Result.FORCED) {
					final String o = tru.getOldObjectId().abbreviate(db).name();
					final String n = tru.getNewObjectId().abbreviate(db).name();
					return o + "..." + n; //$NON-NLS-1$
				}

				if (r == RefUpdate.Result.FAST_FORWARD) {
					final String o = tru.getOldObjectId().abbreviate(db).name();
					final String n = tru.getNewObjectId().abbreviate(db).name();
					return o + ".." + n; //$NON-NLS-1$
				}

				if (r == RefUpdate.Result.REJECTED)
					return UIText.FetchResultTable_statusRejected;
				if (r == RefUpdate.Result.NO_CHANGE)
					return UIText.FetchResultTable_statusUpToDate;
				throw new IllegalArgumentException(NLS.bind(
						UIText.FetchResultTable_statusUnexpected, r));
			}

			@Override
			public String getToolTipText(final Object element) {
				final Result result = ((TrackingRefUpdate) element).getResult();
				switch (result) {
				case FAST_FORWARD:
					return UIText.FetchResultTable_statusDetailFastForward;
				case FORCED:
				case REJECTED:
					return UIText.FetchResultTable_statusDetailNonFastForward;
				case NEW:
				case NO_CHANGE:
					return null;
				case IO_FAILURE:
					return UIText.FetchResultTable_statusDetailIOError;
				case LOCK_FAILURE:
					return UIText.FetchResultTable_statusDetailCouldntLock;
				default:
					throw new IllegalArgumentException(NLS.bind(
							UIText.FetchResultTable_statusUnexpected, result));
				}
			}

			@Override
			public Color getBackground(final Object element) {
				final Result result = ((TrackingRefUpdate) element).getResult();
				switch (result) {
				case FAST_FORWARD:
				case FORCED:
				case NEW:
					return colorRegistry.get(COLOR_UPDATED_KEY);
				case NO_CHANGE:
					return colorRegistry.get(COLOR_UP_TO_DATE_KEY);
				case IO_FAILURE:
				case LOCK_FAILURE:
				case REJECTED:
					return colorRegistry.get(COLOR_REJECTED_KEY);
				default:
					throw new IllegalArgumentException(NLS.bind(
							UIText.FetchResultTable_statusUnexpected, result));
				}
			}
		});
	}

