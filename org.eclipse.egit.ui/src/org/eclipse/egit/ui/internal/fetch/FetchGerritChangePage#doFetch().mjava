	boolean doFetch() {

		final RefSpec spec = new RefSpec().setSource(refText.getText())
				.setDestination(Constants.FETCH_HEAD);
		final String uri = uriCombo.getText();
		final boolean doCheckout = checkout.getSelection();
		final boolean doCreateTag = createTag.getSelection();
		final boolean doCreateBranch = createBranch.getSelection();
		final boolean doActivateAdditionalRefs = (checkout.getSelection() || dontCheckout
				.getSelection()) && activateAdditionalRefs.getSelection();
		final String textForTag = tagText.getText();
		final String textForBranch = branchText.getText();

		storeRunInBackgroundSelection();

		if (runInBackgroud.getSelection()) {
			Job job = new Job(UIText.FetchGerritChangePage_GetChangeTaskName) {
				@Override
				protected IStatus run(IProgressMonitor monitor) {
					internalDoFetch(spec, uri, doCheckout, doCreateTag,
							doCreateBranch, doActivateAdditionalRefs,
							textForTag, textForBranch, monitor);
					return org.eclipse.core.runtime.Status.OK_STATUS;
				}

				@Override
				public boolean belongsTo(Object family) {
					if (JobFamilies.FETCH.equals(family))
						return true;
					return super.belongsTo(family);
				}
			};
			job.setUser(true);
			job.schedule();
			return true;
		} else {
			try {
			getWizard().getContainer().run(true, true,
					new IRunnableWithProgress() {
						public void run(IProgressMonitor monitor)
								throws InvocationTargetException,
								InterruptedException {
							try {
								internalDoFetch(spec, uri, doCheckout,
										doCreateTag, doCreateBranch,
										doActivateAdditionalRefs, textForTag,
										textForBranch, monitor);
							} catch (RuntimeException e) {
								throw e;
							} catch (Exception e) {
								throw new InvocationTargetException(e);
							} finally {
								monitor.done();
							}
						}
					});
			} catch (InvocationTargetException e) {
				Activator.handleError(e.getCause().getMessage(), e.getCause(),
						true);
				return false;
			} catch (InterruptedException e) {
				// just return
			}
			return true;
		}
	}

