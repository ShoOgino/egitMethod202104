	boolean doFetch() {
		try {
			final RefSpec spec = new RefSpec().setSource(refText.getText())
					.setDestination(Constants.FETCH_HEAD);
			final String uri = uriCombo.getText();
			final boolean doCheckout = checkout.getSelection();
			final boolean doCreateTag = createTag.getSelection();
			final boolean doCreateBranch = createBranch.getSelection();
			final boolean doActivateAdditionalRefs = (checkout.getSelection() || dontCheckout
					.getSelection()) && activateAdditionalRefs.getSelection();
			final String textForTag = tagText.getText();
			final String textForBranch = branchText.getText();

			getWizard().getContainer().run(true, true,
					new IRunnableWithProgress() {
						public void run(IProgressMonitor monitor)
								throws InvocationTargetException,
								InterruptedException {
							int totalWork = 1;
							if (doCheckout)
								totalWork++;
							if (doCreateTag || doCreateBranch)
								totalWork++;
							monitor.beginTask(
									UIText.FetchGerritChangePage_GetChangeTaskName,
									totalWork);

							try {
								RevCommit commit = fetchChange(uri, spec,
										monitor);

								if (doCreateTag) {
									createTag(spec, textForTag, commit, monitor);
								}
								if (doCreateBranch) {
									createBranch(textForBranch, commit, monitor);
								}
								if (doCheckout || doCreateTag) {
									checkout(commit, monitor);
								}
								if (doActivateAdditionalRefs) {
									activateAdditionalRefs();
								}
								storeLastUsedUri(uri);
							} catch (RuntimeException e) {
								throw e;
							} catch (Exception e) {
								throw new InvocationTargetException(e);
							} finally {
								monitor.done();
							}
						}
					});
		} catch (InvocationTargetException e) {
			Activator
					.handleError(e.getCause().getMessage(), e.getCause(), true);
			return false;
		} catch (InterruptedException e) {
			// just return
		}
		return true;
	}

