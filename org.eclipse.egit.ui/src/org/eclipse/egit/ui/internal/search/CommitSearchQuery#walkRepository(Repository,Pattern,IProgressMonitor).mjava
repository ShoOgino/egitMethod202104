	private void walkRepository(Repository repository, Pattern pattern,
			IProgressMonitor monitor) throws IOException {
		try (RevWalk walk = new RevWalk(repository)) {
			walk.setRetainBody(true);
			List<RevCommit> commits = new LinkedList<>();
			if (this.settings.isAllBranches()) {
				for (Ref ref : repository.getRefDatabase()
						.getRefsByPrefix(Constants.R_HEADS))
					if (!ref.isSymbolic())
						commits.add(walk.parseCommit(ref.getObjectId()));
				for (Ref ref : repository.getRefDatabase()
						.getRefsByPrefix(Constants.R_REMOTES))
					if (!ref.isSymbolic())
						commits.add(walk.parseCommit(ref.getObjectId()));
			} else {
				ObjectId headCommit = repository.resolve(Constants.HEAD);
				if (headCommit != null)
					commits.add(walk.parseCommit(headCommit));
			}

			if (!commits.isEmpty()) {
				walk.markStart(commits);
				for (RevCommit commit : walk) {
					if (monitor.isCanceled())
						throw new OperationCanceledException();
					for (SearchMatcher matcher : this.matchers)
						if (matcher.matches(pattern, commit)) {
							result.addResult(new RepositoryCommit(repository,
									commit));
							break;
						}
				}
			}
		}
	}

