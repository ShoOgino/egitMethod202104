	/**
	 * Hooks up the {@link Control} such that the given {@link IAction}s are
	 * registered with the given {@link IHandlerService} while the control has
	 * the focus. Ensures that actions are properly de-registered when the
	 * control is disposed.
	 *
	 * @param control
	 *            to hook up
	 * @param actions
	 *            to be registered while the control has the focus; {@code null}
	 *            items are skipped.
	 * @param service
	 *            to register the actions with
	 */
	public static void setGlobalActions(Control control,
			Collection<? extends IAction> actions, IHandlerService service) {
		ActiveShellExpression expression = new ActiveShellExpression(
				control.getShell());
		class ActivationListener implements Listener {

			private Collection<IHandlerActivation> handlerActivations = new ArrayList<>();

			@Override
			public void handleEvent(Event event) {
				switch (event.type) {
				case SWT.Deactivate:
				case SWT.FocusOut:
				case SWT.Dispose:
					if (!handlerActivations.isEmpty()) {
						service.deactivateHandlers(handlerActivations);
						handlerActivations.clear();
					}
					break;
				case SWT.Activate:
				case SWT.FocusIn:
					if (!handlerActivations.isEmpty()) {
						// Looks like sometimes we get two focusGained events.
						return;
					}
					for (IAction action : actions) {
						if (action != null) {
							handlerActivations.add(service.activateHandler(
									action.getActionDefinitionId(),
									new ActionHandler(action), expression,
									false));
							if (action instanceof IUpdate) {
								((IUpdate) action).update();
							}
						}
					}
					break;
				default:
					break;
				}
			}
		}
		ActivationListener activationListener = new ActivationListener();
		control.addListener(SWT.Deactivate, activationListener);
		control.addListener(SWT.FocusOut, activationListener);
		control.addListener(SWT.Activate, activationListener);
		control.addListener(SWT.FocusIn, activationListener);
		control.addListener(SWT.Dispose, activationListener);
	}

