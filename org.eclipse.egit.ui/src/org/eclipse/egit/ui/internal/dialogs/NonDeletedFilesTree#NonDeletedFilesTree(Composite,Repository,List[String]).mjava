	/**
	 * @param parent
	 * @param repository
	 * @param pathList
	 */
	public NonDeletedFilesTree(Composite parent, Repository repository,
			List<String> pathList) {
		super(createComposite(parent), SWT.BORDER);
		this.filePaths = pathList;

		Composite main = getTree().getParent();

		GridDataFactory.fillDefaults().grab(true, true).applyTo(getTree());

		final FileTreeContentProvider cp = new FileTreeContentProvider(
				repository);

		setContentProvider(cp);
		setLabelProvider(new FileTreeLabelProvider());
		setInput(this.filePaths);
		expandAll();

		final ToolBar dropDownBar = new ToolBar(main, SWT.FLAT | SWT.RIGHT);
		GridDataFactory.swtDefaults().align(SWT.BEGINNING, SWT.BEGINNING)
				.grab(false, false).applyTo(dropDownBar);
		final ToolItem dropDownItem = new ToolItem(dropDownBar, SWT.DROP_DOWN);
		Image dropDownImage = UIIcons.HIERARCHY.createImage();
		UIUtils.hookDisposal(dropDownItem, dropDownImage);
		dropDownItem.setImage(dropDownImage);
		final Menu menu = new Menu(dropDownBar);
		dropDownItem.addDisposeListener(new DisposeListener() {

			public void widgetDisposed(DisposeEvent e) {
				menu.dispose();
			}
		});
		dropDownItem.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent e) {
				Rectangle b = dropDownItem.getBounds();
				Point p = dropDownItem.getParent().toDisplay(
						new Point(b.x, b.y + b.height));
				menu.setLocation(p.x, p.y);
				menu.setVisible(true);
			}

		});

		final MenuItem showRepoRelative = new MenuItem(menu, SWT.RADIO);
		showRepoRelative
				.setText(UIText.NonDeletedFilesTree_RepoRelativePathsButton);
		showRepoRelative.setSelection(true);
		showRepoRelative.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (showRepoRelative.getSelection()) {
					cp.setMode(Mode.REPO_RELATIVE_PATHS);
					setInput(getInput());
					expandAll();
				}
			}
		});

		final MenuItem showFull = new MenuItem(menu, SWT.RADIO);
		showFull.setText(UIText.NonDeletedFilesTree_FileSystemPathsButton);
		showFull.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (showFull.getSelection()) {
					cp.setMode(Mode.FULL_PATHS);
					setInput(getInput());
					expandAll();
				}
			}
		});

		final MenuItem showResource = new MenuItem(menu, SWT.RADIO);
		showResource.setText(UIText.NonDeletedFilesTree_ResourcePathsButton);
		showResource.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (showResource.getSelection()) {
					cp.setMode(Mode.RESOURCE_PATHS);
					setInput(getInput());
					expandAll();
				}
			}
		});
	}

