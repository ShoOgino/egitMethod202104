	/**
	 * Creates a new instance that uses the given hyperlink detector and viewer.
	 *
	 * @param hyperlinkDetectors
	 *            the {@link IHyperlinkDetector}s to use
	 * @param viewer
	 *            the {@link ISourceViewer} to operate in
	 * @param defaultAttribute
	 *            the {@link TextAttribute} to use for the default token; may be
	 *            {@code null}Â to use the default style of the viewer
	 */
	public HyperlinkTokenScanner(IHyperlinkDetector[] hyperlinkDetectors,
			ISourceViewer viewer, @Nullable TextAttribute defaultAttribute) {
		IHyperlinkDetector[] allDetectors;
		if (hyperlinkDetectors == null || hyperlinkDetectors.length == 0) {
			allDetectors = new IHyperlinkDetector[0];
		} else {
			allDetectors = new IHyperlinkDetector[hyperlinkDetectors.length
					+ 1];
			System.arraycopy(hyperlinkDetectors, 0, allDetectors, 0,
					hyperlinkDetectors.length);
			// URLHyperlinkDetector can only detect hyperlinks at the start of
			// the range. We need one that can detect all hyperlinks in a given
			// region.
			allDetectors[hyperlinkDetectors.length] = new MultiURLHyperlinkDetector();
		}
		this.hyperlinkDetectors = allDetectors;
		this.viewer = viewer;
		this.defaultToken = new Token(defaultAttribute);
	}

