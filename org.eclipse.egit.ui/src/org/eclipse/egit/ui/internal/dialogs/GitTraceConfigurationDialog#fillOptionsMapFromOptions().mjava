	private void fillOptionsMapFromOptions() {
		Map<String, String> oldValues = new HashMap<>();
		for (Properties props : optionsMap.values())
			for (Object keyObject : props.keySet()) {
				String key = (String) keyObject;
				oldValues.put(key, props.getProperty(key));
			}

		optionsMap.clear();
		for (PluginNode plugin : PLUGIN_LIST) {
			Properties props = new Properties();
			try {
				URL resource = Platform.getBundle(plugin.getPlugin())
						.getResource(".options"); //$NON-NLS-1$
				if (resource != null) {
					InputStream is = resource.openStream();
					try {
						props.load(is);
					} finally {
						is.close();
					}
				}
			} catch (IOException e) {
				Activator.handleError(e.getMessage(), e, true);
			}
			optionsMap.put(plugin, props);
		}

		Map<String, String> newValues = new HashMap<>();
		for (Properties props : optionsMap.values())
			for (Object keyObject : props.keySet()) {
				String key = (String) keyObject;
				oldValues.put(key, props.getProperty(key));
			}

		boolean dirty = false;
		if (oldValues.keySet().containsAll(newValues.keySet())
				&& newValues.keySet().containsAll(oldValues.keySet())) {
			for (Entry<String, String> oldValueEntry : oldValues.entrySet()) {
				String key = oldValueEntry.getKey();
				// don't in-line key here, as it would disquiet findbugs
				String newValue = newValues.get(key);
				if (!oldValueEntry.getValue().equals(newValue)) {
					dirty = true;
					break;
				}
			}
		} else {
			dirty = true;
		}
		if (dirty)
			setDirty(true);
	}

