	/**
	 * Runs the given {@code runnable} in a background job, reporting progress
	 * through the dialog's progress monitor, if any, and invoking
	 * {@code onCancel} if the job is canceled.
	 * <p>
	 * The dialog is <em>not</em> made inactive while the job runs.
	 * </p>
	 * <p>
	 * Such background jobs are queued and will execute one after another. They
	 * are canceled when the current wizard page changes, or when the dialog
	 * closes.
	 * </p>
	 *
	 * @param runnable
	 *            to run
	 * @param onCancel
	 *            to run when the job is canceled; may be {@code null}
	 */
	public void run(IRunnableWithProgress runnable, Runnable onCancel) {
		Assert.isNotNull(runnable);
		synchronized (jobs) {
			BackgroundJob newJob = new BackgroundJob(runnable, onCancel,
					getCurrentPage());
			jobs.add(newJob);
			if (jobs.size() == 1) {
				newJob.schedule();
			}
		}
	}

