	private void validateInput() {
		// don't do anything if dialog is disposed
		if (getShell() == null) {
			return;
		}

		// validate tag name
		String tagNameMessage = tagNameValidator.isValid(tagNameText.getText());
		setErrorMessage(tagNameMessage);

		String tagMessageVal = tagMessageText.getText().trim();

		boolean isLightWeight = tagMessageVal.isEmpty();
		Control button = getButton(IDialogConstants.OK_ID);
		if (button != null) {
			boolean containsTagNameAndMessage = (tagNameMessage == null
					|| tagMessageVal.length() == 0)
					&& tagMessageVal.length() != 0;
			boolean shouldOverwriteTag = (overwriteButton.getSelection()
					&& Repository.isValidRefName(
							Constants.R_TAGS + tagNameText.getText()));

			boolean enabled = containsTagNameAndMessage || shouldOverwriteTag
					|| (isLightWeight && tagNameMessage == null
							&& !tagNameText.getText().isEmpty());
			button.setEnabled(enabled);

			Button createTagAndStartPush = getButton(CREATE_AND_START_PUSH_ID);
			if (createTagAndStartPush != null)
				createTagAndStartPush.setEnabled(enabled);
		}

		boolean existingTagSelected = existingTag != null;
		boolean readOnly = (existingTagSelected
				&& !overwriteButton.getSelection());
		tagMessageText.getTextWidget().setEditable(!readOnly);

		overwriteButton.setEnabled(existingTagSelected);
		if (!existingTagSelected)
			overwriteButton.setSelection(false);
	}

