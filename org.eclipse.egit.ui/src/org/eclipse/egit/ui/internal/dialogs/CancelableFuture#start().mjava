	/**
	 * On the first call, starts a background job to fetch the result.
	 * Subsequent calls do nothing and return immediately. Before creating and
	 * scheduling the job, {@link #prepareRun()} is called.
	 *
	 * @throws InvocationTargetException
	 *             propagated from {@link #prepareRun()}
	 */
	public synchronized void start() throws InvocationTargetException {
		if (job != null || state != State.PRISTINE) {
			return;
		}
		try {
			prepareRun();
		} catch (InvocationTargetException e) {
			finish(false);
			throw e;
		}
		job = new InterruptibleJob(getJobTitle()) {

			@Override
			protected IStatus run(IProgressMonitor monitor) {
				try {
					CancelableFuture.this.run(monitor);
					return Status.OK_STATUS;
				} catch (InterruptedException e) {
					return Status.CANCEL_STATUS;
				} catch (InvocationTargetException e) {
					synchronized (CancelableFuture.this) {
						if (state == State.CANCELING
								|| state == State.INTERRUPT) {
							return Status.CANCEL_STATUS;
						}
					}
					return Activator.createErrorStatus(e.getLocalizedMessage(),
							e);
				} catch (RuntimeException e) {
					return Activator.createErrorStatus(e.getLocalizedMessage(),
							e);
				}
			}

		};
		job.addJobChangeListener(new JobChangeAdapter() {

			@Override
			public void done(IJobChangeEvent event) {
				IStatus status = event.getResult();
				finish(status != null && status.isOK());
			}

		});
		job.setUser(false);
		job.setSystem(true);
		state = State.SCHEDULED;
		job.schedule();
	}

