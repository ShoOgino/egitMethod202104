	private void buildTrees() {
		final Object[] wsExpaneded = leftTree.getExpandedElements();
		final Object[] gitExpanded = rightTree.getExpandedElements();
		final ISelection wsSel = leftTree.getSelection();
		final ISelection gitSel = rightTree.getSelection();
		rightTree.setInput(null);
		leftTree.setInput(null);

		if (leftVersion == null) {
			leftTree
					.setContentProvider(new LocalWorkbenchTreeContentProvider());
			leftTree.setLabelProvider(new AddingWorkbenchLabelProvider());

			rightTree
					.setContentProvider(new RepositoryWorkbenchTreeContentProvider());

			rightTree.setLabelProvider(new GitWorkbenchLabelProvider());
		} else {
			leftTree.setContentProvider(new LeftTreeContentProvider());
			leftTree.setLabelProvider(new RepositoryTreeLabelProvider());

			rightTree.setContentProvider(new RightTreeContentProvider());

			rightTree.setLabelProvider(new RepositoryTreeLabelProvider());
		}
		for (IWorkbenchAction action : actionsToDispose)
			action.setEnabled(false);

		showAddedOnly = Activator.getDefault().getPreferenceStore().getBoolean(
				UIPreferences.TREE_COMPARE_ADDED_ONLY);
		showDeletedOnly = Activator.getDefault().getPreferenceStore()
				.getBoolean(UIPreferences.TREE_COMPARE_DELETED_ONLY);
		showEquals = Activator.getDefault().getPreferenceStore().getBoolean(
				UIPreferences.TREE_COMPARE_SHOW_EQUALS);
		final Repository repo;
		if (input instanceof IResource[]) {
			repositoryMapping = RepositoryMapping
					.getMapping(((IResource[]) input)[0]);
			if (repositoryMapping == null
					|| repositoryMapping.getRepository() == null)
				return;
			repo = repositoryMapping.getRepository();
		} else if (input instanceof Repository) {
			repo = (Repository) input;
		} else
			return;
		final RevCommit leftCommit;
		final RevCommit rightCommit;
		RevWalk rw = new RevWalk(repo);
		try {
			ObjectId commitId = repo.resolve(rightVersion);
			rightCommit = commitId != null ? rw.parseCommit(commitId) : null;
			if (leftVersion == null)
				leftCommit = null;
			else {
				commitId = repo.resolve(leftVersion);
				leftCommit = rw.parseCommit(commitId);
			}
		} catch (IOException e) {
			Activator.handleError(e.getMessage(), e, true);
			return;
		} finally {
			rw.release();
		}
		showBusy(true);
		try {
			// this does the hard work...
			new ProgressMonitorDialog(getViewSite().getShell()).run(true, true,
					new IRunnableWithProgress() {
						public void run(IProgressMonitor monitor)
								throws InvocationTargetException,
								InterruptedException {
							try {
								buildMaps(repo, leftCommit, rightCommit,
										monitor);
								PlatformUI.getWorkbench().getDisplay()
										.asyncExec(new Runnable() {
											public void run() {
												leftTree.setInput(input);
												rightTree.setInput(input);
												leftTree
														.setExpandedElements(wsExpaneded);
												rightTree
														.setExpandedElements(gitExpanded);
												leftTree.setSelection(wsSel);
												rightTree.setSelection(gitSel);
												updateControls();
											}
										});
							} catch (IOException e) {
								throw new InvocationTargetException(e);
							}
						}
					});
		} catch (InvocationTargetException e) {
			Activator.handleError(e.getTargetException().getMessage(), e
					.getTargetException(), true);
		} catch (InterruptedException e) {
			input = null;
		} finally {
			showBusy(false);
		}
	}

