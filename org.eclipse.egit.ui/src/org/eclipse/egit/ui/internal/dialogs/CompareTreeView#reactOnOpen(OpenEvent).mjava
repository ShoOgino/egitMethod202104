	private void reactOnOpen(OpenEvent event) {
		Object selected = ((IStructuredSelection) event.getSelection())
				.getFirstElement();
		ITypedElement left;
		ITypedElement right;
		if (selected instanceof IContainer) {
			// open/close folder
			TreeViewer tv = (TreeViewer) event.getViewer();
			tv.setExpandedState(selected, !tv.getExpandedState(selected));
			return;
		} else if (selected instanceof IFile) {
			final IFile res = (IFile) selected;
			left = new EditableRevision(new LocalFileRevision(res)) {
				@Override
				public void setContent(final byte[] newContent) {
					try {
						PlatformUI.getWorkbench().getProgressService().run(
								false, false, new IRunnableWithProgress() {
									public void run(IProgressMonitor myMonitor)
											throws InvocationTargetException,
											InterruptedException {
										try {
											res.setContents(
													new ByteArrayInputStream(
															newContent), false,
													true, myMonitor);
										} catch (CoreException e) {
											throw new InvocationTargetException(
													e);
										}
									}
								});
					} catch (InvocationTargetException e) {
						Activator.handleError(e.getTargetException()
								.getMessage(), e.getTargetException(), true);
					} catch (InterruptedException e) {
						// ignore here
					}
				}
			};
			GitFileRevision rightRevision = rightVersionMap.get(new Path(
					repositoryMapping.getRepoRelativePath(res)));
			if (rightRevision == null)
				right = new GitCompareFileRevisionEditorInput.EmptyTypedElement(
						NLS.bind(
								UIText.CompareTreeView_ItemNotFoundInVersionMessage,
								res.getName(), getRightVersion()));
			else
				right = new FileRevisionTypedElement(rightRevision);
			GitCompareFileRevisionEditorInput compareInput = new GitCompareFileRevisionEditorInput(
					left, right, PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage());
			CompareUtils.openInCompare(PlatformUI.getWorkbench()
					.getActiveWorkbenchWindow().getActivePage(), compareInput);
		} else if (selected instanceof GitFileRevision) {
			GitFileRevision rightRevision = (GitFileRevision) selected;
			left = new GitCompareFileRevisionEditorInput.EmptyTypedElement(NLS
					.bind(UIText.CompareTreeView_ItemNotFoundInVersionMessage,
							rightRevision.getName(), getLeftVersion()));
			right = new FileRevisionTypedElement(rightRevision);
		} else if (selected instanceof PathNode) {
			PathNode node = (PathNode) selected;
			switch (node.type) {
			case FILE_BOTH_SIDES_DIFFER:
				// fall through
			case FILE_BOTH_SIDES_SAME: {
				// open a compare editor with both sides filled
				GitFileRevision rightRevision = rightVersionMap.get(node.path);
				right = new FileRevisionTypedElement(rightRevision);
				GitFileRevision leftRevision = leftVersionMap.get(node.path);
				left = new FileRevisionTypedElement(leftRevision);
				break;
			}
			case FILE_DELETED: {
				// open compare editor with left side empty
				GitFileRevision rightRevision = rightVersionMap.get(node.path);
				right = new FileRevisionTypedElement(rightRevision);
				left = new GitCompareFileRevisionEditorInput.EmptyTypedElement(
						NLS.bind(
								UIText.CompareTreeView_ItemNotFoundInVersionMessage,
								rightRevision.getName(), getLeftVersion()));
				break;
			}
			case FILE_ADDED: {
				// open compare editor with right side empty
				GitFileRevision leftRevision = leftVersionMap.get(node.path);
				left = new FileRevisionTypedElement(leftRevision);
				right = new GitCompareFileRevisionEditorInput.EmptyTypedElement(
						NLS.bind(
								UIText.CompareTreeView_ItemNotFoundInVersionMessage,
								leftRevision.getName(), getRightVersion()));
				break;
			}
			case FOLDER:
				// open/close folder
				TreeViewer tv = (TreeViewer) event.getViewer();
				tv.setExpandedState(selected, !tv.getExpandedState(selected));
				return;
			default:
				return;
			}

		} else
			return;

		GitCompareFileRevisionEditorInput compareInput = new GitCompareFileRevisionEditorInput(
				left, right, PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getActivePage());
		CompareUtils.openInCompare(PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage(), compareInput);
	}

