	private void createLeftSection(SashForm mainForm) {
		Composite left = new Composite(mainForm, SWT.RESIZE);
		left.setLayout(GridLayoutFactory.swtDefaults().margins(10, 5).create());
		left.setLayoutData(
				GridDataFactory.fillDefaults().grab(true, true).create());

		Label label = new Label(left, SWT.WRAP);
		label.setText(UIText.CreateTagDialog_tagName);
		GridData data = new GridData(
				GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL
						| GridData.VERTICAL_ALIGN_CENTER);
		data.widthHint = convertHorizontalDLUsToPixels(
				IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH / 2);
		label.setLayoutData(data);
		label.setFont(left.getFont());

		tagNameText = new Text(left,
				SWT.SINGLE | SWT.BORDER | SWT.SEARCH | SWT.ICON_CANCEL);
		tagNameText.setLayoutData(new GridData(
				GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
		tagNameText.addModifyListener(new ModifyListener() {

			@Override
			public void modifyText(ModifyEvent e) {
				String tagNameValue = tagNameText.getText();
				tagNamePattern = Pattern.compile(Pattern.quote(tagNameValue),
						Pattern.CASE_INSENSITIVE);
				tagViewer.refresh();
				// Only parse/set tag once (otherwise it would be set twice when
				// selecting from the existing tags)
				if (existingTag == null
						|| !tagNameValue.equals(existingTag.getName()))
					setExistingTagFromText(tagNameValue);
				validateInput();
			}
		});
		BranchNameNormalizer normalizer = new BranchNameNormalizer(tagNameText);
		normalizer.setVisible(false);

		new Label(left, SWT.WRAP).setText(UIText.CreateTagDialog_tagMessage);

		tagMessageText = new SpellcheckableMessageArea(left, tagMessage);
		Point size = tagMessageText.getTextWidget().getSize();
		tagMessageText.setLayoutData(GridDataFactory.fillDefaults().hint(size)
				.grab(true, true).create());

		// allow to tag with ctrl-enter
		tagMessageText.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if (UIUtils.isSubmitKeyEvent(e)) {
					Control button = getButton(IDialogConstants.OK_ID);
					// fire OK action only when button is enabled
					if (button != null && button.isEnabled())
						buttonPressed(IDialogConstants.OK_ID);
				}
			}
		});

		tagMessageText.getTextWidget().addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				validateInput();
				if (signButton != null && !signExplicit && !signAll) {
					String message = tagMessageText.getText();
					signButton
							.setSelection(!message.isEmpty() && signAnnotated);
				}
			}
		});

		overwriteButton = new Button(left, SWT.CHECK);
		overwriteButton.setEnabled(false);
		overwriteButton.setText(UIText.CreateTagDialog_overwriteTag);
		overwriteButton
				.setToolTipText(UIText.CreateTagDialog_overwriteTagToolTip);
		overwriteButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				validateInput();
			}
		});

		GpgSigner signer = GpgSetup.getDefault();
		if (signer instanceof GpgObjectSigner) {
			PersonIdent tagger = new PersonIdent(repo);
			// Ensure the Eclipse preference, if set, overrides the git config
			File gpg = GitSettings.getGpgExecutable();
			GpgConfig gpgConfig = new GpgConfig(repo.getConfig()) {

				@Override
				public String getProgram() {
					return gpg != null ? gpg.getAbsolutePath()
							: super.getProgram();
				}
			};
			if (SignatureUtils.checkSigningKey(signer, gpgConfig, tagger)) {
				// We can sign at all.
				signAll = gpgConfig.isSignAllTags();
				signAnnotated = gpgConfig.isSignAnnotated();
				signButton = new Button(left, SWT.CHECK);
				signButton.setText(UIText.CreateTagDialog_signTag);
				signButton
						.setToolTipText(UIText.CreateTagDialog_signTagToolTip);
				signButton.setSelection(signAll);
				signButton.addSelectionListener(new SelectionAdapter() {

					@Override
					public void widgetSelected(SelectionEvent e) {
						super.widgetSelected(e);
						signExplicit = true;
					}
				});
			} else {
				String signingKey = gpgConfig.getSigningKey();
				if (!StringUtils.isEmptyOrNull(signingKey)) {
					CLabel warning = new CLabel(left, SWT.WRAP);
					warning.setText(MessageFormat.format(
							UIText.CreateTagDialog_noSigningKey, signingKey));
					warning.setToolTipText(
							UIText.CreateTagDialog_noSigningKeyToolTip);
					warning.setImage(PlatformUI.getWorkbench().getSharedImages()
							.getImage(ISharedImages.IMG_OBJS_WARN_TSK));
				}
			}
		}

		createAdvancedSection(left);
	}

