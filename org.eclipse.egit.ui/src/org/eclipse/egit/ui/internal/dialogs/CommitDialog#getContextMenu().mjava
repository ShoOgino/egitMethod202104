	private Menu getContextMenu() {
		Menu menu = new Menu(filesViewer.getTable());
		MenuItem item = new MenuItem(menu, SWT.PUSH);
		item.setText(UIText.CommitDialog_AddFileOnDiskToIndex);
		item.addListener(SWT.Selection, new Listener() {
			public void handleEvent(Event arg0) {
				IStructuredSelection sel = (IStructuredSelection) filesViewer.getSelection();
				if (sel.isEmpty()) {
					return;
				}
				try {
					ArrayList<GitIndex> changedIndexes = new ArrayList<GitIndex>();
					for (Iterator<?> it = sel.iterator(); it.hasNext();) {
						CommitItem commitItem = (CommitItem) it.next();

						IProject project = commitItem.file.getProject();
						RepositoryMapping map = RepositoryMapping.getMapping(project);

						Repository repo = map.getRepository();
						GitIndex index = null;
						index = repo.getIndex();
						String repoRelativePath = map.getRepoRelativePath(commitItem.file);
						Entry entry = index.getEntry(repoRelativePath);
						if (entry != null && entry.isModified(map.getWorkDir())) {
							entry.update(new File(map.getWorkDir(), entry.getName()));
							if (!changedIndexes.contains(index))
								changedIndexes.add(index);
							commitItem.status = UIText.CommitDialog_StatusModified;
						} else if (entry == null) {
							final Tree headTree = repo.mapTree(Constants.HEAD);
							TreeEntry  headEntry = (headTree == null ? null : headTree.findBlobMember(repoRelativePath));
							if (headEntry == null){
								entry = index.add(map.getWorkDir(), new File(map.getWorkDir(), repoRelativePath));
								if (!changedIndexes.contains(index))
									changedIndexes.add(index);
								commitItem.status = UIText.CommitDialog_StatusAdded;
							}
						}
					}
					if (!changedIndexes.isEmpty()) {
						for (GitIndex idx : changedIndexes) {
							idx.write();
						}
						filesViewer.refresh(true);
					}
				} catch (IOException e) {

					return;
				}
			}
		});

		return menu;
	}

