	/**
	 * Indicates if it is OK to open the selected file directly in a compare
	 * editor.
	 * <p>
	 * It is not OK to show the single file if the file is part of a logical
	 * model element that spans multiple files.
	 * </p>
	 *
	 * @param file
	 *            file the user is trying to compare
	 * @param context
	 *            resource mapping context model providers can use to fetch
	 *            remote data for the resource variants.
	 * @return <code>true</code> if the file can be opened directly in a compare
	 *         editor, <code>false</code> if the synchronize view should be
	 *         opened instead.
	 */
	public static boolean canDirectlyOpenInCompare(@NonNull IFile file,
			ResourceMappingContext context) {
		/*
		 * Using a local context for the ResourceMapping computation would make
		 * for a faster test... but we need the model providers to be able to
		 * load remote information. The local file may very well be a single
		 * file, but it is possible that the remote side has multiple files to
		 * take into account for that model. (if part of the logical model has
		 * been locally deleted, or if some new files have been created on the
		 * remote side(s).)
		 */
		// Only builds the logical model if the preference holds true
		if (Activator.getDefault().getPreferenceStore()
				.getBoolean(UIPreferences.USE_LOGICAL_MODEL)) {

			final ResourceMapping[] mappings = ResourceUtil
					.getResourceMappings(file, context);

			for (ResourceMapping mapping : mappings) {
				try {
					final ResourceTraversal[] traversals = mapping
							.getTraversals(context, null);
					for (ResourceTraversal traversal : traversals) {
						final IResource[] resources = traversal.getResources();
						if (resources.length > 1
								&& Arrays.asList(resources).contains(file)) {
							return false;
						}
					}
				} catch (CoreException e) {
					Activator.logError(e.getMessage(), e);
				}
			}

		}
		return true;
	}

