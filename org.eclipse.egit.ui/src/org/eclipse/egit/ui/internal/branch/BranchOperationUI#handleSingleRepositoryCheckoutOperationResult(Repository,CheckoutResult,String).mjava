	/**
	 * @param repository
	 * @param result
	 *            Result of previous attempt to check out branch.
	 * @param target
	 *            Name of the branch to be checked out.
	 */
	public static void handleSingleRepositoryCheckoutOperationResult(
			Repository repository, CheckoutResult result, String target) {

		switch (result.getStatus()) {
		case CONFLICTS:
			PlatformUI.getWorkbench().getDisplay().asyncExec(() -> {
				Shell shell = PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getShell();
				if (UIRepositoryUtils.showCleanupDialog(repository,
						result.getConflictList(),
						UIText.BranchResultDialog_CheckoutConflictsTitle,
						shell)) {
					BranchOperationUI.checkout(repository, target, false)
							.start();
				}
			});
			break;
		case NONDELETED:
			// double-check if the files are still there
			boolean show = false;
			List<String> pathList = result.getUndeletedList();
			for (String path : pathList)
				if (new File(repository.getWorkTree(), path).exists()) {
					show = true;
					break;
				}

			if (!show) {
				return;
			}
			PlatformUI.getWorkbench().getDisplay().asyncExec(() -> {
				Shell shell = PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getShell();
				new NonDeletedFilesDialog(shell, repository,
						result.getUndeletedList()).open();
			});
			break;
		case OK:
			return;
		case NOT_TRIED:
		case ERROR:
			String repoName = RepositoryUtil.getInstance()
					.getRepositoryName(repository);
			String message = NLS.bind(
					UIText.BranchOperationUI_CheckoutError_DialogMessage,
					repoName, target);
			PlatformUI.getWorkbench().getDisplay().asyncExec(() -> {
				Shell shell = PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getShell();
				MessageDialog.openError(shell,
						UIText.BranchOperationUI_CheckoutError_DialogTitle,
						message);
			});
		}
	}

