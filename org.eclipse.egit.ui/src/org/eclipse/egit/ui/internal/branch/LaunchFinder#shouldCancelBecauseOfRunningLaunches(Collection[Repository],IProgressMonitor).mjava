	/**
	 * Checks whether there are any running launches based on projects belonging
	 * to the given repositories. If so, asks the user whether to cancel, and
	 * returns the user's choice. The user has the possibility to suppress the
	 * dialog, in which case this method returns {@code false} without checking
	 * for running launches.
	 *
	 * @param repositories
	 *            to determine projects to be checked whether they are used in
	 *            running launches
	 * @param monitor
	 *            for progress reporting and cancellation
	 * @return {@code true} if the operation should be canceled, {@code false}
	 *         otherwise
	 */
	public static boolean shouldCancelBecauseOfRunningLaunches(
			Collection<Repository> repositories, IProgressMonitor monitor) {
		final IPreferenceStore store = Activator.getDefault()
				.getPreferenceStore();
		if (!store.getBoolean(
				UIPreferences.SHOW_RUNNING_LAUNCH_ON_CHECKOUT_WARNING)) {
			return false;
		}
		SubMonitor progress = SubMonitor.convert(monitor);
		final String launchConfiguration = getRunningLaunchConfiguration(
				repositories,
				progress);
		if (launchConfiguration != null) {
			final boolean[] dialogResult = new boolean[1];
			PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
				@Override
				public void run() {
					dialogResult[0] = showContinueDialogInUI(store,
							launchConfiguration);
				}
			});
			return dialogResult[0];
		}
		return false;
	}

