	private void createForceColumn(final TableColumnLayout columnLayout) {
		final TableViewerColumn column = createColumn(columnLayout,
				UIText.RefSpecPanel_columnForce, COLUMN_FORCE_WEIGHT,
				SWT.CENTER);
		column.setLabelProvider(new ControlLabelProvider() {

			@Override
			public Control setEditor(ViewerCell cell, Composite parent,
					Control existing, Object element) {
				Button editor;
				if (existing != null) {
					editor = (Button) existing;
				} else {
					editor = new Button(parent, SWT.CHECK);
					editor.addSelectionListener(new SelectionAdapter() {

						@Override
						public void widgetSelected(SelectionEvent e) {
							Button b = (Button) e.getSource();
							RefSpec oldSpec = (RefSpec) b.getData();
							RefSpec newSpec = oldSpec
									.setForceUpdate(b.getSelection());
							setRefSpec(oldSpec, newSpec);
							tableViewer.setSelection(
									new StructuredSelection(newSpec), false);
						}
					});
					if (Util.isWindows()) {
						// Work-around for a rendering bug on Windows: the area
						// above and below the checkbox is not redrawn when the
						// selection changes.
						ISelectionChangedListener listener = event -> {
							if (!editor.isDisposed()) {
								editor.redraw();
							}
						};
						tableViewer.addSelectionChangedListener(listener);
						editor.addDisposeListener(event -> tableViewer
								.removeSelectionChangedListener(listener));
					}
				}
				boolean isDeletion = isDeleteRefSpec(element);
				editor.setData(element);
				editor.setEnabled(!isDeletion);
				editor.setSelection(
						((RefSpec) element).isForceUpdate() || isDeletion);
				return editor;
			}

			@Override
			public String getToolTipText(Object element) {
				if (element instanceof RefSpec) {
					RefSpec refSpec = (RefSpec) element;
					if (isDeleteRefSpec(refSpec)) {
						return UIText.RefSpecPanel_forceDeleteDescription;
					} else if (refSpec.isForceUpdate()) {
						return UIText.RefSpecPanel_forceTrueDescription + '\n'
								+ UIText.RefSpecPanel_clickToChange;
					}
					return UIText.RefSpecPanel_forceFalseDescription + '\n'
							+ UIText.RefSpecPanel_clickToChange;
				}
				return null;
			}

		});
	}

