	/**
	 * Sorts the branches in ascending order by name and inserts a new ref for
	 * the given {@link #localBranchName} if not {@code null} and not present in
	 * {@code refs}.
	 *
	 * @param refs
	 *            obtained from the upstream repository
	 * @return the sorted list of branches, possibly with the suggestion in
	 *         front.
	 */
	@Override
	protected Collection<Ref> convert(Collection<Ref> refs) {
		List<Ref> filtered = new ArrayList<>();
		String localFullName = localBranchName != null
				? Constants.R_HEADS + localBranchName
				: null;
		boolean localBranchFound = false;
		// Restrict to branches
		for (Ref ref : refs) {
			String name = ref.getName();
			if (name.startsWith(Constants.R_HEADS)) {
				filtered.add(ref);
				if (localFullName != null
						&& localFullName.equalsIgnoreCase(name)) {
					localBranchFound = true;
				}
			}
		}
		// Sort them
		Collections.sort(filtered, CommonUtils.REF_ASCENDING_COMPARATOR);
		// Add a new remote ref for localBranchName in front if it doesn't
		// exist
		if (localFullName != null && !localBranchFound) {
			List<Ref> newRefs = new ArrayList<>(filtered.size() + 1);
			newRefs.add(new ObjectIdRef.Unpeeled(Storage.NEW, localFullName,
					ObjectId.zeroId()));
			newRefs.addAll(filtered);
			filtered = newRefs;
		}
		return filtered;
	}

