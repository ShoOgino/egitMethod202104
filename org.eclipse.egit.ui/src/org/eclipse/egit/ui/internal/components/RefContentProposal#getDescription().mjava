	@Override
	public String getDescription() {
		if (objectId == null) {
			return null;
		}
		try (ObjectReader reader = db.newObjectReader()) {
			ObjectLoader loader = null;
			try {
				loader = reader.open(objectId);
			} catch (MissingObjectException e) {
				if (upstream) {
					return refName + '\n' + objectId.abbreviate(7).name()
							+ " - " //$NON-NLS-1$
							+ UIText.RefContentProposal_unknownRemoteObject;
				}
				throw e;
			}
			final StringBuilder sb = new StringBuilder();
			sb.append(refName);
			sb.append('\n');
			sb.append(reader.abbreviate(objectId).name());
			sb.append(" - "); //$NON-NLS-1$

			switch (loader.getType()) {
			case Constants.OBJ_COMMIT:
				try (RevWalk rw = new RevWalk(db)) {
					RevCommit c = rw.parseCommit(objectId);
					appendObjectSummary(sb, UIText.RefContentProposal_commit,
							c.getAuthorIdent(), c.getFullMessage());
				}
				break;
			case Constants.OBJ_TAG:
				try (RevWalk rw = new RevWalk(db)) {
					RevTag t = rw.parseTag(objectId);
					appendObjectSummary(sb, UIText.RefContentProposal_tag,
							t.getTaggerIdent(), t.getFullMessage());
				}
				break;
			case Constants.OBJ_TREE:
				sb.append(UIText.RefContentProposal_tree);
				break;
			case Constants.OBJ_BLOB:
				sb.append(UIText.RefContentProposal_blob);
				break;
			default:
				sb.append(UIText.RefContentProposal_unknownObject);
			}
			return sb.toString();
		} catch (IOException e) {
			Activator.logError(NLS.bind(
					UIText.RefContentProposal_errorReadingObject, objectId,
					refName), e);
			return null;
		}
	}

