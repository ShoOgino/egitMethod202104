	private void createLocationGroup(final Composite parent) {
		final Group g = createGroup(parent,
				UIText.RepositorySelectionPage_groupLocation);

		g.setLayout(new GridLayout(3, false));

		newLabel(g, UIText.RepositorySelectionPage_promptURI + ":"); //$NON-NLS-1$
		uriText = new Text(g, SWT.BORDER);
		uriText.setLayoutData(createFieldGridData());
		uriText.addModifyListener(new ModifyListener() {
			public void modifyText(final ModifyEvent e) {
				try {
					eventDepth++;
					if (eventDepth != 1)
						return;

					final URIish u = new URIish(uriText.getText());
					safeSet(hostText, u.getHost());
					safeSet(pathText, u.getPath());
					safeSet(userText, u.getUser());
					safeSet(passText, u.getPass());

					if (u.getPort() > 0)
						portText.setText(Integer.toString(u.getPort()));
					else
						portText.setText(""); //$NON-NLS-1$

					if (isFile(u))
						scheme.select(S_FILE);
					else if (isSSH(u))
						scheme.select(S_SSH);
					else {
						for (int i = 0; i < DEFAULT_SCHEMES.length; i++) {
							if (DEFAULT_SCHEMES[i].equals(u.getScheme())) {
								scheme.select(i);
								break;
							}
						}
					}

					updateAuthGroup();
					uri = u;
				} catch (URISyntaxException err) {
					// leave uriText as it is, but clean up underlying uri and
					// decomposed fields
					uri = new URIish();
					hostText.setText(""); //$NON-NLS-1$
					pathText.setText(""); //$NON-NLS-1$
					userText.setText(""); //$NON-NLS-1$
					passText.setText(""); //$NON-NLS-1$
					portText.setText(""); //$NON-NLS-1$
					scheme.select(0);
				} finally {
					eventDepth--;
				}
				checkPage();
			}
		});

		Button browseButton = new Button(g, SWT.NULL);
		browseButton.setText(UIText.RepositorySelectionPage_BrowseLocalFile);
		browseButton.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				DirectoryDialog dialog = new DirectoryDialog(getShell());
				// if a file-uri was selected before, let's try to open
				// the directory dialog on the same directory
				if (!uriText.getText().equals("")) { //$NON-NLS-1$
					try {
						URI testUri = URI.create(uriText.getText().replace(
								'\\', '/'));
						if (testUri.getScheme().equals("file")) { //$NON-NLS-1$
							String path = testUri.getPath();
							if (path.length() > 1 && path.startsWith("/")) //$NON-NLS-1$
								path = path.substring(1);

							dialog.setFilterPath(path);
						}
					} catch (IllegalArgumentException e1) {
						// ignore here, we just' don't set the directory in the
						// browser
					}

				}
				String result = dialog.open();
				if (result != null)
					uriText.setText("file:///" + result); //$NON-NLS-1$
			}

		});

		newLabel(g, UIText.RepositorySelectionPage_promptHost + ":"); //$NON-NLS-1$
		hostText = new Text(g, SWT.BORDER);
		GridDataFactory.fillDefaults().span(2, 1).applyTo(hostText);
		hostText.addModifyListener(new ModifyListener() {
			public void modifyText(final ModifyEvent e) {
				setURI(uri.setHost(nullString(hostText.getText())));
			}
		});

		newLabel(g, UIText.RepositorySelectionPage_promptPath + ":"); //$NON-NLS-1$
		pathText = new Text(g, SWT.BORDER);
		GridDataFactory.fillDefaults().span(2, 1).applyTo(pathText);
		pathText.addModifyListener(new ModifyListener() {
			public void modifyText(final ModifyEvent e) {
				setURI(uri.setPath(nullString(pathText.getText())));
			}
		});
	}

