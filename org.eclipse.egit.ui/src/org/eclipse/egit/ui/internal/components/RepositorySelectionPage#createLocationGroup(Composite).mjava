	private void createLocationGroup(final Composite parent) {
		final Group g = createGroup(parent,
				UIText.RepositorySelectionPage_groupLocation);

		g.setLayout(new GridLayout(3, false));

		newLabel(g, UIText.RepositorySelectionPage_promptURI + ":"); //$NON-NLS-1$
		uriText = new Text(g, SWT.BORDER);

		if (presetUri != null) {
			uriText.setText(presetUri);
			uriText.selectAll();
		}

		uriText.setLayoutData(createFieldGridData());
		uriText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(final ModifyEvent e) {
				updateFields(uriText.getText());
			}
		});

		uriProposalHandler = UIUtils.addPreviousValuesContentProposalToText(
				uriText, USED_URIS_PREF);

		Button browseButton = new Button(g, SWT.NULL);
		browseButton.setText(UIText.RepositorySelectionPage_BrowseLocalFile);
		browseButton.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent evt) {
				DirectoryDialog dialog = new DirectoryDialog(getShell());
				// if a file was selected before, let's try to open
				// the directory dialog on the same directory
				if (!uriText.getText().isEmpty()) {
					try {
						// first we try if this is a simple file name
						File testFile = new File(uriText.getText());
						if (testFile.exists()) {
							dialog.setFilterPath(testFile.getPath());
						} else {
							// this could still be a file URIish
							URIish testUri = new URIish(uriText.getText());
							if (Protocol.FILE.defaultScheme
									.equals(testUri.getScheme())) {
								testFile = new File(testUri.getPath());
								if (testFile.exists()) {
									dialog.setFilterPath(testFile.getPath());
								}
							}
						}
					} catch (IllegalArgumentException | URISyntaxException e) {
						// ignore here, we just' don't set the directory in the
						// browser
					}
				}
				// if nothing else, we start the search from the default folder for repositories
				String filterPath = dialog.getFilterPath();
				if (filterPath == null || filterPath.isEmpty()) {
					dialog.setFilterPath(
							RepositoryUtil.getDefaultRepositoryDir());
				}
				String result = dialog.open();
				if (result != null) {
					uriText.setText("file:///" + result); //$NON-NLS-1$
				}
			}

		});

		newLabel(g, UIText.RepositorySelectionPage_promptHost + ":"); //$NON-NLS-1$
		hostText = new Text(g, SWT.BORDER);
		GridDataFactory.fillDefaults().span(2, 1).applyTo(hostText);
		hostText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(final ModifyEvent e) {
				setURI(uri.setHost(nullString(hostText.getText())));
			}
		});

		newLabel(g, UIText.RepositorySelectionPage_promptPath + ":"); //$NON-NLS-1$
		pathText = new Text(g, SWT.BORDER);
		GridDataFactory.fillDefaults().span(2, 1).applyTo(pathText);
		pathText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(final ModifyEvent e) {
				setURI(uri.setPath(nullString(pathText.getText())));
			}
		});

	}

