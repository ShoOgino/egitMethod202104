	private void createLocationGroup(final Composite parent) {
		final Group g = createGroup(parent,
				UIText.RepositorySelectionPage_groupLocation);

		g.setLayout(new GridLayout(4, false));

		newLabel(g, UIText.RepositorySelectionPage_promptURI + ":"); //$NON-NLS-1$
		uriText = new Text(g, SWT.BORDER);

		if (presetUri != null) {
			uriText.setText(presetUri);
			uriText.selectAll();
		}

		uriText.setLayoutData(createFieldGridData());
		uriText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(final ModifyEvent e) {
				updateFields(uriText.getText());
			}
		});

		uriProposalHandler = UIUtils.addPreviousValuesContentProposalToText(
				uriText, USED_URIS_PREF);

		Button browseLocalFolderButton = new Button(g, SWT.NULL);
		if (!sourceSelection) {
			GridDataFactory.fillDefaults().span(2, 1)
					.applyTo(browseLocalFolderButton);
		}
		browseLocalFolderButton.setText(UIText.RepositorySelectionPage_BrowseLocalFolder);
		browseLocalFolderButton.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent evt) {
				DirectoryDialog dialog = new DirectoryDialog(getShell());
				if (sourceSelection) {
					dialog.setMessage(
							UIText.RepositorySelectionPage_sourceSelectionTitle);
				} else {
					dialog.setMessage(
							UIText.RepositorySelectionPage_destinationSelectionTitle);
				}
				dialog.setFilterPath(getUriFilterPath());
				String result = dialog.open();
				if (result != null) {
					uriText.setText(
							Protocol.FILE.getDefaultScheme() + "://" + result); //$NON-NLS-1$
				}
			}

		});

		if (sourceSelection) {
			Button browseLocalBundleFileButton = new Button(g, SWT.NULL);
			browseLocalBundleFileButton.setText(UIText.RepositorySelectionPage_BrowseLocalBundleFile);
			browseLocalBundleFileButton.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent evt) {
					FileDialog dialog = new FileDialog(getShell());
					dialog.setText(UIText.RepositorySelectionPage_sourceSelectionTitle);
					dialog.setFilterPath(getUriFilterPath());

					String result = dialog.open();
					if (result != null) {
								uriText.setText(Protocol.FILE.getDefaultScheme()
										+ "://" + result); //$NON-NLS-1$
					}
				}
			});
		}
		newLabel(g, UIText.RepositorySelectionPage_promptHost + ":"); //$NON-NLS-1$
		hostText = new Text(g, SWT.BORDER);
		GridDataFactory.fillDefaults().span(3, 1).applyTo(hostText);
		hostText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(final ModifyEvent e) {
				setURI(uri.setHost(nullString(hostText.getText())));
			}
		});

		newLabel(g, UIText.RepositorySelectionPage_promptPath + ":"); //$NON-NLS-1$
		pathText = new Text(g, SWT.BORDER);
		GridDataFactory.fillDefaults().span(3, 1).applyTo(pathText);
		pathText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(final ModifyEvent e) {
				setURI(uri.setPath(nullString(pathText.getText())));
			}
		});

	}

