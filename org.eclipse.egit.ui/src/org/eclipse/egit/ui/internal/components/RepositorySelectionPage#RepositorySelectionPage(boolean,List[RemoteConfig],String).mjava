	/**
	 * Create repository selection page, allowing user specifying URI or
	 * (optionally) choosing from preconfigured remotes list.
	 * <p>
	 * Wizard page is created without image, just with text description.
	 *
	 * @param sourceSelection
	 *            true if dialog is used for source selection; false otherwise
	 *            (destination selection). This indicates appropriate text
	 *            messages.
	 * @param configuredRemotes
	 *            list of configured remotes that user may select as an
	 *            alternative to manual URI specification. Remotes appear in
	 *            given order in GUI, with
	 *            {@value Constants#DEFAULT_REMOTE_NAME} as the default choice.
	 *            List may be null or empty - no remotes configurations appear
	 *            in this case. Note that the provided list may be changed by
	 *            this constructor.
	 * @param presetUri
	 *            the pre-set URI, may be null
	 */
	public RepositorySelectionPage(final boolean sourceSelection,
			final List<RemoteConfig> configuredRemotes, String presetUri) {

		super(RepositorySelectionPage.class.getName());

		this.uri = new URIish();
		this.sourceSelection = sourceSelection;

		String preset = null;
		if (presetUri == null) {
			Clipboard clippy = new Clipboard(Display.getCurrent());
			String text = (String) clippy.getContents(TextTransfer
					.getInstance());
			try {
				if (text != null) {
					text = text.trim();
					int index = text.indexOf(' ');
					if (index > 0)
						text = text.substring(0, index);
					URIish u = new URIish(text);
					if (Transport.canHandleProtocol(u, FS.DETECTED)) {
						if (Protocol.GIT.handles(u) || Protocol.SSH.handles(u)
								|| text.endsWith(Constants.DOT_GIT))
							preset = text;
					}
				}
			} catch (URISyntaxException e) {
				preset = null;
			}
			clippy.dispose();
		}
		this.presetUri = preset;

		this.configuredRemotes = getUsableConfigs(configuredRemotes);
		this.remoteConfig = selectDefaultRemoteConfig();

		selection = RepositorySelection.INVALID_SELECTION;

		if (sourceSelection) {
			setTitle(UIText.RepositorySelectionPage_sourceSelectionTitle);
			setDescription(UIText.RepositorySelectionPage_sourceSelectionDescription);
		} else {
			setTitle(UIText.RepositorySelectionPage_destinationSelectionTitle);
			setDescription(UIText.RepositorySelectionPage_destinationSelectionDescription);
		}
	}

