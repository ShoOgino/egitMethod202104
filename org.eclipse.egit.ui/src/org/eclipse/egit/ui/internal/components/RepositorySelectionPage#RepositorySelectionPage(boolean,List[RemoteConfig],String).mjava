	/**
	 * Special case: the URI is set externally
	 *
	 * @param sourceSelection
	 *            true if dialog is used for source selection; false otherwise
	 *            (destination selection). This indicates appropriate text
	 *            messages.
	 * @param configuredRemotes
	 *            list of configured remotes that user may select as an
	 *            alternative to manual URI specification. Remotes appear in
	 *            given order in GUI, with
	 *            {@value Constants#DEFAULT_REMOTE_NAME} as the default choice.
	 *            List may be null or empty - no remotes configurations appear
	 *            in this case. Note that the provided list may be changed by
	 *            this constructor.
	 * @param presetUri
	 *            the pre-set URI
	 */
	public RepositorySelectionPage(final boolean sourceSelection,
			final List<RemoteConfig> configuredRemotes, String presetUri) {
		super(RepositorySelectionPage.class.getName());
		this.uri = new URIish();
		this.sourceSelection = sourceSelection;
		this.presetUri = presetUri;

		if (configuredRemotes != null)
			removeUnusableRemoteConfigs(configuredRemotes);
		if (configuredRemotes == null || configuredRemotes.isEmpty())
			this.configuredRemotes = null;
		else {
			this.configuredRemotes = configuredRemotes;
			this.remoteConfig = selectDefaultRemoteConfig();
		}
		selection = RepositorySelection.INVALID_SELECTION;

		if (sourceSelection) {
			setTitle(UIText.RepositorySelectionPage_sourceSelectionTitle);
			setDescription(UIText.RepositorySelectionPage_sourceSelectionDescription);
		} else {
			setTitle(UIText.RepositorySelectionPage_destinationSelectionTitle);
			setDescription(UIText.RepositorySelectionPage_destinationSelectionDescription);
		}
	}

