	private void reactOnSelection(ISelection selection) {
		if (!(selection instanceof IStructuredSelection)) {
			return;
		}
		IStructuredSelection ssel = (IStructuredSelection) selection;
		if (ssel.size() != 1) {
			return;
		}
		Repository selectedRepo = null;
		Object first = ssel.getFirstElement();
		if (first instanceof IResource) {
			IResource resource = (IResource) first;
			RepositoryMapping mapping = RepositoryMapping.getMapping(resource);
			if (mapping != null) {
				selectedRepo = mapping.getRepository();
			}
		}
		if (selectedRepo == null) {
			IResource adapted = AdapterUtils.adapt(first, IResource.class);
			if (adapted != null) {
				RepositoryMapping mapping = RepositoryMapping
						.getMapping(adapted);
				if (mapping != null) {
					selectedRepo = mapping.getRepository();
				}
			}
		}
		if (selectedRepo == null) {
			selectedRepo = AdapterUtils.adapt(first, Repository.class);
		}
		if (selectedRepo == null) {
			return;
		}

		// Only update when different repository is selected
		Repository currentRepo = getRepository();
		if (currentRepo == null
				|| !selectedRepo.getDirectory().equals(
						currentRepo.getDirectory())) {
			showReflogFor(selectedRepo);
		}
	}

