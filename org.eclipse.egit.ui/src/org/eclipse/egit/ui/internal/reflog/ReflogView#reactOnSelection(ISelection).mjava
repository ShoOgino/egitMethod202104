	private void reactOnSelection(ISelection selection) {
		if (!(selection instanceof IStructuredSelection))
			return;
		IStructuredSelection ssel = (IStructuredSelection) selection;
		if (ssel.size() != 1)
			return;
		Repository selectedRepo = null;
		Object first = ssel.getFirstElement();
		if (first instanceof IResource) {
			IResource resource = (IResource) ssel.getFirstElement();
			RepositoryMapping mapping = RepositoryMapping.getMapping(resource
					.getProject());
			if (mapping != null)
				selectedRepo = mapping.getRepository();
		}
		if (selectedRepo == null && first instanceof IAdaptable) {
			IResource adapted = CommonUtils.getAdapter(((IAdaptable) ssel
					.getFirstElement()), IResource.class);
			if (adapted != null) {
				RepositoryMapping mapping = RepositoryMapping
						.getMapping(adapted);
				if (mapping != null)
					selectedRepo = mapping.getRepository();
			}
			if (selectedRepo == null) {
				selectedRepo = CommonUtils.getAdapter(
						((IAdaptable) ssel.getFirstElement()),
						Repository.class);
			}
		}

		if (selectedRepo == null && first instanceof RepositoryTreeNode) {
			RepositoryTreeNode repoNode = (RepositoryTreeNode) ssel
					.getFirstElement();
			selectedRepo = repoNode.getRepository();
		}
		if (selectedRepo == null)
			return;

		// Only update when different repository is selected
		Repository currentRepo = getRepository();
		if (currentRepo == null
				|| !selectedRepo.getDirectory().equals(
						currentRepo.getDirectory()))
			showReflogFor(selectedRepo);
	}

