	public Object execute(final ExecutionEvent event) throws ExecutionException {
		final Repository repository = getRepository(true, event);
		if (repository == null)
			return null;

		if (!canMerge(repository, event))
			return null;

		MergeTargetSelectionDialog mergeTargetSelectionDialog = new MergeTargetSelectionDialog(
				getShell(event), repository);
		if (mergeTargetSelectionDialog.open() == IDialogConstants.OK_ID) {

			final String refName = mergeTargetSelectionDialog.getRefName();

			String jobname = NLS.bind(UIText.MergeAction_JobNameMerge, refName);
			final MergeOperation op = new MergeOperation(repository, refName);
			Job job = new Job(jobname) {
				@Override
				protected IStatus run(IProgressMonitor monitor) {
					try {
						op.execute(monitor);
					} catch (final CoreException e) {
						return e.getStatus();
					}
					return Status.OK_STATUS;
				}
			};
			job.setUser(true);
			job.addJobChangeListener(new JobChangeAdapter() {
				@Override
				public void done(IJobChangeEvent cevent) {
					IStatus result = cevent.getJob().getResult();
					if (result.getSeverity() == IStatus.CANCEL) {
						Display.getDefault().asyncExec(new Runnable() {
							public void run() {
								try {
									MessageDialog
											.openInformation(
													getShell(event),
													UIText.MergeAction_MergeCanceledTitle,
													UIText.MergeAction_MergeCanceledMessage);
								} catch (ExecutionException e) {
									Activator
											.handleError(
													UIText.MergeAction_MergeCanceledMessage,
													null, true);
								}
							}
						});
					} else if (!result.isOK()) {
						Activator.handleError(result.getMessage(), result
								.getException(), true);
					} else {
						Display.getDefault().asyncExec(new Runnable() {
							public void run() {
								try {
									MessageDialog
											.openInformation(
													getShell(event),
													UIText.MergeAction_MergeResultTitle,
													op.getResult().toString());
								} catch (ExecutionException e) {
									Activator.handleError(op.getResult()
											.toString(), null, true);
								}
							}
						});
					}
				}
			});
			job.schedule();
		}
		return null;
	}

