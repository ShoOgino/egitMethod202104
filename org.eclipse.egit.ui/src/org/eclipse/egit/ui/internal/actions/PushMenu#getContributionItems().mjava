	@Override
	protected IContributionItem[] getContributionItems() {
		List<IContributionItem> res = new ArrayList<IContributionItem>();

		if (this.selectionService != null
				&& this.selectionService.getSelection() instanceof IStructuredSelection) {
			IStructuredSelection sel = (IStructuredSelection) this.selectionService
					.getSelection();
			Object selected = sel.getFirstElement();
			if (selected instanceof IAdaptable) {
				Object adapter = ((IAdaptable) selected)
						.getAdapter(IProject.class);
				if (adapter != null)
					selected = adapter;
			}

			Repository repository = null;
			if (selected instanceof RepositoryNode)
				repository = ((RepositoryNode) selected).getRepository();
			else if (selected instanceof BranchesNode)
				repository = ((BranchesNode) selected).getRepository();
			else if (selected instanceof LocalNode)
				repository = ((LocalNode) selected).getRepository();
			else if ((selected instanceof IProject)) {
				RepositoryMapping mapping = RepositoryMapping
						.getMapping((IProject) selected);
				if (mapping != null)
					repository = mapping.getRepository();
			}

			if (repository != null) {
				try {
					String ref = repository.getFullBranch();
					String menuLabel = UIText.PushMenu_PushHEAD;
					if (ref.startsWith(Constants.R_HEADS)) {
						menuLabel = NLS.bind(UIText.PushMenu_PushBranch,
								Repository.shortenRefName(ref));
					}
					CommandContributionItemParameter params = new CommandContributionItemParameter(
							this.serviceLocator, getClass().getName(),
							ActionCommands.PUSH_BRANCH_ACTION,
							CommandContributionItem.STYLE_PUSH);
					params.label = menuLabel;
					CommandContributionItem item = new CommandContributionItem(
							params);
					res.add(item);
				} catch (IOException ex) {
					Activator.handleError(ex.getLocalizedMessage(), ex, false);
				}
			}
		}
		return res.toArray(new IContributionItem[res.size()]);
	}

