	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		// capture selection from active part as long as we have context
		mySelection = getSelection(event);
		try {
			IWorkbenchPart part = getPart(event);
			DiscardChangesOperation operation = createOperation(part, event);
			if (operation == null) {
				return null;
			}
			Map<Repository, Collection<String>> paths = operation
					.getPathsPerRepository();
			if (!CommandConfirmation.confirmCheckout(getShell(event), paths,
					!hasDirectories)) {
				return null;
			}
			JobUtil.scheduleUserWorkspaceJob(operation,
					UIText.DiscardChangesAction_discardChanges,
					JobFamilies.DISCARD_CHANGES);
			return null;
		} finally {
			// cleanup mySelection to avoid side effects later after execution
			mySelection = null;
		}
	}

