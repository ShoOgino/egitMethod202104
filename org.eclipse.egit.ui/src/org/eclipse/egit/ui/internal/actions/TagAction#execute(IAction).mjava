	@Override
	protected void execute(IAction action) throws InvocationTargetException,
			InterruptedException {
		repo = getRepository(true);
		if (repo == null)
			return;

		if (!repo.getRepositoryState().canCheckout()) {
			MessageDialog.openError(getShell(),
					UIText.TagAction_cannotCheckout, NLS.bind(
							UIText.TagAction_repositoryState, repo
									.getRepositoryState().getDescription()));
			return;
		}

		String currentBranchName;
		try {
			currentBranchName = repo.getBranch();
		} catch (IOException e) {
			throw new InvocationTargetException(e,
					UIText.TagAction_cannotGetBranchName);
		}

		CreateTagDialog dialog = new CreateTagDialog(getShell(),
				ValidationUtils
						.getRefNameInputValidator(repo, Constants.R_TAGS),
				currentBranchName);

		// get and set commits
		RevWalk revCommits = getRevCommits();
		dialog.setRevCommitList(revCommits);

		// get and set existing tags
		List<Tag> tags = getRevTags();
		dialog.setExistingTags(tags);

		if (dialog.open() != IDialogConstants.OK_ID)
			return;

		final Tag tag = new Tag(repo);
		PersonIdent personIdent = new PersonIdent(repo);
		String tagName = dialog.getTagName();

		tag.setTag(tagName);
		tag.setTagger(personIdent);
		tag.setMessage(dialog.getTagMessage());

		ObjectId tagCommit = getTagCommit(dialog.getTagCommit());
		tag.setObjId(tagCommit);

		String tagJobName = NLS.bind(UIText.TagAction_creating, tagName);
		final boolean shouldMoveTag = dialog.shouldOverWriteTag();

		Job tagJob = new Job(tagJobName) {
			protected IStatus run(IProgressMonitor monitor) {
				try {
					new TagOperation(repo, tag, shouldMoveTag).execute(monitor);
				} catch (CoreException e) {
					return Activator.createErrorStatus(
							UIText.TagAction_taggingFailed, e);
				} finally {
					GitLightweightDecorator.refresh();
				}

				return Status.OK_STATUS;
			}

		};

		tagJob.setUser(true);
		tagJob.schedule();
	}

