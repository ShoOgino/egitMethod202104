	public Object execute(ExecutionEvent event) throws ExecutionException {
		final IResource resource = getSelectedResources(event)[0];
		final RepositoryMapping mapping = RepositoryMapping.getMapping(resource
				.getProject());
		if (mapping == null || mapping.getRepository() == null)
			return null;
		final Repository repo = mapping.getRepository();

		CompareTargetSelectionDialog dlg = new CompareTargetSelectionDialog(
				getShell(event), repo, resource.getFullPath().toString());
		if (dlg.open() == Window.OK) {

			if (resource instanceof IFile) {
				final IFile baseFile = (IFile) resource;

				final ITypedElement base = new FileRevisionTypedElement(
						new LocalFileRevision(baseFile));

				final ITypedElement next;
				try {
					next = getElementForRef(mapping.getRepository(), mapping
							.getRepoRelativePath(baseFile), dlg.getRefName());
				} catch (IOException e) {
					Activator.handleError(
							UIText.CompareWithIndexAction_errorOnAddToIndex, e,
							true);
					return null;
				}

				final GitCompareFileRevisionEditorInput in = new GitCompareFileRevisionEditorInput(
						base, next, null);
				in.getCompareConfiguration().setRightLabel(dlg.getRefName());
				CompareUI.openCompareEditor(in);
			}

			if (resource instanceof IContainer) {
				CompareTreeView view;
				try {
					view = (CompareTreeView) PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage()
							.showView(CompareTreeView.ID);
					view.setInput(resource, dlg.getRefName());
				} catch (PartInitException e) {
					Activator.handleError(e.getMessage(), e, true);
				}
			}
		}
		return null;
	}

