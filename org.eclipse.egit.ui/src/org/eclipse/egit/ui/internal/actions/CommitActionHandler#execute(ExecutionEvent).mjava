	@Override
	public Object execute(final ExecutionEvent event) throws ExecutionException {

		final Repository repository = getRepository(true, event);
		if (repository == null) {
			return null;
		}
		IPreferenceStore uiPreferences = Activator.getDefault()
				.getPreferenceStore();
		boolean useStagingView = uiPreferences
				.getBoolean(UIPreferences.ALWAYS_USE_STAGING_VIEW);
		if (useStagingView) {
			if (uiPreferences.getBoolean(UIPreferences.AUTO_STAGE_ON_COMMIT)) {
				boolean includeUntracked = uiPreferences.getBoolean(
						UIPreferences.COMMIT_DIALOG_INCLUDE_UNTRACKED);
				autoStage(repository, includeUntracked,
						getResourcesInScope(event));
			}
			PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {

				@Override
				public void run() {
					try {
						StagingView view = (StagingView) PlatformUI.getWorkbench()
								.getActiveWorkbenchWindow().getActivePage()
								.showView(StagingView.VIEW_ID);
						if (view.getCurrentRepository() != repository) {
							view.reload(repository);
						}
						view.setFocus();
					} catch (PartInitException e) {
						Activator.logError(e.getMessage(), e);
					}
				}
			});
		} else {
			final Shell shell = getShell(event);
			IResource[] resourcesInScope = getResourcesInScope(event);
			if (resourcesInScope != null) {
				CommitUI commitUi = new CommitUI(shell, repository,
						resourcesInScope, false);
				commitUi.commit();
			}
		}
		return null;
	}

