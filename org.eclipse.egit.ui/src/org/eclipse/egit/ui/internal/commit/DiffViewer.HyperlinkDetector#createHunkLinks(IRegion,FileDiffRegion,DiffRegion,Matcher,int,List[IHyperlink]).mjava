		private void createHunkLinks(IRegion region, FileDiffRegion fileRange,
				DiffRegion range, Matcher m, int lineOffset,
				List<IHyperlink> links) {
			DiffEntry.ChangeType change = fileRange.getDiff().getChange();
			if (change != DiffEntry.ChangeType.ADD) {
				IRegion linkRegion = new Region(range.getOffset() + m.start(1),
						m.end(1) - m.start(1));
				if (TextUtilities.overlaps(linkRegion, region)) {
					int lineNo = Integer.parseInt(m.group(2)) - 1 + lineOffset;
					if (change != DiffEntry.ChangeType.DELETE) {
						links.add(
								new CompareLink(linkRegion, fileRange, lineNo));
					}
					IHyperlink fileLink = createWorkingTreeLink(linkRegion,
							fileRange.getDiff(), DiffEntry.Side.OLD, lineNo);
					if (fileLink != null) {
						links.add(fileLink);
					}
					links.add(new OpenLink(linkRegion, fileRange,
							DiffEntry.Side.OLD, lineNo));
				}
			}
			if (change != DiffEntry.ChangeType.DELETE) {
				IRegion linkRegion = new Region(range.getOffset() + m.start(3),
						m.end(3) - m.start(3));
				if (TextUtilities.overlaps(linkRegion, region)) {
					int lineNo = Integer.parseInt(m.group(4)) - 1 + lineOffset;
					if (change != DiffEntry.ChangeType.ADD) {
						links.add(
								new CompareLink(linkRegion, fileRange, lineNo));
					}
					IHyperlink fileLink = createWorkingTreeLink(linkRegion,
							fileRange.getDiff(), DiffEntry.Side.NEW, lineNo);
					if (fileLink != null) {
						links.add(fileLink);
					}
					links.add(new OpenLink(linkRegion, fileRange,
							DiffEntry.Side.NEW, lineNo));
				}
			}
		}

