	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		RevCommit commit = getSelectedItem(RevCommit.class, event);
		if (commit == null)
			return null;
		Repository repo = getSelectedItem(Repository.class, event);
		if (repo == null)
			return null;

		Shell shell = getPart(event).getSite().getShell();

		String newMessage = promptCommitMessage(shell, commit);
		if (newMessage == null || newMessage.equals(commit.getFullMessage())) {
			return null;
		}

		final RewordCommitOperation op = new RewordCommitOperation(repo,
				commit, newMessage);

		Job job = new RepositoryJob(MessageFormat.format(
				UIText.RewordHandler_JobName, commit.name()), null) {

			private IStatus gpgConfigProblem;

			@Override
			protected IStatus performJob(IProgressMonitor monitor) {
				try {
					op.execute(monitor);
				} catch (CoreException e) {
					IStatus status = e.getStatus();
					if (status
							.getException() instanceof GpgConfigurationException) {
						gpgConfigProblem = e.getStatus();
						// We're going to show our own dialog
						return Status.OK_STATUS;
					}
					return status;
				} finally {
					monitor.done();
				}
				return Status.OK_STATUS;
			}

			@Override
			public boolean belongsTo(Object family) {
				if (JobFamilies.REWORD.equals(family))
					return true;
				return super.belongsTo(family);
			}

			@Override
			protected IAction getAction() {
				if (gpgConfigProblem == null || gpgConfigProblem.isOK()) {
					return null;
				}
				return new GpgConfigProblemReportAction(gpgConfigProblem,
						UIText.RewordHandler_GpgConfigProblem);
			}
		};
		job.setUser(true);
		job.setRule(op.getSchedulingRule());
		job.schedule();
		return null;
	}

