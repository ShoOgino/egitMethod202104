	/**
	 * @see org.eclipse.ui.forms.editor.SharedHeaderFormEditor#createHeaderContents(org.eclipse.ui.forms.IManagedForm)
	 */
	@Override
	protected void createHeaderContents(IManagedForm headerForm) {
		headerForm.addPart(new FocusManagerFormPart(headerFocusTracker) {

			@Override
			public void setDefaultFocus() {
				headerForm.getForm().getForm().setFocus();
			}
		});
		RepositoryCommit commit = getCommit();
		ScrolledForm form = headerForm.getForm();
		String commitName = commit.getRevCommit().name();
		String title = getFormattedHeaderTitle(commitName);
		HeaderText text = new HeaderText(form.getForm(), title, commitName);
		Control textControl = text.getControl();
		if (textControl != null) {
			headerFocusTracker.addToFocusTracking(textControl);
		}
		form.setToolTipText(commitName);
		getToolkit().decorateFormHeading(form.getForm());

		IToolBarManager toolbar = form.getToolBarManager();

		ControlContribution repositoryLabelControl = new ControlContribution(
				"repositoryLabel") { //$NON-NLS-1$
			@Override
			protected Control createControl(Composite parent) {
				FormToolkit toolkit = getHeaderForm().getToolkit();
				Composite composite = toolkit.createComposite(parent);
				RowLayout layout = new RowLayout();
				composite.setLayout(layout);
				composite.setBackground(null);
				String label = getCommit().getRepositoryName();

				ImageHyperlink link = new ImageHyperlink(composite, SWT.NONE);
				// Focus tracking on this link doesn't really work. It's a
				// focusable control inside another focusable control (the
				// toolbar). When focus leaves this control through tabbing
				// or deactivating the editor, the toolbar gets the focus (and
				// possibly loses it right away again). Thus the focus tracker
				// will always see the toolbar as the last focused control.
				// Unfortunately there is no other way to get some text onto
				// the first line of a FormHeading.
				headerFocusTracker.addToFocusTracking(link);
				link.setText(label);
				link.setFont(JFaceResources.getBannerFont());
				link.setForeground(toolkit.getColors().getColor(
						IFormColors.TITLE));
				link.setToolTipText(UIText.CommitEditor_showGitRepo);
				link.addHyperlinkListener(new HyperlinkAdapter() {
					@Override
					public void linkActivated(HyperlinkEvent event) {
						RepositoriesView view;
						try {
							view = (RepositoriesView) PlatformUI.getWorkbench()
									.getActiveWorkbenchWindow().getActivePage()
									.showView(RepositoriesView.VIEW_ID);
							view.showRepository(getCommit().getRepository());
						} catch (PartInitException e) {
							Activator.handleError(
									UIText.CommitEditor_couldNotShowRepository,
									e, false);
						}
					}
				});

				return composite;
			}
		};
		toolbar.add(repositoryLabelControl);
		if (commit.isStash()) {
			toolbar.add(createCommandContributionItem(StashApplyHandler.ID));
			toolbar.add(createCommandContributionItem(StashDropHandler.ID));
		} else {
			toolbar.add(createCommandContributionItem(CreateTagHandler.ID));
			toolbar.add(createCommandContributionItem(CreateBranchHandler.ID));
			toolbar.add(createCommandContributionItem(CheckoutHandler.ID));
			toolbar.add(createCommandContributionItem(CherryPickHandler.ID));
			toolbar.add(createCommandContributionItem(RevertHandler.ID));
			toolbar.add(createCommandContributionItem(ShowInHistoryHandler.ID));
		}
		addContributions(toolbar);
		toolbar.update(true);
		getSite().setSelectionProvider(new ISelectionProvider() {

			@Override
			public void setSelection(ISelection selection) {
				// Ignored
			}

			@Override
			public void removeSelectionChangedListener(
					ISelectionChangedListener listener) {
				// Ignored
			}

			@Override
			public ISelection getSelection() {
				return new StructuredSelection(getCommit());
			}

			@Override
			public void addSelectionChangedListener(
					ISelectionChangedListener listener) {
				// Ignored
			}
		});
		if (toolbar instanceof ToolBarManager) {
			Control control = ((ToolBarManager) toolbar).getControl();
			if (control != null) {
				headerFocusTracker.addToFocusTracking(control);
			}
		}
	}

