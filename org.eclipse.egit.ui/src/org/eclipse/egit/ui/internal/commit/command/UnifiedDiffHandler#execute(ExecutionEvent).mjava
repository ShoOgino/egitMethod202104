	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		List<IRepositoryCommit> commits = getCommits(event);
		if (commits.size() == 2) {
			IRepositoryCommit tip = commits.get(0);
			if (tip != null) {
				DiffEditorInput input = new DiffEditorInput(tip,
						commits.get(1));
				IWorkbenchWindow window = PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow();
				IWorkbenchPage page = window.getActivePage();
				IEditorReference[] editors = page.findEditors(input,
						DiffEditor.EDITOR_ID,
						IWorkbenchPage.MATCH_ID + IWorkbenchPage.MATCH_INPUT);
				if (editors != null && editors.length > 0) {
					IEditorPart existing = editors[0].getEditor(false);
					if (existing != null) {
						page.activate(existing);
						return null;
					}
				}
				DiffEditor.DiffJob job = DiffEditor.getDiffer(tip,
						input.getBase());
				job.addJobChangeListener(new JobChangeAdapter() {
					@Override
					public void done(IJobChangeEvent evt) {
						if (!evt.getResult().isOK()) {
							return;
						}
						input.setDocument(job.getDocument());
						new UIJob(UIText.DiffEditor_TaskUpdatingViewer) {

							@Override
							public IStatus runInUIThread(
									IProgressMonitor uiMonitor) {
								try {
									page.openEditor(input, DiffEditor.EDITOR_ID,
											true);
								} catch (PartInitException e) {
									return e.getStatus();
								}
								return Status.OK_STATUS;
							}
						}.schedule(50);
						// Schedule with a small delay so that the progress
						// dialog can close.
					}
				});
				job.setUser(true);
				job.schedule();
			}
		}
		return null;
	}

