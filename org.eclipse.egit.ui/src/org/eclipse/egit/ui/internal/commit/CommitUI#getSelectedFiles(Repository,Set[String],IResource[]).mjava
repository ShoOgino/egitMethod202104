	/**
	 * Retrieves a collection of files that may be committed based on the user's
	 * selection when they performed the commit action. That is, even if the
	 * user only selected one folder when the action was performed, if the
	 * folder contains any files that could be committed, they will be returned.
	 *
	 * @param repository
	 *            being operated on
	 * @param mayBeCommitted
	 *            {@link Set} containing all files that may be committed
	 * @param resourcesSelected
	 *            the resources currently selected
	 *
	 * @return a collection of files that is eligible to be committed based on
	 *         the user's selection
	 */
	public static Set<String> getSelectedFiles(Repository repository,
			Set<String> mayBeCommitted,
			IResource[] resourcesSelected) {
		Set<String> preselectionCandidates = new LinkedHashSet<>();
		if (repository == null || mayBeCommitted.isEmpty()) {
			return preselectionCandidates;
		}
		List<String> selectedDirectories = new ArrayList<>();
		Set<String> selectedFiles = new HashSet<>();
		for (IResource rsc : resourcesSelected) {
			IPath p = ResourceUtil.getRepositoryRelativePath(rsc.getLocation(),
					repository);
			if (p != null) {
				if (p.isEmpty()) {
					// Resource is the root of the working tree: include all
					return mayBeCommitted;
				} else {
					String rscPath = p.toString();
					if (rsc.getType() == IResource.FILE) {
						selectedFiles.add(rscPath);
					} else {
						selectedDirectories.add(rscPath + '/');
					}
				}
			}
		}
		// Sorting moves parent directories to the front and thus we waste
		// less time re-checking for sub-directories.
		Collections.sort(selectedDirectories);
		String lastAncestor = null;
		for (String prefix : selectedDirectories) {
			if (lastAncestor != null && prefix.startsWith(lastAncestor)) {
				// Skip sub-directories if we already checked for an ancestor.
				continue;
			}
			Iterator<String> iterator = mayBeCommitted.iterator();
			while (iterator.hasNext()) {
				String candidate = iterator.next();
				if (candidate.startsWith(prefix)) {
					iterator.remove();
					preselectionCandidates.add(candidate);
				}
			}
			if (mayBeCommitted.isEmpty()) {
				return preselectionCandidates;
			}
			lastAncestor = prefix;
		}
		selectedFiles.retainAll(mayBeCommitted);
		preselectionCandidates.addAll(selectedFiles);
		return preselectionCandidates;
	}

