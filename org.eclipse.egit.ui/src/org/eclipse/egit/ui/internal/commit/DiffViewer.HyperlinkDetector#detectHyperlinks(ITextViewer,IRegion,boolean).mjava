		@Override
		public IHyperlink[] detectHyperlinks(ITextViewer textViewer,
				IRegion region, boolean canShowMultipleHyperlinks) {
			IDocument document = textViewer.getDocument();
			if (!(document instanceof DiffDocument)
					|| document.getLength() == 0) {
				return null;
			}
			DiffDocument diffDocument = (DiffDocument) document;
			DiffRegion[] regions = diffDocument.getRegions();
			FileDiffRegion[] fileRegions = diffDocument.getFileRegions();
			if (regions == null || regions.length == 0 || fileRegions == null
					|| fileRegions.length == 0) {
				return null;
			}
			int start = region.getOffset();
			int end = region.getOffset() + region.getLength();
			DiffRegion key = new DiffRegion(start, 0);
			int i = Arrays.binarySearch(regions, key, (a, b) -> {
				if (a.getOffset() > b.getOffset() + b.getLength()) {
					return 1;
				}
				if (a.getOffset() + a.getLength() < b.getOffset()) {
					return -1;
				}
				return 0;
			});
			List<IHyperlink> links = new ArrayList<>();
			FileDiffRegion fileRange = null;
			for (; i >= 0 && i < regions.length; i++) {
				DiffRegion range = regions[i];
				if (range.getOffset() >= end) {
					break;
				}
				if (range.getOffset() + range.getLength() <= start) {
					continue;
				}
				// Range overlaps region
				switch (range.getType()) {
				case HEADLINE:
					fileRange = findFileRange(diffDocument, fileRange,
							range.getOffset());
					if (fileRange != null) {
						DiffEntry.ChangeType change = fileRange.getDiff()
								.getChange();
						switch (change) {
						case ADD:
						case DELETE:
							break;
						default:
							if (getString(document, range.getOffset(),
									range.getLength()).startsWith("diff")) { //$NON-NLS-1$
								// "diff" is at the beginning
								IRegion linkRegion = new Region(
										range.getOffset(), 4);
								if (TextUtilities.overlaps(region,
										linkRegion)) {
									links.add(new CompareLink(linkRegion,
											fileRange, -1));
								}
							}
							break;
						}
					}
					break;
				case HEADER:
					fileRange = findFileRange(diffDocument, fileRange,
							range.getOffset());
					if (fileRange != null) {
						String line = getString(document, range.getOffset(),
								range.getLength());
						createHeaderLinks((DiffDocument) document, region,
								fileRange, range, line, DiffEntry.Side.OLD,
								links);
						createHeaderLinks((DiffDocument) document, region,
								fileRange, range, line, DiffEntry.Side.NEW,
								links);
					}
					break;
				case HUNK:
					fileRange = findFileRange(diffDocument, fileRange,
							range.getOffset());
					if (fileRange != null) {
						String line = getString(document, range.getOffset(),
								range.getLength());
						Matcher m = HUNK_LINE_PATTERN.matcher(line);
						if (m.find()) {
							int lineOffset = getContextLines(document, range,
									i + 1 < regions.length ? regions[i + 1]
											: null);
							createHunkLinks(region, fileRange, range, m,
									lineOffset, links);
						}
					}
					break;
				default:
					break;
				}
			}
			if (links.isEmpty()) {
				return null;
			}
			return links.toArray(new IHyperlink[0]);
		}

