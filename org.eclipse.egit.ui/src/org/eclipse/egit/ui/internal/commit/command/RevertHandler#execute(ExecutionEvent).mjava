	public Object execute(final ExecutionEvent event) throws ExecutionException {
		List<RepositoryCommit> commits = getCommits(event);
		if (commits.size() == 1) {
			RepositoryCommit repoCommit = commits.get(0);
			final RevCommit commit = repoCommit.getRevCommit();
			Repository repo = repoCommit.getRepository();
			final Shell shell = getPart(event).getSite().getShell();

			final RevertCommitOperation op = new RevertCommitOperation(repo,
					commit);

			Job job = new WorkspaceJob(MessageFormat.format(
					UIText.RevertHandler_JobName, commit.name())) {

				@Override
				public IStatus runInWorkspace(IProgressMonitor monitor) {
					try {
						op.execute(monitor);
						RevCommit newHead = op.getNewHead();
						List<Ref> revertedRefs = op.getRevertedRefs();
						if (newHead != null && revertedRefs.isEmpty())
							showRevertedDialog(shell);
						if (newHead == null)
							showFailureDialog(shell, commit,
									op.getFailingResult());
					} catch (CoreException e) {
						Activator.handleError(
								UIText.RevertOperation_InternalError, e, true);
					}
					return Status.OK_STATUS;
				}

				@Override
				public boolean belongsTo(Object family) {
					if (JobFamilies.REVERT_COMMIT.equals(family))
						return true;
					return super.belongsTo(family);
				}
			};
			job.setUser(true);
			job.setRule(op.getSchedulingRule());
			job.schedule();
			return null;
		}
		return null;
	}

