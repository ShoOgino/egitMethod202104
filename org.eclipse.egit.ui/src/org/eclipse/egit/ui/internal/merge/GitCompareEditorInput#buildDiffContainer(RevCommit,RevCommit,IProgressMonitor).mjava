	private IDiffContainer buildDiffContainer(RevCommit baseCommit,
			RevCommit compareCommit, IProgressMonitor monitor)
			throws IOException, InterruptedException {
		boolean useIndex = compareVersion.equals(CompareTreeView.INDEX_VERSION);
		boolean checkIgnored = false;

		IDiffContainer result = new DiffNode(Differencer.CONFLICTING);

		TreeWalk tw = new TreeWalk(repository);

		// filter by selected resources
		if (filterPathStrings.size() > 1) {
			List<TreeFilter> suffixFilters = new ArrayList<TreeFilter>();
			for (String filterPath : filterPathStrings)
				suffixFilters.add(PathFilter.create(filterPath));
			TreeFilter otf = OrTreeFilter.create(suffixFilters);
			tw.setFilter(otf);
		} else if (filterPathStrings.size() > 0) {
			String path = filterPathStrings.get(0);
			if (path.length() != 0)
				tw.setFilter(PathFilter.create(path));
		}

		tw.setRecursive(true);

		int baseTreeIndex;
		if (baseCommit == null) {
			// compare workspace with something
			checkIgnored = true;
			baseTreeIndex = tw.addTree(new AdaptableFileTreeIterator(
					repository, ResourcesPlugin.getWorkspace().getRoot()));
		} else
			baseTreeIndex = tw.addTree(new CanonicalTreeParser(null, repository
					.newObjectReader(), baseCommit.getTree()));
		int compareTreeIndex;
		if (!useIndex)
			compareTreeIndex = tw.addTree(new CanonicalTreeParser(null,
					repository.newObjectReader(), compareCommit.getTree()));
		else
			// compare something with the index
			compareTreeIndex = tw.addTree(new DirCacheIterator(repository
					.readDirCache()));

		try {
			while (tw.next()) {
				if (monitor.isCanceled())
					throw new InterruptedException();
				AbstractTreeIterator compareVersionIterator = tw.getTree(
						compareTreeIndex, AbstractTreeIterator.class);
				AbstractTreeIterator baseVersionIterator = tw.getTree(
						baseTreeIndex, AbstractTreeIterator.class);
				if (checkIgnored
						&& baseVersionIterator != null
						&& ((WorkingTreeIterator) baseVersionIterator)
								.isEntryIgnored())
					continue;

				if (compareVersionIterator != null
						&& baseVersionIterator != null) {
					// content exists on both sides
					boolean equalContent = compareVersionIterator
							.getEntryObjectId().equals(
									baseVersionIterator.getEntryObjectId());
					if (equalContent)
						continue;
					monitor.setTaskName(baseVersionIterator
							.getEntryPathString());
					GitFileRevision baseRev = GitFileRevision.inCommit(
							repository, baseCommit, baseVersionIterator
									.getEntryPathString(), tw
									.getObjectId(baseTreeIndex));
					GitFileRevision compareRev;
					if (!useIndex)
						compareRev = GitFileRevision.inCommit(repository,
								compareCommit, compareVersionIterator
										.getEntryPathString(), tw
										.getObjectId(compareTreeIndex));
					else
						compareRev = GitFileRevision.inIndex(repository,
								compareVersionIterator.getEntryPathString());

					add(result, baseVersionIterator.getEntryPathString(),
							new DiffNode(new FileRevisionTypedElement(baseRev),
									new FileRevisionTypedElement(compareRev)));

				} else if (baseVersionIterator != null
						&& compareVersionIterator == null) {
					monitor.setTaskName(baseVersionIterator
							.getEntryPathString());
					// only on base side
					GitFileRevision baseRev = GitFileRevision.inCommit(
							repository, baseCommit, baseVersionIterator
									.getEntryPathString(), tw
									.getObjectId(baseTreeIndex));
					add(result, baseVersionIterator.getEntryPathString(),
							new DiffNode(Differencer.DELETION, null, null,
									new FileRevisionTypedElement(baseRev)));
				} else if (compareVersionIterator != null
						&& baseVersionIterator == null) {
					monitor.setTaskName(compareVersionIterator
							.getEntryPathString());
					// only on compare side
					GitFileRevision compareRev = GitFileRevision.inCommit(
							repository, compareCommit, compareVersionIterator
									.getEntryPathString(), tw
									.getObjectId(compareTreeIndex));
					add(result, compareVersionIterator.getEntryPathString(),
							new DiffNode(Differencer.ADDITION, null, null,
									new FileRevisionTypedElement(compareRev)));
				}

				if (monitor.isCanceled())
					throw new InterruptedException();
			}
			return result;
		} finally {
			tw.release();
		}
	}

