	/**
	 * Creates a simple {@link Pattern} that can be used for matching content
	 * assist proposals. The pattern ignores leading blanks and allows '*' as a
	 * wildcard matching multiple arbitrary characters.
	 *
	 * @param content
	 *            to create the pattern from
	 * @return the pattern, or {@code null} if none could be created
	 */
	public static Pattern createProposalPattern(String content) {
		// Make the simplest possible pattern check: allow "*"
		// for multiple characters.
		String patternString = content;
		// Ignore spaces in the beginning.
		while (patternString.length() > 0 && patternString.charAt(0) == ' ') {
			patternString = patternString.substring(1);
		}

		// We quote the string as it may contain spaces
		// and other stuff colliding with the pattern.
		patternString = Pattern.quote(patternString);

		patternString = patternString.replaceAll("\\x2A", ".*"); //$NON-NLS-1$ //$NON-NLS-2$

		// Make sure we add a (logical) * at the end.
		if (!patternString.endsWith(".*")) { //$NON-NLS-1$
			patternString = patternString + ".*"; //$NON-NLS-1$
		}

		// Compile a case-insensitive pattern (assumes ASCII only).
		Pattern pattern;
		try {
			pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE);
		} catch (PatternSyntaxException e) {
			pattern = null;
		}
		return pattern;
	}

