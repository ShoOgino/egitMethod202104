	/**
	 * Adds a content proposal for arbitrary elements to a text field.
	 *
	 * @param <T>
	 *            type of the proposal candidate objects
	 *
	 * @param textField
	 *            the text field
	 * @param candidateProvider
	 *            {@link IContentProposalCandidateProvider} providing the
	 *            candidates eligible for creating {@link IContentProposal}s
	 * @param factory
	 *            {@link IContentProposalFactory} to use to create proposals
	 *            from candidates
	 * @param startTypingMessage
	 *            hover message if no content assist key binding is active
	 * @param shortcutMessage
	 *            hover message if a content assist key binding is active,
	 *            should have a "{0}" placeholder that will be filled by the
	 *            appropriate keystroke
	 */
	public static final <T> void addContentProposalToText(Text textField,
			IContentProposalCandidateProvider<T> candidateProvider,
			IContentProposalFactory<T> factory, String startTypingMessage,
			String shortcutMessage) {
		KeyStroke stroke = UIUtils
				.getKeystrokeOfBestActiveBindingFor(IWorkbenchCommandConstants.EDIT_CONTENT_ASSIST);
		if (stroke == null) {
			addBulbDecorator(textField, startTypingMessage);
		} else {
			addBulbDecorator(textField,
					NLS.bind(shortcutMessage, stroke.format()));
		}
		IContentProposalProvider cp = new IContentProposalProvider() {
			@Override
			public IContentProposal[] getProposals(String contents, int position) {
				List<IContentProposal> resultList = new ArrayList<>();

				// make the simplest possible pattern check: allow "*"
				// for multiple characters
				String patternString = contents;
				// ignore spaces in the beginning
				while (patternString.length() > 0
						&& patternString.charAt(0) == ' ') {
					patternString = patternString.substring(1);
				}

				// we quote the string as it may contain spaces
				// and other stuff colliding with the Pattern
				patternString = Pattern.quote(patternString);

				patternString = patternString.replaceAll("\\x2A", ".*"); //$NON-NLS-1$ //$NON-NLS-2$

				// make sure we add a (logical) * at the end
				if (!patternString.endsWith(".*")) { //$NON-NLS-1$
					patternString = patternString + ".*"; //$NON-NLS-1$
				}

				// let's compile a case-insensitive pattern (assumes ASCII only)
				Pattern pattern;
				try {
					pattern = Pattern.compile(patternString,
							Pattern.CASE_INSENSITIVE);
				} catch (PatternSyntaxException e) {
					pattern = null;
				}

				Collection<? extends T> candidates = candidateProvider
						.getCandidates();

				if (candidates != null)
					for (final T ref : candidates) {
						IContentProposal proposal = factory.getProposal(pattern,
								ref);
						if (proposal != null) {
							resultList.add(proposal);
						}
					}

				return resultList.toArray(new IContentProposal[resultList
						.size()]);
			}
		};

		ContentProposalAdapter adapter = new ContentProposalAdapter(textField,
				new TextContentAdapter(), cp, stroke,
				UIUtils.VALUE_HELP_ACTIVATIONCHARS);
		// set the acceptance style to always replace the complete content
		adapter.setProposalAcceptanceStyle(
				ContentProposalAdapter.PROPOSAL_REPLACE);
	}

