	/**
	 * Detects and returns all available hyperlinks for the given {@link TextViewer} which link to a Git commit.
	 */
	public IHyperlink[] detectHyperlinks(ITextViewer textViewer,
			IRegion region, boolean canShowMultipleHyperlinks) {

		IDocument document = textViewer.getDocument();
		if (document == null || document.getLength() == 0)
			return null;

		String content;
		int offset = region.getOffset();
		int length = region.getLength();
		try {
			if (length == 0) {
				IRegion lineInformation = document
						.getLineInformationOfOffset(offset);
				offset = lineInformation.getOffset();
				length = lineInformation.getLength();
			}
			content = document.get(offset, length);
		} catch (BadLocationException e) {
			return null;
		}

		List<IHyperlink> hyperlinks = new ArrayList<IHyperlink>();
		String[] words = content.split(" "); //$NON-NLS-1$
		Shell shell = textViewer.getTextWidget().getShell();
		for (String potentialId : words) {
			String foundId = null;
			int foundOffset = 0;
			if (ObjectId.isId(potentialId)) {
				foundId = potentialId;
				foundOffset = offset;
			} else if (potentialId.length() > Constants.OBJECT_ID_STRING_LENGTH) {
				// could be beginning or end of a sentence
				String potentialIdAtBeginning = potentialId.substring(0,
						Constants.OBJECT_ID_STRING_LENGTH);
				if (ObjectId.isId(potentialIdAtBeginning)) {
					foundId = potentialIdAtBeginning;
					foundOffset = offset;
				} else {
					String potentialIdAtEnd = potentialId.substring(potentialId
							.length() - Constants.OBJECT_ID_STRING_LENGTH);
					if (ObjectId.isId(potentialIdAtEnd)) {
						foundId = potentialIdAtEnd;
						foundOffset = potentialId.length()
								- Constants.OBJECT_ID_STRING_LENGTH;
					}

				}
			}
			if (foundId != null) {
				CommitHyperlink hyperlink = new CommitHyperlink(new Region(
						foundOffset, Constants.OBJECT_ID_STRING_LENGTH),
						foundId, shell);
				hyperlinks.add(hyperlink);
			}
			offset += potentialId.length() + 1;
		}

		// filter hyperlinks that do not match original region
		if (region.getLength() == 0) {
			for (Iterator<IHyperlink> it = hyperlinks.iterator(); it.hasNext();) {
				IHyperlink hyperlink = it.next();
				IRegion hyperlinkRegion = hyperlink.getHyperlinkRegion();
				if (!isInRegion(region, hyperlinkRegion))
					it.remove();
			}
		}

		if (hyperlinks.isEmpty())
			return null;

		return hyperlinks.toArray(new IHyperlink[hyperlinks.size()]);
	}

